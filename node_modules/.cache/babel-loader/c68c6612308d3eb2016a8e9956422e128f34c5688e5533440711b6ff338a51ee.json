{"ast":null,"code":"import DisasterTrackingService from './api/disasterTrackingService.js';\nimport EonetService from './api/eonetService.js';\nimport PowerService from './api/powerService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.eonetService = EonetService;\n    this.powerService = PowerService;\n\n    // Service configuration\n    this.config = {\n      enableDisasterTracking: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n\n      // Validate inputs\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Calculate date range for weather data\n      const startDate = this.addDays(targetDate, -this.config.defaultDayRange);\n      const endDate = this.addDays(targetDate, this.config.defaultDayRange);\n\n      // Fetch data from all sources in parallel\n      const [stormData, nearbyEvents, weatherData] = await Promise.all([this.eonetService.getWeatherEvents({\n        days: this.config.defaultDayRange\n      }), this.eonetService.getNearbyEvents(lat, lon, 500),\n      // 500km radius\n      this.powerService.getWeatherData(lat, lon, this.formatDate(startDate), this.formatDate(endDate))]);\n\n      // Process historical weather data\n      const processedWeatherData = weatherData ? processHistoricalData(weatherData) : null;\n\n      // Merge all data sources\n      const mergedData = {\n        storms: stormData,\n        nearbyEvents: nearbyEvents,\n        location: {\n          lat,\n          lon\n        },\n        date: targetDate,\n        summary: this.generateWeatherSummary(nearbyEvents),\n        weather: processedWeatherData,\n        current: weatherData ? weatherData.find(d => d.date === this.formatDate(targetDate)) : null\n      };\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      console.log('Weather analysis completed successfully');\n      return mergedData;\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add days to a date\n   * @param {string|Date} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Format date for API requests (YYYYMMDD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDate(date) {\n    return date.toISOString().split('T')[0].replace(/-/g, '');\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   */\n\n  /**\n   * Generate a weather summary based on nearby events\n   * @param {Array} events - Nearby weather events\n   * @returns {string} Summary text\n   */\n  generateWeatherSummary(events) {\n    if (!events || events.length === 0) {\n      return 'No significant weather events in the area.';\n    }\n    const severityCount = events.reduce((acc, event) => {\n      acc[event.severity] = (acc[event.severity] || 0) + 1;\n      return acc;\n    }, {});\n    const parts = [];\n    if (severityCount.severe) {\n      parts.push(`${severityCount.severe} severe weather event${severityCount.severe > 1 ? 's' : ''}`);\n    }\n    if (severityCount.moderate) {\n      parts.push(`${severityCount.moderate} moderate event${severityCount.moderate > 1 ? 's' : ''}`);\n    }\n    if (severityCount.mild) {\n      parts.push(`${severityCount.mild} mild event${severityCount.mild > 1 ? 's' : ''}`);\n    }\n    return `Found ${events.length} weather events in your area: ${parts.join(', ')}.`;\n  }\n\n  /**\n   * Validate coordinates\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} Whether coordinates are valid\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n\n  /**\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const {\n      formatForExport\n    } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.spaceWeather = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.disasterTracking = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;","map":{"version":3,"names":["DisasterTrackingService","EonetService","PowerService","processHistoricalData","mergeDataSources","validateDataIntegrity","WeatherService","constructor","disasterTrackingService","eonetService","powerService","config","enableDisasterTracking","defaultDayRange","maxRetries","getWeatherAnalysis","lat","lon","targetDate","console","log","isValidCoordinates","Error","startDate","addDays","endDate","stormData","nearbyEvents","weatherData","Promise","all","getWeatherEvents","days","getNearbyEvents","getWeatherData","formatDate","processedWeatherData","mergedData","storms","location","date","summary","generateWeatherSummary","weather","current","find","d","validation","isValid","warn","errors","error","result","Date","setDate","getDate","toISOString","split","replace","getDisasterEvents","status","fetchDisasterEvents","events","length","severityCount","reduce","acc","event","severity","parts","severe","push","moderate","mild","join","isNaN","getSpaceWeatherData","dayRange","enableSpaceWeather","spaceWeatherService","generateDefaultSpaceWeatherData","fetchSpaceWeatherData","filterDisasterEvents","filters","filteredEvents","category","filterByCategory","filterBySeverity","getDisasterStatistics","getEventStatistics","getDisasterEventIcon","categoryId","getEventIcon","exportData","data","format","formatForExport","require","getServiceStatus","services","meteomatics","meteomaticsService","getApiStatus","spaceWeather","service","enabled","apiKey","disasterTracking","baseUrl","configuration","lastUpdated","updateConfiguration","newConfig","healthCheck","health","overall","timestamp","validateCredentials","message","testEvents","weatherService"],"sources":["C:/xampp/htdocs/errors/src/services/weatherService.js"],"sourcesContent":["import DisasterTrackingService from './api/disasterTrackingService.js';\nimport EonetService from './api/eonetService.js';\nimport PowerService from './api/powerService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.eonetService = EonetService;\n    this.powerService = PowerService;\n    \n    // Service configuration\n    this.config = {\n      enableDisasterTracking: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n      \n      // Validate inputs\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Calculate date range for weather data\n      const startDate = this.addDays(targetDate, -this.config.defaultDayRange);\n      const endDate = this.addDays(targetDate, this.config.defaultDayRange);\n\n      // Fetch data from all sources in parallel\n      const [stormData, nearbyEvents, weatherData] = await Promise.all([\n        this.eonetService.getWeatherEvents({ days: this.config.defaultDayRange }),\n        this.eonetService.getNearbyEvents(lat, lon, 500), // 500km radius\n        this.powerService.getWeatherData(\n          lat,\n          lon,\n          this.formatDate(startDate),\n          this.formatDate(endDate)\n        )\n      ]);\n\n      // Process historical weather data\n      const processedWeatherData = weatherData ? processHistoricalData(weatherData) : null;\n\n      // Merge all data sources\n      const mergedData = {\n        storms: stormData,\n        nearbyEvents: nearbyEvents,\n        location: { lat, lon },\n        date: targetDate,\n        summary: this.generateWeatherSummary(nearbyEvents),\n        weather: processedWeatherData,\n        current: weatherData ? weatherData.find(d => d.date === this.formatDate(targetDate)) : null\n      };\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      \n      console.log('Weather analysis completed successfully');\n      return mergedData;\n\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add days to a date\n   * @param {string|Date} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Format date for API requests (YYYYMMDD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDate(date) {\n    return date.toISOString().split('T')[0].replace(/-/g, '');\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   */\n\n  /**\n   * Generate a weather summary based on nearby events\n   * @param {Array} events - Nearby weather events\n   * @returns {string} Summary text\n   */\n  generateWeatherSummary(events) {\n    if (!events || events.length === 0) {\n      return 'No significant weather events in the area.';\n    }\n\n    const severityCount = events.reduce((acc, event) => {\n      acc[event.severity] = (acc[event.severity] || 0) + 1;\n      return acc;\n    }, {});\n\n    const parts = [];\n    if (severityCount.severe) {\n      parts.push(`${severityCount.severe} severe weather event${severityCount.severe > 1 ? 's' : ''}`);\n    }\n    if (severityCount.moderate) {\n      parts.push(`${severityCount.moderate} moderate event${severityCount.moderate > 1 ? 's' : ''}`);\n    }\n    if (severityCount.mild) {\n      parts.push(`${severityCount.mild} mild event${severityCount.mild > 1 ? 's' : ''}`);\n    }\n\n    return `Found ${events.length} weather events in your area: ${parts.join(', ')}.`;\n  }\n\n  /**\n   * Validate coordinates\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} Whether coordinates are valid\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && \n           lat >= -90 && lat <= 90 && \n           lon >= -180 && lon <= 180;\n  }\n\n  /**\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const { formatForExport } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.spaceWeather = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.disasterTracking = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}