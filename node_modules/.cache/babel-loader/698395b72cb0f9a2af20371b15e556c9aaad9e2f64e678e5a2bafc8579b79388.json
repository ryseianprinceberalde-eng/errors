{"ast":null,"code":"import BaseApiService from './baseApiService';\nimport axios from 'axios';\nclass PowerService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://power.larc.nasa.gov/api/temporal/daily/point';\n  }\n\n  /**\r\n   * Fetch weather data from NASA POWER API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYYMMDD)\r\n   * @param {string} endDate - End date (YYYYMMDD)\r\n   * @returns {Promise<Object>} Weather data\r\n   */\n  async getWeatherData(lat, lon, startDate, endDate) {\n    try {\n      const params = {\n        parameters: 'T2M,PRECTOT,WS2M,RH2M,ALLSKY_SFC_SW_DWN',\n        community: 'RE',\n        longitude: lon,\n        latitude: lat,\n        start: startDate,\n        end: endDate,\n        format: 'JSON'\n      };\n      const response = await axios.get(this.baseUrl, {\n        params,\n        timeout: 30000\n      });\n      return this.processResponse(response.data);\n    } catch (error) {\n      console.error('Error fetching NASA POWER data:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Process the NASA POWER API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\n  processResponse(data) {\n    if (!data || !data.properties || !data.properties.parameter) {\n      return null;\n    }\n    const parameters = data.properties.parameter;\n    const timeKeys = Object.keys(parameters.T2M || {}).filter(key => key !== 'units');\n    return timeKeys.map(date => ({\n      date,\n      temperature: parameters.T2M[date],\n      precipitation: parameters.PRECTOT[date],\n      windSpeed: parameters.WS2M[date],\n      humidity: parameters.RH2M[date],\n      solarRadiation: parameters.ALLSKY_SFC_SW_DWN[date],\n      units: {\n        temperature: parameters.T2M.units,\n        precipitation: parameters.PRECTOT.units,\n        windSpeed: parameters.WS2M.units,\n        humidity: parameters.RH2M.units,\n        solarRadiation: parameters.ALLSKY_SFC_SW_DWN.units\n      }\n    }));\n  }\n\n  /**\r\n   * Format date for NASA POWER API\r\n   * @param {string} date - Date string\r\n   * @returns {string} Formatted date (YYYYMMDD)\r\n   */\n  formatDate(date) {\n    return date.replace(/[-]/g, '');\n  }\n}\nexport default new PowerService();","map":{"version":3,"names":["BaseApiService","axios","PowerService","constructor","baseUrl","getWeatherData","lat","lon","startDate","endDate","params","parameters","community","longitude","latitude","start","end","format","response","get","timeout","processResponse","data","error","console","properties","parameter","timeKeys","Object","keys","T2M","filter","key","map","date","temperature","precipitation","PRECTOT","windSpeed","WS2M","humidity","RH2M","solarRadiation","ALLSKY_SFC_SW_DWN","units","formatDate","replace"],"sources":["C:/xampp/htdocs/errors/src/services/api/powerService.js"],"sourcesContent":["import BaseApiService from './baseApiService';\r\nimport axios from 'axios';\r\n\r\nclass PowerService extends BaseApiService {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = 'https://power.larc.nasa.gov/api/temporal/daily/point';\r\n  }\r\n\r\n  /**\r\n   * Fetch weather data from NASA POWER API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYYMMDD)\r\n   * @param {string} endDate - End date (YYYYMMDD)\r\n   * @returns {Promise<Object>} Weather data\r\n   */\r\n  async getWeatherData(lat, lon, startDate, endDate) {\r\n    try {\r\n      const params = {\r\n        parameters: 'T2M,PRECTOT,WS2M,RH2M,ALLSKY_SFC_SW_DWN',\r\n        community: 'RE',\r\n        longitude: lon,\r\n        latitude: lat,\r\n        start: startDate,\r\n        end: endDate,\r\n        format: 'JSON'\r\n      };\r\n\r\n      const response = await axios.get(this.baseUrl, { \r\n        params,\r\n        timeout: 30000\r\n      });\r\n\r\n      return this.processResponse(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching NASA POWER data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the NASA POWER API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\r\n  processResponse(data) {\r\n    if (!data || !data.properties || !data.properties.parameter) {\r\n      return null;\r\n    }\r\n\r\n    const parameters = data.properties.parameter;\r\n    const timeKeys = Object.keys(parameters.T2M || {})\r\n      .filter(key => key !== 'units');\r\n\r\n    return timeKeys.map(date => ({\r\n      date,\r\n      temperature: parameters.T2M[date],\r\n      precipitation: parameters.PRECTOT[date],\r\n      windSpeed: parameters.WS2M[date],\r\n      humidity: parameters.RH2M[date],\r\n      solarRadiation: parameters.ALLSKY_SFC_SW_DWN[date],\r\n      units: {\r\n        temperature: parameters.T2M.units,\r\n        precipitation: parameters.PRECTOT.units,\r\n        windSpeed: parameters.WS2M.units,\r\n        humidity: parameters.RH2M.units,\r\n        solarRadiation: parameters.ALLSKY_SFC_SW_DWN.units\r\n      }\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Format date for NASA POWER API\r\n   * @param {string} date - Date string\r\n   * @returns {string} Formatted date (YYYYMMDD)\r\n   */\r\n  formatDate(date) {\r\n    return date.replace(/[-]/g, '');\r\n  }\r\n}\r\n\r\nexport default new PowerService();"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,SAASF,cAAc,CAAC;EACxCG,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,OAAO,GAAG,sDAAsD;EACvE;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,cAAcA,CAACC,GAAG,EAAEC,GAAG,EAAEC,SAAS,EAAEC,OAAO,EAAE;IACjD,IAAI;MACF,MAAMC,MAAM,GAAG;QACbC,UAAU,EAAE,yCAAyC;QACrDC,SAAS,EAAE,IAAI;QACfC,SAAS,EAAEN,GAAG;QACdO,QAAQ,EAAER,GAAG;QACbS,KAAK,EAAEP,SAAS;QAChBQ,GAAG,EAAEP,OAAO;QACZQ,MAAM,EAAE;MACV,CAAC;MAED,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAC,IAAI,CAACf,OAAO,EAAE;QAC7CM,MAAM;QACNU,OAAO,EAAE;MACX,CAAC,CAAC;MAEF,OAAO,IAAI,CAACC,eAAe,CAACH,QAAQ,CAACI,IAAI,CAAC;IAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEF,eAAeA,CAACC,IAAI,EAAE;IACpB,IAAI,CAACA,IAAI,IAAI,CAACA,IAAI,CAACG,UAAU,IAAI,CAACH,IAAI,CAACG,UAAU,CAACC,SAAS,EAAE;MAC3D,OAAO,IAAI;IACb;IAEA,MAAMf,UAAU,GAAGW,IAAI,CAACG,UAAU,CAACC,SAAS;IAC5C,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAAClB,UAAU,CAACmB,GAAG,IAAI,CAAC,CAAC,CAAC,CAC/CC,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAK,OAAO,CAAC;IAEjC,OAAOL,QAAQ,CAACM,GAAG,CAACC,IAAI,KAAK;MAC3BA,IAAI;MACJC,WAAW,EAAExB,UAAU,CAACmB,GAAG,CAACI,IAAI,CAAC;MACjCE,aAAa,EAAEzB,UAAU,CAAC0B,OAAO,CAACH,IAAI,CAAC;MACvCI,SAAS,EAAE3B,UAAU,CAAC4B,IAAI,CAACL,IAAI,CAAC;MAChCM,QAAQ,EAAE7B,UAAU,CAAC8B,IAAI,CAACP,IAAI,CAAC;MAC/BQ,cAAc,EAAE/B,UAAU,CAACgC,iBAAiB,CAACT,IAAI,CAAC;MAClDU,KAAK,EAAE;QACLT,WAAW,EAAExB,UAAU,CAACmB,GAAG,CAACc,KAAK;QACjCR,aAAa,EAAEzB,UAAU,CAAC0B,OAAO,CAACO,KAAK;QACvCN,SAAS,EAAE3B,UAAU,CAAC4B,IAAI,CAACK,KAAK;QAChCJ,QAAQ,EAAE7B,UAAU,CAAC8B,IAAI,CAACG,KAAK;QAC/BF,cAAc,EAAE/B,UAAU,CAACgC,iBAAiB,CAACC;MAC/C;IACF,CAAC,CAAC,CAAC;EACL;;EAEA;AACF;AACA;AACA;AACA;EACEC,UAAUA,CAACX,IAAI,EAAE;IACf,OAAOA,IAAI,CAACY,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACjC;AACF;AAEA,eAAe,IAAI5C,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}