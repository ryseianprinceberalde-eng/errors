{"ast":null,"code":"import DisasterTrackingService from './api/disasterTrackingService.js';\nimport EonetService from './api/eonetService.js';\nimport PowerService from './api/powerService.js';\nimport DonkiService from './api/donkiService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.eonetService = EonetService;\n    this.powerService = PowerService;\n    this.donkiService = DonkiService;\n\n    // Service configuration\n    this.config = {\n      enableDisasterTracking: true,\n      enableSpaceWeather: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n\n      // Validate inputs\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Calculate date range for weather data\n      const startDate = this.addDays(targetDate, -this.config.defaultDayRange);\n      const endDate = this.addDays(targetDate, this.config.defaultDayRange);\n\n      // Ensure targetDate is a Date object\n      const targetDateObj = new Date(targetDate);\n      if (isNaN(targetDateObj.getTime())) {\n        throw new Error('Invalid date provided');\n      }\n\n      // Calculate date range for weather data\n      const startDateObj = new Date(targetDateObj);\n      const endDateObj = new Date(targetDateObj);\n      startDateObj.setDate(startDateObj.getDate() - this.config.defaultDayRange);\n      endDateObj.setDate(endDateObj.getDate() + this.config.defaultDayRange);\n\n      // Format dates for different APIs\n      const formattedStartDate = this.formatDateWithDashes(startDateObj);\n      const formattedEndDate = this.formatDateWithDashes(endDateObj);\n      const powerStartDate = this.formatDate(startDateObj);\n      const powerEndDate = this.formatDate(endDateObj);\n      console.log('Fetching data for date range:', formattedStartDate, 'to', formattedEndDate);\n\n      // Fetch data from all sources in parallel\n      const [stormData, nearbyEvents, weatherData, spaceWeatherData] = await Promise.all([this.eonetService.getWeatherEvents({\n        days: this.config.defaultDayRange,\n        status: 'all'\n      }).catch(err => {\n        console.warn('EONET fetch failed:', err);\n        return [];\n      }), this.eonetService.getNearbyEvents(lat, lon, 500).catch(err => {\n        console.warn('Nearby events fetch failed:', err);\n        return [];\n      }), this.powerService.getWeatherData(lat, lon, powerStartDate, powerEndDate).catch(err => {\n        console.warn('NASA POWER fetch failed:', err);\n        return null;\n      }), this.config.enableSpaceWeather ? this.donkiService.getSpaceWeatherData(formattedStartDate, formattedEndDate).catch(err => {\n        console.warn('DONKI fetch failed:', err);\n        return null;\n      }) : null]);\n\n      // Process and validate weather data\n      let processedWeatherData = null;\n      let currentWeather = null;\n      if (weatherData && Array.isArray(weatherData)) {\n        try {\n          processedWeatherData = processHistoricalData(weatherData);\n          const targetDateFormatted = this.formatDate(targetDateObj);\n          currentWeather = weatherData.find(d => d.date === targetDateFormatted) || null;\n        } catch (err) {\n          console.warn('Error processing weather data:', err);\n        }\n      }\n\n      // Ensure all data is properly structured\n      const mergedData = {\n        storms: Array.isArray(stormData) ? stormData : [],\n        nearbyEvents: Array.isArray(nearbyEvents) ? nearbyEvents : [],\n        location: {\n          lat: Number(lat).toFixed(4),\n          lon: Number(lon).toFixed(4)\n        },\n        date: this.formatDateWithDashes(targetDateObj),\n        summary: this.generateWeatherSummary(Array.isArray(nearbyEvents) ? nearbyEvents : [], spaceWeatherData),\n        weather: {\n          historical: processedWeatherData,\n          current: currentWeather,\n          isValid: !!processedWeatherData\n        },\n        spaceWeather: spaceWeatherData || {\n          events: {},\n          summary: {\n            activityLevel: 'Unknown',\n            eventCounts: {},\n            impacts: {}\n          },\n          warnings: []\n        }\n      };\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      console.log('Weather analysis completed successfully');\n      return mergedData;\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add days to a date\n   * @param {string|Date} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Format date for API requests (YYYYMMDD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDate(date) {\n    return date.toISOString().split('T')[0].replace(/-/g, '');\n  }\n\n  /**\n   * Format date with dashes (YYYY-MM-DD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDateWithDashes(date) {\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   */\n\n  /**\n   * Generate a weather summary based on nearby events\n   * @param {Array} events - Nearby weather events\n   * @returns {string} Summary text\n   */\n  generateWeatherSummary(nearbyEvents, spaceWeatherData) {\n    const summaryParts = [];\n\n    // Ground weather events summary\n    if (nearbyEvents && nearbyEvents.length > 0) {\n      const severityCount = nearbyEvents.reduce((acc, event) => {\n        acc[event.severity] = (acc[event.severity] || 0) + 1;\n        return acc;\n      }, {});\n      const parts = [];\n      if (severityCount.severe) {\n        parts.push(`${severityCount.severe} severe weather event${severityCount.severe > 1 ? 's' : ''}`);\n      }\n      if (severityCount.moderate) {\n        parts.push(`${severityCount.moderate} moderate event${severityCount.moderate > 1 ? 's' : ''}`);\n      }\n      if (severityCount.mild) {\n        parts.push(`${severityCount.mild} mild event${severityCount.mild > 1 ? 's' : ''}`);\n      }\n      summaryParts.push(`Found ${nearbyEvents.length} weather events in your area: ${parts.join(', ')}`);\n    } else {\n      summaryParts.push('No significant weather events in your area');\n    }\n\n    // Space weather summary\n    if (spaceWeatherData) {\n      if (spaceWeatherData.summary.activityLevel !== 'Quiet') {\n        summaryParts.push(`Space weather activity: ${spaceWeatherData.summary.activityLevel}`);\n        if (spaceWeatherData.warnings && spaceWeatherData.warnings.length > 0) {\n          summaryParts.push(`Space weather warnings: ${spaceWeatherData.warnings.join('; ')}`);\n        }\n        const impacts = Object.entries(spaceWeatherData.summary.impacts).filter(([_, isImpacted]) => isImpacted).map(([system]) => system);\n        if (impacts.length > 0) {\n          summaryParts.push(`Potential impacts on: ${impacts.join(', ')}`);\n        }\n      } else {\n        summaryParts.push('Space weather conditions are quiet');\n      }\n    }\n    return summaryParts.join('. ') + '.';\n  }\n\n  /**\n   * Validate coordinates\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} Whether coordinates are valid\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n\n  /**\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const {\n      formatForExport\n    } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.spaceWeather = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.disasterTracking = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;","map":{"version":3,"names":["DisasterTrackingService","EonetService","PowerService","DonkiService","processHistoricalData","mergeDataSources","validateDataIntegrity","WeatherService","constructor","disasterTrackingService","eonetService","powerService","donkiService","config","enableDisasterTracking","enableSpaceWeather","defaultDayRange","maxRetries","getWeatherAnalysis","lat","lon","targetDate","console","log","isValidCoordinates","Error","startDate","addDays","endDate","targetDateObj","Date","isNaN","getTime","startDateObj","endDateObj","setDate","getDate","formattedStartDate","formatDateWithDashes","formattedEndDate","powerStartDate","formatDate","powerEndDate","stormData","nearbyEvents","weatherData","spaceWeatherData","Promise","all","getWeatherEvents","days","status","catch","err","warn","getNearbyEvents","getWeatherData","getSpaceWeatherData","processedWeatherData","currentWeather","Array","isArray","targetDateFormatted","find","d","date","mergedData","storms","location","Number","toFixed","summary","generateWeatherSummary","weather","historical","current","isValid","spaceWeather","events","activityLevel","eventCounts","impacts","warnings","validation","errors","error","result","toISOString","split","replace","getDisasterEvents","fetchDisasterEvents","summaryParts","length","severityCount","reduce","acc","event","severity","parts","severe","push","moderate","mild","join","Object","entries","filter","_","isImpacted","map","system","dayRange","spaceWeatherService","generateDefaultSpaceWeatherData","fetchSpaceWeatherData","filterDisasterEvents","filters","filteredEvents","category","filterByCategory","filterBySeverity","getDisasterStatistics","getEventStatistics","getDisasterEventIcon","categoryId","getEventIcon","exportData","data","format","formatForExport","require","getServiceStatus","services","meteomatics","meteomaticsService","getApiStatus","service","enabled","apiKey","disasterTracking","baseUrl","configuration","lastUpdated","updateConfiguration","newConfig","healthCheck","health","overall","timestamp","validateCredentials","message","testEvents","weatherService"],"sources":["C:/xampp/htdocs/errors/src/services/weatherService.js"],"sourcesContent":["import DisasterTrackingService from './api/disasterTrackingService.js';\nimport EonetService from './api/eonetService.js';\nimport PowerService from './api/powerService.js';\nimport DonkiService from './api/donkiService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.eonetService = EonetService;\n    this.powerService = PowerService;\n    this.donkiService = DonkiService;\n    \n    // Service configuration\n    this.config = {\n      enableDisasterTracking: true,\n      enableSpaceWeather: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n      \n      // Validate inputs\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Calculate date range for weather data\n      const startDate = this.addDays(targetDate, -this.config.defaultDayRange);\n      const endDate = this.addDays(targetDate, this.config.defaultDayRange);\n\n      // Ensure targetDate is a Date object\n      const targetDateObj = new Date(targetDate);\n      if (isNaN(targetDateObj.getTime())) {\n        throw new Error('Invalid date provided');\n      }\n\n      // Calculate date range for weather data\n      const startDateObj = new Date(targetDateObj);\n      const endDateObj = new Date(targetDateObj);\n      startDateObj.setDate(startDateObj.getDate() - this.config.defaultDayRange);\n      endDateObj.setDate(endDateObj.getDate() + this.config.defaultDayRange);\n\n      // Format dates for different APIs\n      const formattedStartDate = this.formatDateWithDashes(startDateObj);\n      const formattedEndDate = this.formatDateWithDashes(endDateObj);\n      const powerStartDate = this.formatDate(startDateObj);\n      const powerEndDate = this.formatDate(endDateObj);\n\n      console.log('Fetching data for date range:', formattedStartDate, 'to', formattedEndDate);\n\n      // Fetch data from all sources in parallel\n      const [stormData, nearbyEvents, weatherData, spaceWeatherData] = await Promise.all([\n        this.eonetService.getWeatherEvents({ \n          days: this.config.defaultDayRange,\n          status: 'all' \n        }).catch(err => {\n          console.warn('EONET fetch failed:', err);\n          return [];\n        }),\n        this.eonetService.getNearbyEvents(lat, lon, 500).catch(err => {\n          console.warn('Nearby events fetch failed:', err);\n          return [];\n        }),\n        this.powerService.getWeatherData(\n          lat,\n          lon,\n          powerStartDate,\n          powerEndDate\n        ).catch(err => {\n          console.warn('NASA POWER fetch failed:', err);\n          return null;\n        }),\n        this.config.enableSpaceWeather\n          ? this.donkiService.getSpaceWeatherData(formattedStartDate, formattedEndDate)\n              .catch(err => {\n                console.warn('DONKI fetch failed:', err);\n                return null;\n              })\n          : null\n      ]);\n\n      // Process and validate weather data\n      let processedWeatherData = null;\n      let currentWeather = null;\n\n      if (weatherData && Array.isArray(weatherData)) {\n        try {\n          processedWeatherData = processHistoricalData(weatherData);\n          const targetDateFormatted = this.formatDate(targetDateObj);\n          currentWeather = weatherData.find(d => d.date === targetDateFormatted) || null;\n        } catch (err) {\n          console.warn('Error processing weather data:', err);\n        }\n      }\n\n      // Ensure all data is properly structured\n      const mergedData = {\n        storms: Array.isArray(stormData) ? stormData : [],\n        nearbyEvents: Array.isArray(nearbyEvents) ? nearbyEvents : [],\n        location: { \n          lat: Number(lat).toFixed(4),\n          lon: Number(lon).toFixed(4)\n        },\n        date: this.formatDateWithDashes(targetDateObj),\n        summary: this.generateWeatherSummary(\n          Array.isArray(nearbyEvents) ? nearbyEvents : [],\n          spaceWeatherData\n        ),\n        weather: {\n          historical: processedWeatherData,\n          current: currentWeather,\n          isValid: !!processedWeatherData\n        },\n        spaceWeather: spaceWeatherData || {\n          events: {},\n          summary: {\n            activityLevel: 'Unknown',\n            eventCounts: {},\n            impacts: {}\n          },\n          warnings: []\n        }\n      };\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      \n      console.log('Weather analysis completed successfully');\n      return mergedData;\n\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Add days to a date\n   * @param {string|Date} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Format date for API requests (YYYYMMDD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDate(date) {\n    return date.toISOString().split('T')[0].replace(/-/g, '');\n  }\n\n  /**\n   * Format date with dashes (YYYY-MM-DD)\n   * @param {Date} date - Date to format\n   * @returns {string} Formatted date\n   */\n  formatDateWithDashes(date) {\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   */\n\n  /**\n   * Generate a weather summary based on nearby events\n   * @param {Array} events - Nearby weather events\n   * @returns {string} Summary text\n   */\n  generateWeatherSummary(nearbyEvents, spaceWeatherData) {\n    const summaryParts = [];\n\n    // Ground weather events summary\n    if (nearbyEvents && nearbyEvents.length > 0) {\n      const severityCount = nearbyEvents.reduce((acc, event) => {\n        acc[event.severity] = (acc[event.severity] || 0) + 1;\n        return acc;\n      }, {});\n\n      const parts = [];\n      if (severityCount.severe) {\n        parts.push(`${severityCount.severe} severe weather event${severityCount.severe > 1 ? 's' : ''}`);\n      }\n      if (severityCount.moderate) {\n        parts.push(`${severityCount.moderate} moderate event${severityCount.moderate > 1 ? 's' : ''}`);\n      }\n      if (severityCount.mild) {\n        parts.push(`${severityCount.mild} mild event${severityCount.mild > 1 ? 's' : ''}`);\n      }\n\n      summaryParts.push(`Found ${nearbyEvents.length} weather events in your area: ${parts.join(', ')}`);\n    } else {\n      summaryParts.push('No significant weather events in your area');\n    }\n\n    // Space weather summary\n    if (spaceWeatherData) {\n      if (spaceWeatherData.summary.activityLevel !== 'Quiet') {\n        summaryParts.push(`Space weather activity: ${spaceWeatherData.summary.activityLevel}`);\n        \n        if (spaceWeatherData.warnings && spaceWeatherData.warnings.length > 0) {\n          summaryParts.push(`Space weather warnings: ${spaceWeatherData.warnings.join('; ')}`);\n        }\n\n        const impacts = Object.entries(spaceWeatherData.summary.impacts)\n          .filter(([_, isImpacted]) => isImpacted)\n          .map(([system]) => system);\n\n        if (impacts.length > 0) {\n          summaryParts.push(`Potential impacts on: ${impacts.join(', ')}`);\n        }\n      } else {\n        summaryParts.push('Space weather conditions are quiet');\n      }\n    }\n\n    return summaryParts.join('. ') + '.';\n  }\n\n  /**\n   * Validate coordinates\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} Whether coordinates are valid\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && \n           lat >= -90 && lat <= 90 && \n           lon >= -180 && lon <= 180;\n  }\n\n  /**\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const { formatForExport } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.spaceWeather = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.disasterTracking = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}