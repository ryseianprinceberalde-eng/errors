{"ast":null,"code":"import BaseApiService from './baseApiService';\nimport axios from 'axios';\n\n/**\r\n * Service for interacting with NASA's GES DISC Giovanni API\r\n * Provides access to satellite-based weather and climate data\r\n */\nclass GiovanniService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://giovanni.gsfc.nasa.gov/giovanni/daac-bin';\n    this.dataVersion = '4';\n  }\n\n  /**\r\n   * Fetch weather data from Giovanni API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYY-MM-DD)\r\n   * @param {string} endDate - End date (YYYY-MM-DD)\r\n   * @param {Object} options - Additional options for the request\r\n   * @returns {Promise<Object>} Weather data\r\n   */\n  async getWeatherData(lat, lon, startDate, endDate, options = {}) {\n    try {\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n      const params = {\n        service: 'TmAvMp',\n        starttime: startDate,\n        endtime: endDate,\n        bbox: this.getBoundingBox(lat, lon),\n        data: options.variables || ['TRMM_3B42_Daily_7_precipitation', 'AIRS3STD_7_RelativeHumidity_500hPa', 'AIRX3STD_7_Temperature_850hPa'].join(','),\n        portal: 'GIOVANNI',\n        format: 'json'\n      };\n      const response = await axios.get(`${this.baseUrl}/giovanni-${this.dataVersion}`, {\n        params,\n        timeout: 30000\n      });\n      return this.processResponse(response.data);\n    } catch (error) {\n      console.error('Error fetching Giovanni data:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Process the Giovanni API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\n  processResponse(data) {\n    try {\n      if (!data || !data.data) {\n        console.warn('Invalid Giovanni response structure');\n        return null;\n      }\n      return {\n        precipitation: this.extractVariable(data, 'TRMM_3B42_Daily_7_precipitation'),\n        humidity: this.extractVariable(data, 'AIRS3STD_7_RelativeHumidity_500hPa'),\n        temperature: this.extractVariable(data, 'AIRX3STD_7_Temperature_850hPa'),\n        metadata: {\n          source: 'NASA GES DISC Giovanni',\n          timestamp: new Date().toISOString(),\n          units: {\n            precipitation: 'mm/day',\n            humidity: '%',\n            temperature: 'K'\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error processing Giovanni response:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Extract a variable from the response data\r\n   * @param {Object} data - Response data\r\n   * @param {string} variableName - Name of the variable to extract\r\n   * @returns {Object} Variable data and metadata\r\n   */\n  extractVariable(data, variableName) {\n    const variable = data.data.find(v => v.id === variableName);\n    if (!variable) return null;\n    return {\n      value: variable.value,\n      unit: variable.units,\n      timestamp: variable.time\n    };\n  }\n\n  /**\r\n   * Generate a bounding box string for the API request\r\n   * @param {number} lat - Center latitude\r\n   * @param {number} lon - Center longitude\r\n   * @param {number} size - Box size in degrees\r\n   * @returns {string} Bounding box string\r\n   */\n  getBoundingBox(lat, lon, size = 0.5) {\n    const halfSize = size / 2;\n    const west = Math.max(-180, lon - halfSize);\n    const south = Math.max(-90, lat - halfSize);\n    const east = Math.min(180, lon + halfSize);\n    const north = Math.min(90, lat + halfSize);\n    return `${west},${south},${east},${north}`;\n  }\n\n  /**\r\n   * Validate latitude and longitude values\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @returns {boolean} Whether coordinates are valid\r\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n}\nexport default new GiovanniService();","map":{"version":3,"names":["BaseApiService","axios","GiovanniService","constructor","baseUrl","dataVersion","getWeatherData","lat","lon","startDate","endDate","options","isValidCoordinates","Error","params","service","starttime","endtime","bbox","getBoundingBox","data","variables","join","portal","format","response","get","timeout","processResponse","error","console","warn","precipitation","extractVariable","humidity","temperature","metadata","source","timestamp","Date","toISOString","units","variableName","variable","find","v","id","value","unit","time","size","halfSize","west","Math","max","south","east","min","north","isNaN"],"sources":["C:/xampp/htdocs/errors/src/services/api/giovanniService.js"],"sourcesContent":["import BaseApiService from './baseApiService';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Service for interacting with NASA's GES DISC Giovanni API\r\n * Provides access to satellite-based weather and climate data\r\n */\r\nclass GiovanniService extends BaseApiService {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = 'https://giovanni.gsfc.nasa.gov/giovanni/daac-bin';\r\n    this.dataVersion = '4';\r\n  }\r\n\r\n  /**\r\n   * Fetch weather data from Giovanni API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYY-MM-DD)\r\n   * @param {string} endDate - End date (YYYY-MM-DD)\r\n   * @param {Object} options - Additional options for the request\r\n   * @returns {Promise<Object>} Weather data\r\n   */\r\n  async getWeatherData(lat, lon, startDate, endDate, options = {}) {\r\n    try {\r\n      if (!this.isValidCoordinates(lat, lon)) {\r\n        throw new Error('Invalid coordinates provided');\r\n      }\r\n\r\n      const params = {\r\n        service: 'TmAvMp',\r\n        starttime: startDate,\r\n        endtime: endDate,\r\n        bbox: this.getBoundingBox(lat, lon),\r\n        data: options.variables || [\r\n          'TRMM_3B42_Daily_7_precipitation',\r\n          'AIRS3STD_7_RelativeHumidity_500hPa',\r\n          'AIRX3STD_7_Temperature_850hPa'\r\n        ].join(','),\r\n        portal: 'GIOVANNI',\r\n        format: 'json'\r\n      };\r\n\r\n      const response = await axios.get(`${this.baseUrl}/giovanni-${this.dataVersion}`, {\r\n        params,\r\n        timeout: 30000\r\n      });\r\n\r\n      return this.processResponse(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching Giovanni data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the Giovanni API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\r\n  processResponse(data) {\r\n    try {\r\n      if (!data || !data.data) {\r\n        console.warn('Invalid Giovanni response structure');\r\n        return null;\r\n      }\r\n\r\n      return {\r\n        precipitation: this.extractVariable(data, 'TRMM_3B42_Daily_7_precipitation'),\r\n        humidity: this.extractVariable(data, 'AIRS3STD_7_RelativeHumidity_500hPa'),\r\n        temperature: this.extractVariable(data, 'AIRX3STD_7_Temperature_850hPa'),\r\n        metadata: {\r\n          source: 'NASA GES DISC Giovanni',\r\n          timestamp: new Date().toISOString(),\r\n          units: {\r\n            precipitation: 'mm/day',\r\n            humidity: '%',\r\n            temperature: 'K'\r\n          }\r\n        }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error processing Giovanni response:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract a variable from the response data\r\n   * @param {Object} data - Response data\r\n   * @param {string} variableName - Name of the variable to extract\r\n   * @returns {Object} Variable data and metadata\r\n   */\r\n  extractVariable(data, variableName) {\r\n    const variable = data.data.find(v => v.id === variableName);\r\n    if (!variable) return null;\r\n\r\n    return {\r\n      value: variable.value,\r\n      unit: variable.units,\r\n      timestamp: variable.time\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate a bounding box string for the API request\r\n   * @param {number} lat - Center latitude\r\n   * @param {number} lon - Center longitude\r\n   * @param {number} size - Box size in degrees\r\n   * @returns {string} Bounding box string\r\n   */\r\n  getBoundingBox(lat, lon, size = 0.5) {\r\n    const halfSize = size / 2;\r\n    const west = Math.max(-180, lon - halfSize);\r\n    const south = Math.max(-90, lat - halfSize);\r\n    const east = Math.min(180, lon + halfSize);\r\n    const north = Math.min(90, lat + halfSize);\r\n    return `${west},${south},${east},${north}`;\r\n  }\r\n\r\n  /**\r\n   * Validate latitude and longitude values\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @returns {boolean} Whether coordinates are valid\r\n   */\r\n  isValidCoordinates(lat, lon) {\r\n    return !isNaN(lat) && !isNaN(lon) && \r\n           lat >= -90 && lat <= 90 && \r\n           lon >= -180 && lon <= 180;\r\n  }\r\n}\r\n\r\nexport default new GiovanniService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}