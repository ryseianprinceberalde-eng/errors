{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * NASA EONET Disaster Tracking Service\n * Handles natural disasters, storms, and environmental events\n */\nclass DisasterTrackingService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://eonet.gsfc.nasa.gov/api/v3/events';\n  }\n\n  /**\n   * Fetch natural disaster events from NASA EONET\n   * @param {number} days - Number of days to look back for events\n   * @param {string} status - Event status filter (open, closed, all)\n   * @returns {Promise} Array of processed disaster events\n   */\n  async fetchDisasterEvents(days = 30, status = 'open') {\n    try {\n      console.log('Fetching NASA EONET natural disaster events...');\n      const url = `${this.baseUrl}?days=${days}&status=${status}`;\n      const data = await this.get(url, {\n        timeout: 15000\n      });\n      if (data && data.events) {\n        console.log(`Found ${data.events.length} natural disaster events`);\n        return this.processDisasterEvents(data.events);\n      } else {\n        console.log('No natural disaster events found');\n        return [];\n      }\n    } catch (error) {\n      console.warn('NASA EONET API error:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Process raw EONET event data\n   * @param {Array} events - Raw event data from EONET\n   * @returns {Array} Processed disaster events\n   */\n  processDisasterEvents(events) {\n    return events.map(event => {\n      var _event$categories$, _event$categories$2, _event$categories$3;\n      const latestGeometry = event.geometry[event.geometry.length - 1];\n      const coordinates = latestGeometry.coordinates;\n      return {\n        id: event.id,\n        title: event.title,\n        description: event.description || 'No description available',\n        category: ((_event$categories$ = event.categories[0]) === null || _event$categories$ === void 0 ? void 0 : _event$categories$.title) || 'Unknown',\n        categoryId: ((_event$categories$2 = event.categories[0]) === null || _event$categories$2 === void 0 ? void 0 : _event$categories$2.id) || 'unknown',\n        date: latestGeometry.date,\n        coordinates: {\n          lat: coordinates[1],\n          lon: coordinates[0]\n        },\n        magnitudeValue: latestGeometry.magnitudeValue || null,\n        magnitudeUnit: latestGeometry.magnitudeUnit || null,\n        link: event.link || null,\n        closed: event.closed || null,\n        severity: this.calculateEventSeverity((_event$categories$3 = event.categories[0]) === null || _event$categories$3 === void 0 ? void 0 : _event$categories$3.id, latestGeometry.magnitudeValue)\n      };\n    }).filter(event => this.isValidCoordinates(event.coordinates.lat, event.coordinates.lon));\n  }\n\n  /**\n   * Calculate event severity based on category and magnitude\n   * @param {string} categoryId - Event category identifier\n   * @param {number} magnitude - Event magnitude value\n   * @returns {string} Severity level (low, moderate, high)\n   */\n  calculateEventSeverity(categoryId, magnitude) {\n    const severityMap = {\n      'storms': magnitude ? magnitude > 100 ? 'high' : magnitude > 50 ? 'moderate' : 'low' : 'moderate',\n      'volcanoes': 'high',\n      'wildfires': magnitude ? magnitude > 1000 ? 'high' : magnitude > 100 ? 'moderate' : 'low' : 'moderate',\n      'floods': 'moderate',\n      'drought': 'low',\n      'dustHaze': 'low',\n      'earthquakes': magnitude ? magnitude > 6 ? 'high' : magnitude > 4 ? 'moderate' : 'low' : 'moderate',\n      'landslides': 'moderate',\n      'manmade': 'low',\n      'seaLakeIce': 'low',\n      'severeStorms': 'high',\n      'snow': 'low',\n      'tempExtremes': 'moderate',\n      'waterColor': 'low'\n    };\n    return severityMap[categoryId] || 'low';\n  }\n\n  /**\n   * Get emoji icon for event category\n   * @param {string} categoryId - Event category identifier\n   * @returns {string} Emoji representation of the event\n   */\n  getEventIcon(categoryId) {\n    const iconMap = {\n      'storms': '🌪️',\n      'volcanoes': '🌋',\n      'wildfires': '🔥',\n      'floods': '🌊',\n      'drought': '🏜️',\n      'dustHaze': '🌫️',\n      'earthquakes': '🌍',\n      'landslides': '⛰️',\n      'manmade': '🏭',\n      'seaLakeIce': '🧊',\n      'severeStorms': '⛈️',\n      'snow': '❄️',\n      'tempExtremes': '🌡️',\n      'waterColor': '💧'\n    };\n    return iconMap[categoryId] || '⚠️';\n  }\n\n  /**\n   * Filter events by category\n   * @param {Array} events - Array of disaster events\n   * @param {string} category - Category to filter by\n   * @returns {Array} Filtered events\n   */\n  filterByCategory(events, category) {\n    if (category === 'all') return events;\n    return events.filter(event => event.categoryId === category);\n  }\n\n  /**\n   * Filter events by severity\n   * @param {Array} events - Array of disaster events\n   * @param {string} severity - Severity level to filter by\n   * @returns {Array} Filtered events\n   */\n  filterBySeverity(events, severity) {\n    if (severity === 'all') return events;\n    return events.filter(event => event.severity === severity);\n  }\n\n  /**\n   * Get unique categories from events\n   * @param {Array} events - Array of disaster events\n   * @returns {Array} Unique category IDs\n   */\n  getUniqueCategories(events) {\n    return [...new Set(events.map(event => event.categoryId))];\n  }\n\n  /**\n   * Get event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Statistics object\n   */\n  getEventStatistics(events) {\n    return {\n      total: events.length,\n      high: events.filter(e => e.severity === 'high').length,\n      moderate: events.filter(e => e.severity === 'moderate').length,\n      low: events.filter(e => e.severity === 'low').length,\n      categories: this.getUniqueCategories(events)\n    };\n  }\n}\nexport default DisasterTrackingService;","map":{"version":3,"names":["BaseApiService","DisasterTrackingService","constructor","baseUrl","fetchDisasterEvents","days","status","console","log","url","data","get","timeout","events","length","processDisasterEvents","error","warn","message","map","event","_event$categories$","_event$categories$2","_event$categories$3","latestGeometry","geometry","coordinates","id","title","description","category","categories","categoryId","date","lat","lon","magnitudeValue","magnitudeUnit","link","closed","severity","calculateEventSeverity","filter","isValidCoordinates","magnitude","severityMap","getEventIcon","iconMap","filterByCategory","filterBySeverity","getUniqueCategories","Set","getEventStatistics","total","high","e","moderate","low"],"sources":["C:/xampp/htdocs/errors/src/services/api/disasterTrackingService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * NASA EONET Disaster Tracking Service\n * Handles natural disasters, storms, and environmental events\n */\nclass DisasterTrackingService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://eonet.gsfc.nasa.gov/api/v3/events';\n  }\n\n  /**\n   * Fetch natural disaster events from NASA EONET\n   * @param {number} days - Number of days to look back for events\n   * @param {string} status - Event status filter (open, closed, all)\n   * @returns {Promise} Array of processed disaster events\n   */\n  async fetchDisasterEvents(days = 30, status = 'open') {\n    try {\n      console.log('Fetching NASA EONET natural disaster events...');\n      \n      const url = `${this.baseUrl}?days=${days}&status=${status}`;\n      const data = await this.get(url, { timeout: 15000 });\n\n      if (data && data.events) {\n        console.log(`Found ${data.events.length} natural disaster events`);\n        return this.processDisasterEvents(data.events);\n      } else {\n        console.log('No natural disaster events found');\n        return [];\n      }\n    } catch (error) {\n      console.warn('NASA EONET API error:', error.message);\n      return [];\n    }\n  }\n\n  /**\n   * Process raw EONET event data\n   * @param {Array} events - Raw event data from EONET\n   * @returns {Array} Processed disaster events\n   */\n  processDisasterEvents(events) {\n    return events.map(event => {\n      const latestGeometry = event.geometry[event.geometry.length - 1];\n      const coordinates = latestGeometry.coordinates;\n      \n      return {\n        id: event.id,\n        title: event.title,\n        description: event.description || 'No description available',\n        category: event.categories[0]?.title || 'Unknown',\n        categoryId: event.categories[0]?.id || 'unknown',\n        date: latestGeometry.date,\n        coordinates: {\n          lat: coordinates[1],\n          lon: coordinates[0]\n        },\n        magnitudeValue: latestGeometry.magnitudeValue || null,\n        magnitudeUnit: latestGeometry.magnitudeUnit || null,\n        link: event.link || null,\n        closed: event.closed || null,\n        severity: this.calculateEventSeverity(event.categories[0]?.id, latestGeometry.magnitudeValue)\n      };\n    }).filter(event => this.isValidCoordinates(event.coordinates.lat, event.coordinates.lon));\n  }\n\n  /**\n   * Calculate event severity based on category and magnitude\n   * @param {string} categoryId - Event category identifier\n   * @param {number} magnitude - Event magnitude value\n   * @returns {string} Severity level (low, moderate, high)\n   */\n  calculateEventSeverity(categoryId, magnitude) {\n    const severityMap = {\n      'storms': magnitude ? (magnitude > 100 ? 'high' : magnitude > 50 ? 'moderate' : 'low') : 'moderate',\n      'volcanoes': 'high',\n      'wildfires': magnitude ? (magnitude > 1000 ? 'high' : magnitude > 100 ? 'moderate' : 'low') : 'moderate',\n      'floods': 'moderate',\n      'drought': 'low',\n      'dustHaze': 'low',\n      'earthquakes': magnitude ? (magnitude > 6 ? 'high' : magnitude > 4 ? 'moderate' : 'low') : 'moderate',\n      'landslides': 'moderate',\n      'manmade': 'low',\n      'seaLakeIce': 'low',\n      'severeStorms': 'high',\n      'snow': 'low',\n      'tempExtremes': 'moderate',\n      'waterColor': 'low'\n    };\n\n    return severityMap[categoryId] || 'low';\n  }\n\n  /**\n   * Get emoji icon for event category\n   * @param {string} categoryId - Event category identifier\n   * @returns {string} Emoji representation of the event\n   */\n  getEventIcon(categoryId) {\n    const iconMap = {\n      'storms': '🌪️',\n      'volcanoes': '🌋',\n      'wildfires': '🔥',\n      'floods': '🌊',\n      'drought': '🏜️',\n      'dustHaze': '🌫️',\n      'earthquakes': '🌍',\n      'landslides': '⛰️',\n      'manmade': '🏭',\n      'seaLakeIce': '🧊',\n      'severeStorms': '⛈️',\n      'snow': '❄️',\n      'tempExtremes': '🌡️',\n      'waterColor': '💧'\n    };\n\n    return iconMap[categoryId] || '⚠️';\n  }\n\n  /**\n   * Filter events by category\n   * @param {Array} events - Array of disaster events\n   * @param {string} category - Category to filter by\n   * @returns {Array} Filtered events\n   */\n  filterByCategory(events, category) {\n    if (category === 'all') return events;\n    return events.filter(event => event.categoryId === category);\n  }\n\n  /**\n   * Filter events by severity\n   * @param {Array} events - Array of disaster events\n   * @param {string} severity - Severity level to filter by\n   * @returns {Array} Filtered events\n   */\n  filterBySeverity(events, severity) {\n    if (severity === 'all') return events;\n    return events.filter(event => event.severity === severity);\n  }\n\n  /**\n   * Get unique categories from events\n   * @param {Array} events - Array of disaster events\n   * @returns {Array} Unique category IDs\n   */\n  getUniqueCategories(events) {\n    return [...new Set(events.map(event => event.categoryId))];\n  }\n\n  /**\n   * Get event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Statistics object\n   */\n  getEventStatistics(events) {\n    return {\n      total: events.length,\n      high: events.filter(e => e.severity === 'high').length,\n      moderate: events.filter(e => e.severity === 'moderate').length,\n      low: events.filter(e => e.severity === 'low').length,\n      categories: this.getUniqueCategories(events)\n    };\n  }\n}\n\nexport default DisasterTrackingService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}