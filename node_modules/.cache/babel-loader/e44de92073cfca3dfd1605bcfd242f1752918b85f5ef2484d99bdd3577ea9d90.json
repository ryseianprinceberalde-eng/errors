{"ast":null,"code":"import baseApiService from './baseApiService';\nclass EarthdataService {\n  constructor() {\n    this.baseUrl = 'https://cmr.earthdata.nasa.gov/search';\n    this.baseService = baseApiService;\n  }\n\n  // Search for datasets based on parameters\n  async searchDatasets(params) {\n    try {\n      const response = await this.baseService.get(`${this.baseUrl}/collections.json`, {\n        params: {\n          ...params,\n          page_size: 10,\n          has_granules: true\n        }\n      });\n      return response.data.feed.entry;\n    } catch (error) {\n      console.error('Error searching Earthdata:', error);\n      throw error;\n    }\n  }\n\n  // Get granules (actual data files) for a specific dataset\n  async getGranules(datasetId, params) {\n    try {\n      const response = await this.baseService.get(`${this.baseUrl}/granules.json`, {\n        params: {\n          collection_concept_id: datasetId,\n          ...params,\n          page_size: 20\n        }\n      });\n      return response.data.feed.entry;\n    } catch (error) {\n      console.error('Error fetching granules:', error);\n      throw error;\n    }\n  }\n\n  // Build temporal query parameter\n  formatTemporalQuery(startDate, endDate) {\n    if (!startDate) return null;\n    return endDate ? `${startDate},${endDate}` : `${startDate},`;\n  }\n\n  // Build spatial query parameter\n  formatSpatialQuery(bbox) {\n    if (!bbox) return null;\n    return `${bbox.west},${bbox.south},${bbox.east},${bbox.north}`;\n  }\n\n  // Helper method to build search parameters\n  buildSearchParams(options = {}) {\n    const {\n      keyword,\n      startDate,\n      endDate,\n      bbox,\n      dataCenter,\n      platform,\n      instrument\n    } = options;\n    const params = {};\n    if (keyword) params.keyword = keyword;\n    if (startDate || endDate) params.temporal = this.formatTemporalQuery(startDate, endDate);\n    if (bbox) params.bounding_box = this.formatSpatialQuery(bbox);\n    if (dataCenter) params.provider = dataCenter;\n    if (platform) params.platform = platform;\n    if (instrument) params.instrument = instrument;\n    return params;\n  }\n}\nexport default new EarthdataService();","map":{"version":3,"names":["baseApiService","EarthdataService","constructor","baseUrl","baseService","searchDatasets","params","response","get","page_size","has_granules","data","feed","entry","error","console","getGranules","datasetId","collection_concept_id","formatTemporalQuery","startDate","endDate","formatSpatialQuery","bbox","west","south","east","north","buildSearchParams","options","keyword","dataCenter","platform","instrument","temporal","bounding_box","provider"],"sources":["C:/xampp/htdocs/errors/src/services/api/earthdataService.js"],"sourcesContent":["import baseApiService from './baseApiService';\r\n\r\nclass EarthdataService {\r\n  constructor() {\r\n    this.baseUrl = 'https://cmr.earthdata.nasa.gov/search';\r\n    this.baseService = baseApiService;\r\n  }\r\n\r\n  // Search for datasets based on parameters\r\n  async searchDatasets(params) {\r\n    try {\r\n      const response = await this.baseService.get(`${this.baseUrl}/collections.json`, {\r\n        params: {\r\n          ...params,\r\n          page_size: 10,\r\n          has_granules: true\r\n        }\r\n      });\r\n      return response.data.feed.entry;\r\n    } catch (error) {\r\n      console.error('Error searching Earthdata:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get granules (actual data files) for a specific dataset\r\n  async getGranules(datasetId, params) {\r\n    try {\r\n      const response = await this.baseService.get(`${this.baseUrl}/granules.json`, {\r\n        params: {\r\n          collection_concept_id: datasetId,\r\n          ...params,\r\n          page_size: 20\r\n        }\r\n      });\r\n      return response.data.feed.entry;\r\n    } catch (error) {\r\n      console.error('Error fetching granules:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Build temporal query parameter\r\n  formatTemporalQuery(startDate, endDate) {\r\n    if (!startDate) return null;\r\n    return endDate ? `${startDate},${endDate}` : `${startDate},`;\r\n  }\r\n\r\n  // Build spatial query parameter\r\n  formatSpatialQuery(bbox) {\r\n    if (!bbox) return null;\r\n    return `${bbox.west},${bbox.south},${bbox.east},${bbox.north}`;\r\n  }\r\n\r\n  // Helper method to build search parameters\r\n  buildSearchParams(options = {}) {\r\n    const {\r\n      keyword,\r\n      startDate,\r\n      endDate,\r\n      bbox,\r\n      dataCenter,\r\n      platform,\r\n      instrument\r\n    } = options;\r\n\r\n    const params = {};\r\n\r\n    if (keyword) params.keyword = keyword;\r\n    if (startDate || endDate) params.temporal = this.formatTemporalQuery(startDate, endDate);\r\n    if (bbox) params.bounding_box = this.formatSpatialQuery(bbox);\r\n    if (dataCenter) params.provider = dataCenter;\r\n    if (platform) params.platform = platform;\r\n    if (instrument) params.instrument = instrument;\r\n\r\n    return params;\r\n  }\r\n}\r\n\r\nexport default new EarthdataService();"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAE7C,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAG,uCAAuC;IACtD,IAAI,CAACC,WAAW,GAAGJ,cAAc;EACnC;;EAEA;EACA,MAAMK,cAAcA,CAACC,MAAM,EAAE;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAACI,GAAG,CAAC,GAAG,IAAI,CAACL,OAAO,mBAAmB,EAAE;QAC9EG,MAAM,EAAE;UACN,GAAGA,MAAM;UACTG,SAAS,EAAE,EAAE;UACbC,YAAY,EAAE;QAChB;MACF,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,WAAWA,CAACC,SAAS,EAAEX,MAAM,EAAE;IACnC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACH,WAAW,CAACI,GAAG,CAAC,GAAG,IAAI,CAACL,OAAO,gBAAgB,EAAE;QAC3EG,MAAM,EAAE;UACNY,qBAAqB,EAAED,SAAS;UAChC,GAAGX,MAAM;UACTG,SAAS,EAAE;QACb;MACF,CAAC,CAAC;MACF,OAAOF,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,KAAK;IACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF;;EAEA;EACAK,mBAAmBA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACtC,IAAI,CAACD,SAAS,EAAE,OAAO,IAAI;IAC3B,OAAOC,OAAO,GAAG,GAAGD,SAAS,IAAIC,OAAO,EAAE,GAAG,GAAGD,SAAS,GAAG;EAC9D;;EAEA;EACAE,kBAAkBA,CAACC,IAAI,EAAE;IACvB,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;IACtB,OAAO,GAAGA,IAAI,CAACC,IAAI,IAAID,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,IAAI,IAAIH,IAAI,CAACI,KAAK,EAAE;EAChE;;EAEA;EACAC,iBAAiBA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9B,MAAM;MACJC,OAAO;MACPV,SAAS;MACTC,OAAO;MACPE,IAAI;MACJQ,UAAU;MACVC,QAAQ;MACRC;IACF,CAAC,GAAGJ,OAAO;IAEX,MAAMvB,MAAM,GAAG,CAAC,CAAC;IAEjB,IAAIwB,OAAO,EAAExB,MAAM,CAACwB,OAAO,GAAGA,OAAO;IACrC,IAAIV,SAAS,IAAIC,OAAO,EAAEf,MAAM,CAAC4B,QAAQ,GAAG,IAAI,CAACf,mBAAmB,CAACC,SAAS,EAAEC,OAAO,CAAC;IACxF,IAAIE,IAAI,EAAEjB,MAAM,CAAC6B,YAAY,GAAG,IAAI,CAACb,kBAAkB,CAACC,IAAI,CAAC;IAC7D,IAAIQ,UAAU,EAAEzB,MAAM,CAAC8B,QAAQ,GAAGL,UAAU;IAC5C,IAAIC,QAAQ,EAAE1B,MAAM,CAAC0B,QAAQ,GAAGA,QAAQ;IACxC,IAAIC,UAAU,EAAE3B,MAAM,CAAC2B,UAAU,GAAGA,UAAU;IAE9C,OAAO3B,MAAM;EACf;AACF;AAEA,eAAe,IAAIL,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}