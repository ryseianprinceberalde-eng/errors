{"ast":null,"code":"import BaseApiService from './baseApiService';\nimport axios from 'axios';\nclass EonetService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://eonet.gsfc.nasa.gov/api/v3';\n  }\n\n  /**\r\n   * Fetch severe storms and weather events from NASA EONET\r\n   * @param {Object} options - Query options\r\n   * @returns {Promise<Array>} Array of weather events\r\n   */\n  async getWeatherEvents(options = {}) {\n    try {\n      const {\n        status = 'open',\n        category = 'severeStorms',\n        days = 30,\n        limit = 20\n      } = options;\n      const params = {\n        status,\n        category,\n        days,\n        limit\n      };\n      const response = await axios.get(`${this.baseUrl}/events`, {\n        params\n      });\n      return this.processEvents(response.data.events);\n    } catch (error) {\n      console.error('Error fetching EONET events:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Get events near a specific location\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {number} radiusKm - Search radius in kilometers\r\n   * @returns {Promise<Array>} Array of nearby weather events\r\n   */\n  async getNearbyEvents(lat, lon, radiusKm = 500) {\n    try {\n      const events = await this.getWeatherEvents();\n      return this.filterEventsByDistance(events, lat, lon, radiusKm);\n    } catch (error) {\n      console.error('Error fetching nearby events:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Process raw EONET events into a standardized format\r\n   * @param {Array} events - Raw EONET events\r\n   * @returns {Array} Processed events\r\n   */\n  processEvents(events) {\n    return events.map(event => ({\n      id: event.id,\n      title: event.title,\n      description: event.description,\n      category: event.categories[0].title,\n      severity: this.calculateSeverity(event),\n      coordinates: this.getEventCoordinates(event),\n      date: event.geometry[event.geometry.length - 1].date,\n      closed: event.closed,\n      sources: event.sources,\n      link: event.link\n    }));\n  }\n\n  /**\r\n   * Calculate event severity based on duration and magnitude\r\n   * @param {Object} event - EONET event\r\n   * @returns {string} Severity level\r\n   */\n  calculateSeverity(event) {\n    const duration = this.getEventDuration(event);\n    if (duration > 7) return 'severe';\n    if (duration > 3) return 'moderate';\n    return 'mild';\n  }\n\n  /**\r\n   * Get event duration in days\r\n   * @param {Object} event - EONET event\r\n   * @returns {number} Duration in days\r\n   */\n  getEventDuration(event) {\n    if (!event.geometry || event.geometry.length < 2) return 0;\n    const start = new Date(event.geometry[0].date);\n    const end = new Date(event.geometry[event.geometry.length - 1].date);\n    return Math.floor((end - start) / (1000 * 60 * 60 * 24));\n  }\n\n  /**\r\n   * Get event coordinates from the most recent geometry\r\n   * @param {Object} event - EONET event\r\n   * @returns {Object} Coordinates {lat, lon}\r\n   */\n  getEventCoordinates(event) {\n    if (!event.geometry || !event.geometry.length) return null;\n    const latest = event.geometry[event.geometry.length - 1];\n    return {\n      lat: latest.coordinates[1],\n      lon: latest.coordinates[0]\n    };\n  }\n\n  /**\r\n   * Filter events by distance from a point\r\n   * @param {Array} events - Array of events\r\n   * @param {number} lat - Center latitude\r\n   * @param {number} lon - Center longitude\r\n   * @param {number} radiusKm - Search radius in kilometers\r\n   * @returns {Array} Filtered events\r\n   */\n  filterEventsByDistance(events, lat, lon, radiusKm) {\n    return events.filter(event => {\n      if (!event.coordinates) return false;\n      const distance = this.calculateDistance(lat, lon, event.coordinates.lat, event.coordinates.lon);\n      return distance <= radiusKm;\n    });\n  }\n\n  /**\r\n   * Calculate distance between two points in kilometers\r\n   * @param {number} lat1 - First latitude\r\n   * @param {number} lon1 - First longitude\r\n   * @param {number} lat2 - Second latitude\r\n   * @param {number} lon2 - Second longitude\r\n   * @returns {number} Distance in kilometers\r\n   */\n  calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = this.toRad(lat2 - lat1);\n    const dLon = this.toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return R * c;\n  }\n\n  /**\r\n   * Convert degrees to radians\r\n   * @param {number} degrees - Angle in degrees\r\n   * @returns {number} Angle in radians\r\n   */\n  toRad(degrees) {\n    return degrees * Math.PI / 180;\n  }\n}\nexport default new EonetService();","map":{"version":3,"names":["BaseApiService","axios","EonetService","constructor","baseUrl","getWeatherEvents","options","status","category","days","limit","params","response","get","processEvents","data","events","error","console","getNearbyEvents","lat","lon","radiusKm","filterEventsByDistance","map","event","id","title","description","categories","severity","calculateSeverity","coordinates","getEventCoordinates","date","geometry","length","closed","sources","link","duration","getEventDuration","start","Date","end","Math","floor","latest","filter","distance","calculateDistance","lat1","lon1","lat2","lon2","R","dLat","toRad","dLon","a","sin","cos","c","atan2","sqrt","degrees","PI"],"sources":["C:/xampp/htdocs/errors/src/services/api/eonetService.js"],"sourcesContent":["import BaseApiService from './baseApiService';\r\nimport axios from 'axios';\r\n\r\nclass EonetService extends BaseApiService {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = 'https://eonet.gsfc.nasa.gov/api/v3';\r\n  }\r\n\r\n  /**\r\n   * Fetch severe storms and weather events from NASA EONET\r\n   * @param {Object} options - Query options\r\n   * @returns {Promise<Array>} Array of weather events\r\n   */\r\n  async getWeatherEvents(options = {}) {\r\n    try {\r\n      const { \r\n        status = 'open',\r\n        category = 'severeStorms',\r\n        days = 30,\r\n        limit = 20\r\n      } = options;\r\n\r\n      const params = {\r\n        status,\r\n        category,\r\n        days,\r\n        limit\r\n      };\r\n\r\n      const response = await axios.get(`${this.baseUrl}/events`, { params });\r\n      return this.processEvents(response.data.events);\r\n    } catch (error) {\r\n      console.error('Error fetching EONET events:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get events near a specific location\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {number} radiusKm - Search radius in kilometers\r\n   * @returns {Promise<Array>} Array of nearby weather events\r\n   */\r\n  async getNearbyEvents(lat, lon, radiusKm = 500) {\r\n    try {\r\n      const events = await this.getWeatherEvents();\r\n      return this.filterEventsByDistance(events, lat, lon, radiusKm);\r\n    } catch (error) {\r\n      console.error('Error fetching nearby events:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process raw EONET events into a standardized format\r\n   * @param {Array} events - Raw EONET events\r\n   * @returns {Array} Processed events\r\n   */\r\n  processEvents(events) {\r\n    return events.map(event => ({\r\n      id: event.id,\r\n      title: event.title,\r\n      description: event.description,\r\n      category: event.categories[0].title,\r\n      severity: this.calculateSeverity(event),\r\n      coordinates: this.getEventCoordinates(event),\r\n      date: event.geometry[event.geometry.length - 1].date,\r\n      closed: event.closed,\r\n      sources: event.sources,\r\n      link: event.link\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Calculate event severity based on duration and magnitude\r\n   * @param {Object} event - EONET event\r\n   * @returns {string} Severity level\r\n   */\r\n  calculateSeverity(event) {\r\n    const duration = this.getEventDuration(event);\r\n    if (duration > 7) return 'severe';\r\n    if (duration > 3) return 'moderate';\r\n    return 'mild';\r\n  }\r\n\r\n  /**\r\n   * Get event duration in days\r\n   * @param {Object} event - EONET event\r\n   * @returns {number} Duration in days\r\n   */\r\n  getEventDuration(event) {\r\n    if (!event.geometry || event.geometry.length < 2) return 0;\r\n    const start = new Date(event.geometry[0].date);\r\n    const end = new Date(event.geometry[event.geometry.length - 1].date);\r\n    return Math.floor((end - start) / (1000 * 60 * 60 * 24));\r\n  }\r\n\r\n  /**\r\n   * Get event coordinates from the most recent geometry\r\n   * @param {Object} event - EONET event\r\n   * @returns {Object} Coordinates {lat, lon}\r\n   */\r\n  getEventCoordinates(event) {\r\n    if (!event.geometry || !event.geometry.length) return null;\r\n    const latest = event.geometry[event.geometry.length - 1];\r\n    return {\r\n      lat: latest.coordinates[1],\r\n      lon: latest.coordinates[0]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Filter events by distance from a point\r\n   * @param {Array} events - Array of events\r\n   * @param {number} lat - Center latitude\r\n   * @param {number} lon - Center longitude\r\n   * @param {number} radiusKm - Search radius in kilometers\r\n   * @returns {Array} Filtered events\r\n   */\r\n  filterEventsByDistance(events, lat, lon, radiusKm) {\r\n    return events.filter(event => {\r\n      if (!event.coordinates) return false;\r\n      const distance = this.calculateDistance(\r\n        lat,\r\n        lon,\r\n        event.coordinates.lat,\r\n        event.coordinates.lon\r\n      );\r\n      return distance <= radiusKm;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate distance between two points in kilometers\r\n   * @param {number} lat1 - First latitude\r\n   * @param {number} lon1 - First longitude\r\n   * @param {number} lat2 - Second latitude\r\n   * @param {number} lon2 - Second longitude\r\n   * @returns {number} Distance in kilometers\r\n   */\r\n  calculateDistance(lat1, lon1, lat2, lon2) {\r\n    const R = 6371; // Earth's radius in kilometers\r\n    const dLat = this.toRad(lat2 - lat1);\r\n    const dLon = this.toRad(lon2 - lon1);\r\n    const a = \r\n      Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n      Math.cos(this.toRad(lat1)) * Math.cos(this.toRad(lat2)) * \r\n      Math.sin(dLon/2) * Math.sin(dLon/2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    return R * c;\r\n  }\r\n\r\n  /**\r\n   * Convert degrees to radians\r\n   * @param {number} degrees - Angle in degrees\r\n   * @returns {number} Angle in radians\r\n   */\r\n  toRad(degrees) {\r\n    return degrees * Math.PI / 180;\r\n  }\r\n}\r\n\r\nexport default new EonetService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}