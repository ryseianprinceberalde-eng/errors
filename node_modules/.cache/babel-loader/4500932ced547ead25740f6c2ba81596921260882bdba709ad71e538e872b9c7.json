{"ast":null,"code":"import BaseApiService from './baseApiService';\nimport axios from 'axios';\nclass PowerService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://power.larc.nasa.gov/api/temporal/daily/point';\n  }\n\n  /**\r\n   * Fetch weather data from NASA POWER API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYYMMDD)\r\n   * @param {string} endDate - End date (YYYYMMDD)\r\n   * @returns {Promise<Object>} Weather data\r\n   */\n  async getWeatherData(lat, lon, startDate, endDate) {\n    try {\n      // Validate inputs\n      if (!this.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n      if (!startDate || !endDate) {\n        throw new Error('Start and end dates are required');\n      }\n\n      // Convert dates to required format (YYYYMMDD)\n      const formattedStartDate = this.formatDateToString(startDate);\n      const formattedEndDate = this.formatDateToString(endDate);\n      const params = {\n        parameters: 'T2M,PRECTOT,WS2M,RH2M,ALLSKY_SFC_SW_DWN',\n        community: 'RE',\n        longitude: lon,\n        latitude: lat,\n        start: formattedStartDate,\n        end: formattedEndDate,\n        format: 'JSON'\n      };\n      const response = await axios.get(this.baseUrl, {\n        params,\n        timeout: 30000\n      });\n      return this.processResponse(response.data);\n    } catch (error) {\n      console.error('Error fetching NASA POWER data:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Process the NASA POWER API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\n  processResponse(data) {\n    try {\n      var _data$properties;\n      // Validate response structure\n      if (!(data !== null && data !== void 0 && (_data$properties = data.properties) !== null && _data$properties !== void 0 && _data$properties.parameter)) {\n        console.warn('Invalid NASA POWER response structure');\n        return null;\n      }\n      const parameters = data.properties.parameter;\n      const temperatureData = parameters.T2M || {};\n\n      // Get all dates, excluding the 'units' property\n      const timeKeys = Object.keys(temperatureData).filter(key => key !== 'units' && !isNaN(key));\n      if (timeKeys.length === 0) {\n        console.warn('No valid dates found in NASA POWER response');\n        return null;\n      }\n\n      // Map the data with proper type checking and fallbacks\n      return timeKeys.map(date => {\n        try {\n          var _parameters$T2M, _parameters$PRECTOT, _parameters$WS2M, _parameters$RH2M, _parameters$ALLSKY_SF;\n          return {\n            date,\n            temperature: this.getParameterValue(parameters.T2M, date),\n            precipitation: this.getParameterValue(parameters.PRECTOT, date),\n            windSpeed: this.getParameterValue(parameters.WS2M, date),\n            humidity: this.getParameterValue(parameters.RH2M, date),\n            solarRadiation: this.getParameterValue(parameters.ALLSKY_SFC_SW_DWN, date),\n            units: {\n              temperature: ((_parameters$T2M = parameters.T2M) === null || _parameters$T2M === void 0 ? void 0 : _parameters$T2M.units) || '°C',\n              precipitation: ((_parameters$PRECTOT = parameters.PRECTOT) === null || _parameters$PRECTOT === void 0 ? void 0 : _parameters$PRECTOT.units) || 'mm',\n              windSpeed: ((_parameters$WS2M = parameters.WS2M) === null || _parameters$WS2M === void 0 ? void 0 : _parameters$WS2M.units) || 'm/s',\n              humidity: ((_parameters$RH2M = parameters.RH2M) === null || _parameters$RH2M === void 0 ? void 0 : _parameters$RH2M.units) || '%',\n              solarRadiation: ((_parameters$ALLSKY_SF = parameters.ALLSKY_SFC_SW_DWN) === null || _parameters$ALLSKY_SF === void 0 ? void 0 : _parameters$ALLSKY_SF.units) || 'W/m²'\n            }\n          };\n        } catch (error) {\n          console.warn(`Error processing data for date ${date}:`, error);\n          return {\n            date,\n            temperature: null,\n            precipitation: null,\n            windSpeed: null,\n            humidity: null,\n            solarRadiation: null,\n            units: {\n              temperature: '°C',\n              precipitation: 'mm',\n              windSpeed: 'm/s',\n              humidity: '%',\n              solarRadiation: 'W/m²'\n            }\n          };\n        }\n      });\n    } catch (error) {\n      console.error('Error processing NASA POWER response:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Safely get a parameter value with validation\r\n   * @param {Object} parameter - Parameter object from API\r\n   * @param {string} date - Date key\r\n   * @returns {number|null} Parameter value or null if invalid\r\n   */\n  getParameterValue(parameter, date) {\n    const value = parameter === null || parameter === void 0 ? void 0 : parameter[date];\n    return value !== undefined && value !== -999.0 && !isNaN(value) ? value : null;\n  }\n\n  /**\r\n   * Convert a date string or Date object to YYYYMMDD format\r\n   * @param {string|Date} date - Input date\r\n   * @returns {string} Formatted date\r\n   */\n  formatDateToString(date) {\n    try {\n      if (typeof date === 'string') {\n        return date.replace(/-/g, '');\n      }\n      if (date instanceof Date) {\n        return date.toISOString().split('T')[0].replace(/-/g, '');\n      }\n      throw new Error('Invalid date format');\n    } catch (error) {\n      throw new Error(`Invalid date format: ${error.message}`);\n    }\n  }\n\n  /**\r\n   * Validate latitude and longitude values\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @returns {boolean} Whether coordinates are valid\r\n   */\n  isValidCoordinates(lat, lon) {\n    return !isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n}\nexport default new PowerService();","map":{"version":3,"names":["BaseApiService","axios","PowerService","constructor","baseUrl","getWeatherData","lat","lon","startDate","endDate","isValidCoordinates","Error","formattedStartDate","formatDateToString","formattedEndDate","params","parameters","community","longitude","latitude","start","end","format","response","get","timeout","processResponse","data","error","console","_data$properties","properties","parameter","warn","temperatureData","T2M","timeKeys","Object","keys","filter","key","isNaN","length","map","date","_parameters$T2M","_parameters$PRECTOT","_parameters$WS2M","_parameters$RH2M","_parameters$ALLSKY_SF","temperature","getParameterValue","precipitation","PRECTOT","windSpeed","WS2M","humidity","RH2M","solarRadiation","ALLSKY_SFC_SW_DWN","units","value","undefined","replace","Date","toISOString","split","message"],"sources":["C:/xampp/htdocs/errors/src/services/api/powerService.js"],"sourcesContent":["import BaseApiService from './baseApiService';\r\nimport axios from 'axios';\r\n\r\nclass PowerService extends BaseApiService {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = 'https://power.larc.nasa.gov/api/temporal/daily/point';\r\n  }\r\n\r\n  /**\r\n   * Fetch weather data from NASA POWER API\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @param {string} startDate - Start date (YYYYMMDD)\r\n   * @param {string} endDate - End date (YYYYMMDD)\r\n   * @returns {Promise<Object>} Weather data\r\n   */\r\n  async getWeatherData(lat, lon, startDate, endDate) {\r\n    try {\r\n      // Validate inputs\r\n      if (!this.isValidCoordinates(lat, lon)) {\r\n        throw new Error('Invalid coordinates provided');\r\n      }\r\n\r\n      if (!startDate || !endDate) {\r\n        throw new Error('Start and end dates are required');\r\n      }\r\n\r\n      // Convert dates to required format (YYYYMMDD)\r\n      const formattedStartDate = this.formatDateToString(startDate);\r\n      const formattedEndDate = this.formatDateToString(endDate);\r\n\r\n      const params = {\r\n        parameters: 'T2M,PRECTOT,WS2M,RH2M,ALLSKY_SFC_SW_DWN',\r\n        community: 'RE',\r\n        longitude: lon,\r\n        latitude: lat,\r\n        start: formattedStartDate,\r\n        end: formattedEndDate,\r\n        format: 'JSON'\r\n      };\r\n\r\n      const response = await axios.get(this.baseUrl, { \r\n        params,\r\n        timeout: 30000\r\n      });\r\n\r\n      return this.processResponse(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching NASA POWER data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process the NASA POWER API response\r\n   * @param {Object} data - Raw API response\r\n   * @returns {Object} Processed weather data\r\n   */\r\n  processResponse(data) {\r\n    try {\r\n      // Validate response structure\r\n      if (!data?.properties?.parameter) {\r\n        console.warn('Invalid NASA POWER response structure');\r\n        return null;\r\n      }\r\n\r\n      const parameters = data.properties.parameter;\r\n      const temperatureData = parameters.T2M || {};\r\n      \r\n      // Get all dates, excluding the 'units' property\r\n      const timeKeys = Object.keys(temperatureData)\r\n        .filter(key => key !== 'units' && !isNaN(key));\r\n\r\n      if (timeKeys.length === 0) {\r\n        console.warn('No valid dates found in NASA POWER response');\r\n        return null;\r\n      }\r\n\r\n      // Map the data with proper type checking and fallbacks\r\n      return timeKeys.map(date => {\r\n        try {\r\n          return {\r\n            date,\r\n            temperature: this.getParameterValue(parameters.T2M, date),\r\n            precipitation: this.getParameterValue(parameters.PRECTOT, date),\r\n            windSpeed: this.getParameterValue(parameters.WS2M, date),\r\n            humidity: this.getParameterValue(parameters.RH2M, date),\r\n            solarRadiation: this.getParameterValue(parameters.ALLSKY_SFC_SW_DWN, date),\r\n            units: {\r\n              temperature: parameters.T2M?.units || '°C',\r\n              precipitation: parameters.PRECTOT?.units || 'mm',\r\n              windSpeed: parameters.WS2M?.units || 'm/s',\r\n              humidity: parameters.RH2M?.units || '%',\r\n              solarRadiation: parameters.ALLSKY_SFC_SW_DWN?.units || 'W/m²'\r\n            }\r\n          };\r\n        } catch (error) {\r\n          console.warn(`Error processing data for date ${date}:`, error);\r\n          return {\r\n            date,\r\n            temperature: null,\r\n            precipitation: null,\r\n            windSpeed: null,\r\n            humidity: null,\r\n            solarRadiation: null,\r\n            units: {\r\n              temperature: '°C',\r\n              precipitation: 'mm',\r\n              windSpeed: 'm/s',\r\n              humidity: '%',\r\n              solarRadiation: 'W/m²'\r\n            }\r\n          };\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.error('Error processing NASA POWER response:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Safely get a parameter value with validation\r\n   * @param {Object} parameter - Parameter object from API\r\n   * @param {string} date - Date key\r\n   * @returns {number|null} Parameter value or null if invalid\r\n   */\r\n  getParameterValue(parameter, date) {\r\n    const value = parameter?.[date];\r\n    return (value !== undefined && value !== -999.0 && !isNaN(value)) ? value : null;\r\n  }\r\n\r\n  /**\r\n   * Convert a date string or Date object to YYYYMMDD format\r\n   * @param {string|Date} date - Input date\r\n   * @returns {string} Formatted date\r\n   */\r\n  formatDateToString(date) {\r\n    try {\r\n      if (typeof date === 'string') {\r\n        return date.replace(/-/g, '');\r\n      }\r\n      if (date instanceof Date) {\r\n        return date.toISOString().split('T')[0].replace(/-/g, '');\r\n      }\r\n      throw new Error('Invalid date format');\r\n    } catch (error) {\r\n      throw new Error(`Invalid date format: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate latitude and longitude values\r\n   * @param {number} lat - Latitude\r\n   * @param {number} lon - Longitude\r\n   * @returns {boolean} Whether coordinates are valid\r\n   */\r\n  isValidCoordinates(lat, lon) {\r\n    return !isNaN(lat) && !isNaN(lon) && \r\n           lat >= -90 && lat <= 90 && \r\n           lon >= -180 && lon <= 180;\r\n  }\r\n}\r\n\r\nexport default new PowerService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}