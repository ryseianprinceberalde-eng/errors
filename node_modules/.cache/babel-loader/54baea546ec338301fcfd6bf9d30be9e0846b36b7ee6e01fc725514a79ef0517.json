{"ast":null,"code":"import DisasterTrackingService from './api/disasterTrackingService.js';\nimport MeteomaticsService from './api/meteomaticsService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.spaceWeatherService = new SpaceWeatherService();\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.meteomaticsService = new MeteomaticsService();\n\n    // Service configuration\n    this.config = {\n      enableSpaceWeather: true,\n      enableDisasterTracking: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n\n      // Validate inputs\n      if (!this.meteomaticsService.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Fetch data from all sources in parallel\n      const [weatherData, spaceWeatherData] = await Promise.all([this.meteomaticsService.fetchWeatherData(lat, lon, targetDate), this.config.enableSpaceWeather ? this.spaceWeatherService.fetchSpaceWeatherData(targetDate, this.config.defaultDayRange) : null]);\n\n      // Process historical weather data\n      const processedWeatherData = processHistoricalData(weatherData.daily, weatherData.monthly);\n\n      // Merge all data sources\n      const mergedData = mergeDataSources({\n        ...weatherData,\n        ...processedWeatherData\n      }, spaceWeatherData);\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      console.log('Weather analysis completed successfully');\n      return mergedData;\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const {\n      formatForExport\n    } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.spaceWeather = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = {\n          status: 'healthy',\n          message: 'Service operational'\n        };\n      } catch (error) {\n        health.services.disasterTracking = {\n          status: 'unhealthy',\n          message: error.message\n        };\n        health.overall = 'degraded';\n      }\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;","map":{"version":3,"names":["DisasterTrackingService","MeteomaticsService","processHistoricalData","mergeDataSources","validateDataIntegrity","WeatherService","constructor","spaceWeatherService","SpaceWeatherService","disasterTrackingService","meteomaticsService","config","enableSpaceWeather","enableDisasterTracking","defaultDayRange","maxRetries","getWeatherAnalysis","lat","lon","targetDate","console","log","isValidCoordinates","Error","weatherData","spaceWeatherData","Promise","all","fetchWeatherData","fetchSpaceWeatherData","processedWeatherData","daily","monthly","mergedData","validation","isValid","warn","errors","error","getDisasterEvents","days","status","fetchDisasterEvents","getSpaceWeatherData","dayRange","generateDefaultSpaceWeatherData","filterDisasterEvents","events","filters","filteredEvents","category","filterByCategory","severity","filterBySeverity","getDisasterStatistics","getEventStatistics","getDisasterEventIcon","categoryId","getEventIcon","exportData","data","format","formatForExport","require","getServiceStatus","services","meteomatics","getApiStatus","spaceWeather","service","enabled","apiKey","disasterTracking","baseUrl","configuration","lastUpdated","Date","toISOString","updateConfiguration","newConfig","healthCheck","health","overall","timestamp","validateCredentials","message","testEvents","weatherService"],"sources":["C:/xampp/htdocs/errors/src/services/weatherService.js"],"sourcesContent":["import DisasterTrackingService from './api/disasterTrackingService.js';\nimport MeteomaticsService from './api/meteomaticsService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\n * Main Weather Service - Orchestrates all weather-related data sources\n * This is the primary service that components should interact with\n */\nclass WeatherService {\n  constructor() {\n    // Initialize individual service modules\n    this.spaceWeatherService = new SpaceWeatherService();\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.meteomaticsService = new MeteomaticsService();\n    \n    // Service configuration\n    this.config = {\n      enableSpaceWeather: true,\n      enableDisasterTracking: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n\n  /**\n   * Get comprehensive weather data for a location and date\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise<Object>} Complete weather analysis\n   */\n  async getWeatherAnalysis(lat, lon, targetDate) {\n    try {\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n      \n      // Validate inputs\n      if (!this.meteomaticsService.isValidCoordinates(lat, lon)) {\n        throw new Error('Invalid coordinates provided');\n      }\n\n      // Fetch data from all sources in parallel\n      const [weatherData, spaceWeatherData] = await Promise.all([\n        this.meteomaticsService.fetchWeatherData(lat, lon, targetDate),\n        this.config.enableSpaceWeather \n          ? this.spaceWeatherService.fetchSpaceWeatherData(targetDate, this.config.defaultDayRange)\n          : null\n      ]);\n\n      // Process historical weather data\n      const processedWeatherData = processHistoricalData(weatherData.daily, weatherData.monthly);\n      \n      // Merge all data sources\n      const mergedData = mergeDataSources(\n        { ...weatherData, ...processedWeatherData },\n        spaceWeatherData\n      );\n\n      // Validate data integrity\n      const validation = validateDataIntegrity(mergedData);\n      if (!validation.isValid) {\n        console.warn('Data validation failed:', validation.errors);\n      }\n\n      // Add validation results to response\n      mergedData.validation = validation;\n      \n      console.log('Weather analysis completed successfully');\n      return mergedData;\n\n    } catch (error) {\n      console.error('Error in weather analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get disaster events for storm tracking\n   * @param {number} days - Number of days to look back\n   * @param {string} status - Event status filter\n   * @returns {Promise<Array>} Array of disaster events\n   */\n  async getDisasterEvents(days = 30, status = 'open') {\n    try {\n      if (!this.config.enableDisasterTracking) {\n        console.log('Disaster tracking is disabled');\n        return [];\n      }\n\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n    } catch (error) {\n      console.error('Error fetching disaster events:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get space weather data independently\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look around target date\n   * @returns {Promise<Object>} Space weather data\n   */\n  async getSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      if (!this.config.enableSpaceWeather) {\n        console.log('Space weather tracking is disabled');\n        return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n      }\n\n      return await this.spaceWeatherService.fetchSpaceWeatherData(targetDate, dayRange);\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return this.spaceWeatherService.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Filter disaster events by criteria\n   * @param {Array} events - Array of disaster events\n   * @param {Object} filters - Filter criteria\n   * @returns {Array} Filtered events\n   */\n  filterDisasterEvents(events, filters = {}) {\n    let filteredEvents = [...events];\n\n    if (filters.category && filters.category !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n    }\n\n    if (filters.severity && filters.severity !== 'all') {\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n    }\n\n    return filteredEvents;\n  }\n\n  /**\n   * Get disaster event statistics\n   * @param {Array} events - Array of disaster events\n   * @returns {Object} Event statistics\n   */\n  getDisasterStatistics(events) {\n    return this.disasterTrackingService.getEventStatistics(events);\n  }\n\n  /**\n   * Get event icon for disaster category\n   * @param {string} categoryId - Event category ID\n   * @returns {string} Emoji icon\n   */\n  getDisasterEventIcon(categoryId) {\n    return this.disasterTrackingService.getEventIcon(categoryId);\n  }\n\n  /**\n   * Export weather data in specified format\n   * @param {Object} data - Weather data to export\n   * @param {string} format - Export format ('json' or 'csv')\n   * @returns {string|Object} Formatted export data\n   */\n  exportData(data, format = 'json') {\n    const { formatForExport } = require('./utils/dataProcessor.js');\n    return formatForExport(data, format);\n  }\n\n  /**\n   * Get service status and configuration\n   * @returns {Object} Service status information\n   */\n  getServiceStatus() {\n    return {\n      services: {\n        meteomatics: this.meteomaticsService.getApiStatus(),\n        spaceWeather: {\n          service: 'NASA DONKI Space Weather',\n          enabled: this.config.enableSpaceWeather,\n          apiKey: this.spaceWeatherService.apiKey ? 'configured' : 'missing'\n        },\n        disasterTracking: {\n          service: 'NASA EONET Disaster Tracking',\n          enabled: this.config.enableDisasterTracking,\n          baseUrl: this.disasterTrackingService.baseUrl\n        }\n      },\n      configuration: this.config,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Update service configuration\n   * @param {Object} newConfig - New configuration options\n   */\n  updateConfiguration(newConfig) {\n    this.config = { ...this.config, ...newConfig };\n    console.log('Service configuration updated:', this.config);\n  }\n\n  /**\n   * Health check for all services\n   * @returns {Promise<Object>} Health status of all services\n   */\n  async healthCheck() {\n    const health = {\n      overall: 'healthy',\n      services: {},\n      timestamp: new Date().toISOString()\n    };\n\n    try {\n      // Check Meteomatics service\n      health.services.meteomatics = {\n        status: this.meteomaticsService.validateCredentials() ? 'healthy' : 'degraded',\n        message: 'Credentials validated'\n      };\n\n      // Check space weather service\n      try {\n        await this.spaceWeatherService.generateDefaultSpaceWeatherData();\n        health.services.spaceWeather = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.spaceWeather = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n      // Check disaster tracking service\n      try {\n        const testEvents = this.disasterTrackingService.getEventStatistics([]);\n        health.services.disasterTracking = { status: 'healthy', message: 'Service operational' };\n      } catch (error) {\n        health.services.disasterTracking = { status: 'unhealthy', message: error.message };\n        health.overall = 'degraded';\n      }\n\n    } catch (error) {\n      health.overall = 'unhealthy';\n      health.error = error.message;\n    }\n\n    return health;\n  }\n}\n\n// Export singleton instance\nexport const weatherService = new WeatherService();\nexport default WeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}