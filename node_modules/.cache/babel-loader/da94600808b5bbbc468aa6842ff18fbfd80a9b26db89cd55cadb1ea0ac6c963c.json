{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * Meteomatics Weather API Service\n * Handles professional weather data integration\n */\nclass MeteomaticsService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://api.meteomatics.com';\n    this.username = 'narvasa_darryljohn';\n    this.password = '20XN1825ylysfXl8jSXx';\n    this.auth = btoa(`${this.username}:${this.password}`);\n  }\n\n  /**\n   * Fetch historical weather data from Meteomatics API\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise} Weather data or fallback simulation\n   */\n  async fetchWeatherData(lat, lon, targetDate) {\n    try {\n      // Note: Direct browser calls to Meteomatics API are blocked by CORS\n      // This would work in a backend environment\n      console.warn('CORS prevents direct Meteomatics API calls from browser. Using enhanced simulation.');\n\n      // In production, this would make actual API calls through a backend proxy\n      // return await this.fetchActualMeteomaticsData(lat, lon, targetDate);\n\n      // For now, return enhanced simulation\n      return this.generateEnhancedWeatherData(lat, lon, targetDate);\n    } catch (error) {\n      console.error('Meteomatics API error:', error);\n      return this.generateEnhancedWeatherData(lat, lon, targetDate);\n    }\n  }\n\n  /**\n   * Generate enhanced weather simulation based on location and climate patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date\n   * @returns {Object} Enhanced weather data simulation\n   */\n  generateEnhancedWeatherData(lat, lon, targetDate) {\n    if (!this.isValidCoordinates(lat, lon)) {\n      throw new Error('Invalid coordinates provided');\n    }\n\n    // Enhanced simulation with location-based climate patterns\n    const isPhilippines = lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127;\n    const isTropical = Math.abs(lat) < 23.5;\n    const isNorthernHemisphere = lat > 0;\n    const targetMonth = new Date(targetDate).getMonth() + 1;\n    const targetDay = new Date(targetDate).getDate();\n\n    // Generate realistic daily records based on location\n    const dailyRecords = this.generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere);\n\n    // Generate monthly data with location intelligence\n    const monthlyData = this.generateMonthlyData(lat, lon, isPhilippines);\n    return {\n      daily: dailyRecords,\n      monthly: monthlyData,\n      metadata: {\n        location: {\n          lat,\n          lon\n        },\n        isPhilippines,\n        isTropical,\n        targetDate,\n        generatedAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Generate daily weather records\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} targetMonth - Target month\n   * @param {number} targetDay - Target day\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @param {boolean} isNorthernHemisphere - Is in northern hemisphere\n   * @returns {Array} Daily weather records\n   */\n  generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere) {\n    const dailyRecords = [];\n    const currentYear = new Date().getFullYear();\n    for (let year = currentYear - 15; year < currentYear; year++) {\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, targetMonth);\n      const seasonalVariation = Math.sin((targetMonth - 1) * Math.PI / 6) * (isNorthernHemisphere ? 1 : -1);\n      const record = {\n        year,\n        date: `${year}-${targetMonth.toString().padStart(2, '0')}-${targetDay.toString().padStart(2, '0')}`,\n        temperature: Math.round((baseTemp + seasonalVariation + (Math.random() - 0.5) * 8) * 10) / 10,\n        temperatureMax: Math.round((baseTemp + seasonalVariation + 5 + Math.random() * 5) * 10) / 10,\n        temperatureMin: Math.round((baseTemp + seasonalVariation - 5 - Math.random() * 3) * 10) / 10,\n        precipitation: this.getLocationBasedPrecipitation(lat, lon, targetMonth),\n        windSpeed: Math.round((5 + Math.random() * 15) * 10) / 10,\n        humidity: Math.round((60 + Math.random() * 30) * 10) / 10\n      };\n      dailyRecords.push(record);\n    }\n    return dailyRecords;\n  }\n\n  /**\n   * Generate monthly weather data\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @returns {Array} Monthly weather data\n   */\n  generateMonthlyData(lat, lon, isPhilippines) {\n    const monthlyData = [];\n    for (let month = 1; month <= 12; month++) {\n      const monthName = new Date(2000, month - 1, 1).toLocaleString('default', {\n        month: 'short'\n      });\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, month);\n      const basePrecip = this.getLocationBasedPrecipitation(lat, lon, month);\n      monthlyData.push({\n        month: monthName,\n        temperature: Math.round(baseTemp * 10) / 10,\n        rainfall: Math.round(basePrecip * 10) / 10,\n        windSpeed: Math.round((8 + Math.random() * 6) * 10) / 10\n      });\n    }\n    return monthlyData;\n  }\n\n  /**\n   * Get location-based temperature patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Base temperature for location and month\n   */\n  getLocationBasedTemperature(lat, lon, month) {\n    // Philippines-specific temperature patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      const baseTemp = 27; // Philippines average\n      const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 2; // Mild seasonal variation\n      return baseTemp + seasonalVariation;\n    }\n\n    // General latitude-based temperature\n    const latitudeFactor = Math.cos(lat * Math.PI / 180);\n    const baseTemp = 15 + latitudeFactor * 20;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * (lat > 0 ? 1 : -1) * 15;\n    return baseTemp + seasonalVariation;\n  }\n\n  /**\n   * Get location-based precipitation patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Precipitation amount for location and month\n   */\n  getLocationBasedPrecipitation(lat, lon, month) {\n    // Philippines monsoon patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      // Wet season (June-November), Dry season (December-May)\n      const isWetSeason = month >= 6 && month <= 11;\n      return isWetSeason ? 15 + Math.random() * 25 : 2 + Math.random() * 8;\n    }\n\n    // General precipitation patterns\n    const tropicalFactor = Math.max(0, 1 - Math.abs(lat) / 30);\n    const basePrecip = 5 + tropicalFactor * 15;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 10;\n    return Math.max(0, basePrecip + seasonalVariation + Math.random() * 10);\n  }\n\n  /**\n   * Validate Meteomatics API credentials\n   * @returns {boolean} True if credentials are valid\n   */\n  validateCredentials() {\n    return !!(this.username && this.password && this.auth);\n  }\n\n  /**\n   * Get API status information\n   * @returns {Object} API status and configuration\n   */\n  getApiStatus() {\n    return {\n      service: 'Meteomatics Weather API',\n      hasCredentials: this.validateCredentials(),\n      username: this.username,\n      baseUrl: this.baseUrl,\n      corsBlocked: true,\n      // Direct browser access blocked\n      recommendation: 'Use backend proxy for production'\n    };\n  }\n}\nexport default MeteomaticsService;","map":{"version":3,"names":["BaseApiService","MeteomaticsService","constructor","baseUrl","username","password","auth","btoa","fetchWeatherData","lat","lon","targetDate","console","warn","generateEnhancedWeatherData","error","isValidCoordinates","Error","isPhilippines","isTropical","Math","abs","isNorthernHemisphere","targetMonth","Date","getMonth","targetDay","getDate","dailyRecords","generateDailyRecords","monthlyData","generateMonthlyData","daily","monthly","metadata","location","generatedAt","toISOString","currentYear","getFullYear","year","baseTemp","getLocationBasedTemperature","seasonalVariation","sin","PI","record","date","toString","padStart","temperature","round","random","temperatureMax","temperatureMin","precipitation","getLocationBasedPrecipitation","windSpeed","humidity","push","month","monthName","toLocaleString","basePrecip","rainfall","latitudeFactor","cos","isWetSeason","tropicalFactor","max","validateCredentials","getApiStatus","service","hasCredentials","corsBlocked","recommendation"],"sources":["C:/xampp/htdocs/errors/src/services/api/meteomaticsService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * Meteomatics Weather API Service\n * Handles professional weather data integration\n */\nclass MeteomaticsService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://api.meteomatics.com';\n    this.username = 'narvasa_darryljohn';\n    this.password = '20XN1825ylysfXl8jSXx';\n    this.auth = btoa(`${this.username}:${this.password}`);\n  }\n\n  /**\n   * Fetch historical weather data from Meteomatics API\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise} Weather data or fallback simulation\n   */\n  async fetchWeatherData(lat, lon, targetDate) {\n    try {\n      // Note: Direct browser calls to Meteomatics API are blocked by CORS\n      // This would work in a backend environment\n      console.warn('CORS prevents direct Meteomatics API calls from browser. Using enhanced simulation.');\n      \n      // In production, this would make actual API calls through a backend proxy\n      // return await this.fetchActualMeteomaticsData(lat, lon, targetDate);\n      \n      // For now, return enhanced simulation\n      return this.generateEnhancedWeatherData(lat, lon, targetDate);\n    } catch (error) {\n      console.error('Meteomatics API error:', error);\n      return this.generateEnhancedWeatherData(lat, lon, targetDate);\n    }\n  }\n\n  /**\n   * Generate enhanced weather simulation based on location and climate patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date\n   * @returns {Object} Enhanced weather data simulation\n   */\n  generateEnhancedWeatherData(lat, lon, targetDate) {\n    if (!this.isValidCoordinates(lat, lon)) {\n      throw new Error('Invalid coordinates provided');\n    }\n\n    // Enhanced simulation with location-based climate patterns\n    const isPhilippines = (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127);\n    const isTropical = Math.abs(lat) < 23.5;\n    const isNorthernHemisphere = lat > 0;\n    \n    const targetMonth = new Date(targetDate).getMonth() + 1;\n    const targetDay = new Date(targetDate).getDate();\n    \n    // Generate realistic daily records based on location\n    const dailyRecords = this.generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere);\n    \n    // Generate monthly data with location intelligence\n    const monthlyData = this.generateMonthlyData(lat, lon, isPhilippines);\n\n    return {\n      daily: dailyRecords,\n      monthly: monthlyData,\n      metadata: {\n        location: { lat, lon },\n        isPhilippines,\n        isTropical,\n        targetDate,\n        generatedAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Generate daily weather records\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} targetMonth - Target month\n   * @param {number} targetDay - Target day\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @param {boolean} isNorthernHemisphere - Is in northern hemisphere\n   * @returns {Array} Daily weather records\n   */\n  generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere) {\n    const dailyRecords = [];\n    const currentYear = new Date().getFullYear();\n    \n    for (let year = currentYear - 15; year < currentYear; year++) {\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, targetMonth);\n      const seasonalVariation = Math.sin((targetMonth - 1) * Math.PI / 6) * (isNorthernHemisphere ? 1 : -1);\n      \n      const record = {\n        year,\n        date: `${year}-${targetMonth.toString().padStart(2, '0')}-${targetDay.toString().padStart(2, '0')}`,\n        temperature: Math.round((baseTemp + seasonalVariation + (Math.random() - 0.5) * 8) * 10) / 10,\n        temperatureMax: Math.round((baseTemp + seasonalVariation + 5 + Math.random() * 5) * 10) / 10,\n        temperatureMin: Math.round((baseTemp + seasonalVariation - 5 - Math.random() * 3) * 10) / 10,\n        precipitation: this.getLocationBasedPrecipitation(lat, lon, targetMonth),\n        windSpeed: Math.round((5 + Math.random() * 15) * 10) / 10,\n        humidity: Math.round((60 + Math.random() * 30) * 10) / 10\n      };\n      \n      dailyRecords.push(record);\n    }\n    \n    return dailyRecords;\n  }\n\n  /**\n   * Generate monthly weather data\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @returns {Array} Monthly weather data\n   */\n  generateMonthlyData(lat, lon, isPhilippines) {\n    const monthlyData = [];\n    \n    for (let month = 1; month <= 12; month++) {\n      const monthName = new Date(2000, month - 1, 1).toLocaleString('default', { month: 'short' });\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, month);\n      const basePrecip = this.getLocationBasedPrecipitation(lat, lon, month);\n      \n      monthlyData.push({\n        month: monthName,\n        temperature: Math.round(baseTemp * 10) / 10,\n        rainfall: Math.round(basePrecip * 10) / 10,\n        windSpeed: Math.round((8 + Math.random() * 6) * 10) / 10\n      });\n    }\n    \n    return monthlyData;\n  }\n\n  /**\n   * Get location-based temperature patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Base temperature for location and month\n   */\n  getLocationBasedTemperature(lat, lon, month) {\n    // Philippines-specific temperature patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      const baseTemp = 27; // Philippines average\n      const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 2; // Mild seasonal variation\n      return baseTemp + seasonalVariation;\n    }\n    \n    // General latitude-based temperature\n    const latitudeFactor = Math.cos(lat * Math.PI / 180);\n    const baseTemp = 15 + latitudeFactor * 20;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * (lat > 0 ? 1 : -1) * 15;\n    \n    return baseTemp + seasonalVariation;\n  }\n\n  /**\n   * Get location-based precipitation patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Precipitation amount for location and month\n   */\n  getLocationBasedPrecipitation(lat, lon, month) {\n    // Philippines monsoon patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      // Wet season (June-November), Dry season (December-May)\n      const isWetSeason = month >= 6 && month <= 11;\n      return isWetSeason ? 15 + Math.random() * 25 : 2 + Math.random() * 8;\n    }\n    \n    // General precipitation patterns\n    const tropicalFactor = Math.max(0, 1 - Math.abs(lat) / 30);\n    const basePrecip = 5 + tropicalFactor * 15;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 10;\n    \n    return Math.max(0, basePrecip + seasonalVariation + Math.random() * 10);\n  }\n\n  /**\n   * Validate Meteomatics API credentials\n   * @returns {boolean} True if credentials are valid\n   */\n  validateCredentials() {\n    return !!(this.username && this.password && this.auth);\n  }\n\n  /**\n   * Get API status information\n   * @returns {Object} API status and configuration\n   */\n  getApiStatus() {\n    return {\n      service: 'Meteomatics Weather API',\n      hasCredentials: this.validateCredentials(),\n      username: this.username,\n      baseUrl: this.baseUrl,\n      corsBlocked: true, // Direct browser access blocked\n      recommendation: 'Use backend proxy for production'\n    };\n  }\n}\n\nexport default MeteomaticsService;\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,qBAAqB;;AAEhD;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,SAASD,cAAc,CAAC;EAC9CE,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,OAAO,GAAG,6BAA6B;IAC5C,IAAI,CAACC,QAAQ,GAAG,oBAAoB;IACpC,IAAI,CAACC,QAAQ,GAAG,sBAAsB;IACtC,IAAI,CAACC,IAAI,GAAGC,IAAI,CAAC,GAAG,IAAI,CAACH,QAAQ,IAAI,IAAI,CAACC,QAAQ,EAAE,CAAC;EACvD;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMG,gBAAgBA,CAACC,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAE;IAC3C,IAAI;MACF;MACA;MACAC,OAAO,CAACC,IAAI,CAAC,qFAAqF,CAAC;;MAEnG;MACA;;MAEA;MACA,OAAO,IAAI,CAACC,2BAA2B,CAACL,GAAG,EAAEC,GAAG,EAAEC,UAAU,CAAC;IAC/D,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO,IAAI,CAACD,2BAA2B,CAACL,GAAG,EAAEC,GAAG,EAAEC,UAAU,CAAC;IAC/D;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,2BAA2BA,CAACL,GAAG,EAAEC,GAAG,EAAEC,UAAU,EAAE;IAChD,IAAI,CAAC,IAAI,CAACK,kBAAkB,CAACP,GAAG,EAAEC,GAAG,CAAC,EAAE;MACtC,MAAM,IAAIO,KAAK,CAAC,8BAA8B,CAAC;IACjD;;IAEA;IACA,MAAMC,aAAa,GAAIT,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,IAAI,IAAIC,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAI;IAC7E,MAAMS,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACZ,GAAG,CAAC,GAAG,IAAI;IACvC,MAAMa,oBAAoB,GAAGb,GAAG,GAAG,CAAC;IAEpC,MAAMc,WAAW,GAAG,IAAIC,IAAI,CAACb,UAAU,CAAC,CAACc,QAAQ,CAAC,CAAC,GAAG,CAAC;IACvD,MAAMC,SAAS,GAAG,IAAIF,IAAI,CAACb,UAAU,CAAC,CAACgB,OAAO,CAAC,CAAC;;IAEhD;IACA,MAAMC,YAAY,GAAG,IAAI,CAACC,oBAAoB,CAACpB,GAAG,EAAEC,GAAG,EAAEa,WAAW,EAAEG,SAAS,EAAER,aAAa,EAAEI,oBAAoB,CAAC;;IAErH;IACA,MAAMQ,WAAW,GAAG,IAAI,CAACC,mBAAmB,CAACtB,GAAG,EAAEC,GAAG,EAAEQ,aAAa,CAAC;IAErE,OAAO;MACLc,KAAK,EAAEJ,YAAY;MACnBK,OAAO,EAAEH,WAAW;MACpBI,QAAQ,EAAE;QACRC,QAAQ,EAAE;UAAE1B,GAAG;UAAEC;QAAI,CAAC;QACtBQ,aAAa;QACbC,UAAU;QACVR,UAAU;QACVyB,WAAW,EAAE,IAAIZ,IAAI,CAAC,CAAC,CAACa,WAAW,CAAC;MACtC;IACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,oBAAoBA,CAACpB,GAAG,EAAEC,GAAG,EAAEa,WAAW,EAAEG,SAAS,EAAER,aAAa,EAAEI,oBAAoB,EAAE;IAC1F,MAAMM,YAAY,GAAG,EAAE;IACvB,MAAMU,WAAW,GAAG,IAAId,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC,CAAC;IAE5C,KAAK,IAAIC,IAAI,GAAGF,WAAW,GAAG,EAAE,EAAEE,IAAI,GAAGF,WAAW,EAAEE,IAAI,EAAE,EAAE;MAC5D,MAAMC,QAAQ,GAAG,IAAI,CAACC,2BAA2B,CAACjC,GAAG,EAAEC,GAAG,EAAEa,WAAW,CAAC;MACxE,MAAMoB,iBAAiB,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAACrB,WAAW,GAAG,CAAC,IAAIH,IAAI,CAACyB,EAAE,GAAG,CAAC,CAAC,IAAIvB,oBAAoB,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;MAErG,MAAMwB,MAAM,GAAG;QACbN,IAAI;QACJO,IAAI,EAAE,GAAGP,IAAI,IAAIjB,WAAW,CAACyB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIvB,SAAS,CAACsB,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;QACnGC,WAAW,EAAE9B,IAAI,CAAC+B,KAAK,CAAC,CAACV,QAAQ,GAAGE,iBAAiB,GAAG,CAACvB,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE;QAC7FC,cAAc,EAAEjC,IAAI,CAAC+B,KAAK,CAAC,CAACV,QAAQ,GAAGE,iBAAiB,GAAG,CAAC,GAAGvB,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE;QAC5FE,cAAc,EAAElC,IAAI,CAAC+B,KAAK,CAAC,CAACV,QAAQ,GAAGE,iBAAiB,GAAG,CAAC,GAAGvB,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG,EAAE;QAC5FG,aAAa,EAAE,IAAI,CAACC,6BAA6B,CAAC/C,GAAG,EAAEC,GAAG,EAAEa,WAAW,CAAC;QACxEkC,SAAS,EAAErC,IAAI,CAAC+B,KAAK,CAAC,CAAC,CAAC,GAAG/B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE;QACzDM,QAAQ,EAAEtC,IAAI,CAAC+B,KAAK,CAAC,CAAC,EAAE,GAAG/B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,GAAG;MACzD,CAAC;MAEDxB,YAAY,CAAC+B,IAAI,CAACb,MAAM,CAAC;IAC3B;IAEA,OAAOlB,YAAY;EACrB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEG,mBAAmBA,CAACtB,GAAG,EAAEC,GAAG,EAAEQ,aAAa,EAAE;IAC3C,MAAMY,WAAW,GAAG,EAAE;IAEtB,KAAK,IAAI8B,KAAK,GAAG,CAAC,EAAEA,KAAK,IAAI,EAAE,EAAEA,KAAK,EAAE,EAAE;MACxC,MAAMC,SAAS,GAAG,IAAIrC,IAAI,CAAC,IAAI,EAAEoC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAACE,cAAc,CAAC,SAAS,EAAE;QAAEF,KAAK,EAAE;MAAQ,CAAC,CAAC;MAC5F,MAAMnB,QAAQ,GAAG,IAAI,CAACC,2BAA2B,CAACjC,GAAG,EAAEC,GAAG,EAAEkD,KAAK,CAAC;MAClE,MAAMG,UAAU,GAAG,IAAI,CAACP,6BAA6B,CAAC/C,GAAG,EAAEC,GAAG,EAAEkD,KAAK,CAAC;MAEtE9B,WAAW,CAAC6B,IAAI,CAAC;QACfC,KAAK,EAAEC,SAAS;QAChBX,WAAW,EAAE9B,IAAI,CAAC+B,KAAK,CAACV,QAAQ,GAAG,EAAE,CAAC,GAAG,EAAE;QAC3CuB,QAAQ,EAAE5C,IAAI,CAAC+B,KAAK,CAACY,UAAU,GAAG,EAAE,CAAC,GAAG,EAAE;QAC1CN,SAAS,EAAErC,IAAI,CAAC+B,KAAK,CAAC,CAAC,CAAC,GAAG/B,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,GAAG;MACxD,CAAC,CAAC;IACJ;IAEA,OAAOtB,WAAW;EACpB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEY,2BAA2BA,CAACjC,GAAG,EAAEC,GAAG,EAAEkD,KAAK,EAAE;IAC3C;IACA,IAAInD,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,IAAI,IAAIC,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE;MACzD,MAAM+B,QAAQ,GAAG,EAAE,CAAC,CAAC;MACrB,MAAME,iBAAiB,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAACgB,KAAK,GAAG,CAAC,IAAIxC,IAAI,CAACyB,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;MACnE,OAAOJ,QAAQ,GAAGE,iBAAiB;IACrC;;IAEA;IACA,MAAMsB,cAAc,GAAG7C,IAAI,CAAC8C,GAAG,CAACzD,GAAG,GAAGW,IAAI,CAACyB,EAAE,GAAG,GAAG,CAAC;IACpD,MAAMJ,QAAQ,GAAG,EAAE,GAAGwB,cAAc,GAAG,EAAE;IACzC,MAAMtB,iBAAiB,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAACgB,KAAK,GAAG,CAAC,IAAIxC,IAAI,CAACyB,EAAE,GAAG,CAAC,CAAC,IAAIpC,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;IAEvF,OAAOgC,QAAQ,GAAGE,iBAAiB;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,6BAA6BA,CAAC/C,GAAG,EAAEC,GAAG,EAAEkD,KAAK,EAAE;IAC7C;IACA,IAAInD,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,IAAI,IAAIC,GAAG,IAAI,GAAG,IAAIA,GAAG,IAAI,GAAG,EAAE;MACzD;MACA,MAAMyD,WAAW,GAAGP,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,EAAE;MAC7C,OAAOO,WAAW,GAAG,EAAE,GAAG/C,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAGhC,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,CAAC;IACtE;;IAEA;IACA,MAAMgB,cAAc,GAAGhD,IAAI,CAACiD,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGjD,IAAI,CAACC,GAAG,CAACZ,GAAG,CAAC,GAAG,EAAE,CAAC;IAC1D,MAAMsD,UAAU,GAAG,CAAC,GAAGK,cAAc,GAAG,EAAE;IAC1C,MAAMzB,iBAAiB,GAAGvB,IAAI,CAACwB,GAAG,CAAC,CAACgB,KAAK,GAAG,CAAC,IAAIxC,IAAI,CAACyB,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE;IAElE,OAAOzB,IAAI,CAACiD,GAAG,CAAC,CAAC,EAAEN,UAAU,GAAGpB,iBAAiB,GAAGvB,IAAI,CAACgC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;EACzE;;EAEA;AACF;AACA;AACA;EACEkB,mBAAmBA,CAAA,EAAG;IACpB,OAAO,CAAC,EAAE,IAAI,CAAClE,QAAQ,IAAI,IAAI,CAACC,QAAQ,IAAI,IAAI,CAACC,IAAI,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACEiE,YAAYA,CAAA,EAAG;IACb,OAAO;MACLC,OAAO,EAAE,yBAAyB;MAClCC,cAAc,EAAE,IAAI,CAACH,mBAAmB,CAAC,CAAC;MAC1ClE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBD,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBuE,WAAW,EAAE,IAAI;MAAE;MACnBC,cAAc,EAAE;IAClB,CAAC;EACH;AACF;AAEA,eAAe1E,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}