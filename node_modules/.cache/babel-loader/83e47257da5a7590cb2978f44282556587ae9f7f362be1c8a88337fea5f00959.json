{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\errors\\\\src\\\\components\\\\WeatherMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport GIBSService from '../services/api/gibsService';\n\n// Fix for default markers in React-Leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst WeatherMap = ({\n  coordinates,\n  onLocationSelect\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const gibsService = useRef(new GIBSService());\n  const [selectedLayer, setSelectedLayer] = useState('trueColor');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // Initialize map\n    const map = L.map(mapRef.current).setView([coordinates.lat, coordinates.lon], 10);\n    mapInstanceRef.current = map;\n\n    // Add tile layer\n    // Add base map layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Â© OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Add initial GIBS layer\n    const layer = gibsService.current.weatherLayers[selectedLayer];\n    if (layer) {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      gibs.getTileUrl = coords => {\n        const date = new Date().toISOString().split('T')[0];\n        return gibsService.current.buildTileUrl(layer.id, date, coords.z, coords.x, coords.y);\n      };\n      gibs.addTo(map);\n      overlayRef.current = gibs;\n    }\n\n    // Add marker\n    const marker = L.marker([coordinates.lat, coordinates.lon]).addTo(map).bindPopup(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    markerRef.current = marker;\n\n    // Add click handler\n    map.on('click', e => {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n\n      // Update marker position\n      if (markerRef.current) {\n        markerRef.current.setLatLng([lat, lng]);\n        markerRef.current.setPopupContent(`\n          <div class=\"text-center\">\n            <strong>Selected Location</strong><br/>\n            Lat: ${lat.toFixed(4)}<br/>\n            Lon: ${lng.toFixed(4)}\n          </div>\n        `);\n      }\n\n      // Call callback\n      if (onLocationSelect) {\n        onLocationSelect(lat, lng);\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update marker when coordinates change\n  useEffect(() => {\n    if (mapInstanceRef.current && markerRef.current && coordinates.lat && coordinates.lon) {\n      const newLatLng = [coordinates.lat, coordinates.lon];\n      markerRef.current.setLatLng(newLatLng);\n      mapInstanceRef.current.setView(newLatLng, 10);\n      markerRef.current.setPopupContent(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    }\n  }, [coordinates]);\n\n  // Update layer when selected layer changes\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      updateGibsLayer(selectedLayer);\n    }\n  }, [selectedLayer]);\n\n  // Function to update the GIBS layer\n  const updateGibsLayer = layerId => {\n    if (!mapInstanceRef.current) return;\n\n    // Remove existing overlay\n    if (overlayRef.current) {\n      mapInstanceRef.current.removeLayer(overlayRef.current);\n    }\n\n    // Add new overlay\n    const layer = gibsService.current.weatherLayers[layerId];\n    if (layer) {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      gibs.getTileUrl = coords => {\n        const date = new Date().toISOString().split('T')[0];\n        return gibsService.current.buildTileUrl(layer.id, date, coords.z, coords.x, coords.y);\n      };\n      gibs.addTo(mapInstanceRef.current);\n      overlayRef.current = gibs;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"w-full h-96 rounded-lg border border-gray-200\",\n      style: {\n        minHeight: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600 mb-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Click on the map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), \" to select a new location\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs text-gray-500\",\n        children: [\"Current: \", coordinates.lat.toFixed(4), \", \", coordinates.lon.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 right-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm font-semibold mb-2\",\n        children: \"NASA GIBS Layers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"w-full p-2 border rounded\",\n        value: selectedLayer,\n        onChange: e => {\n          setSelectedLayer(e.target.value);\n          updateGibsLayer(e.target.value);\n        },\n        children: Object.entries(gibsService.current.weatherLayers).map(([key, layer]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: layer.title\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherMap, \"dVzU7nmHeddTR0tesXSxcUMebrs=\");\n_c = WeatherMap;\nexport default WeatherMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","GIBSService","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","WeatherMap","coordinates","onLocationSelect","_s","mapRef","mapInstanceRef","markerRef","overlayRef","gibsService","selectedLayer","setSelectedLayer","error","setError","isLoading","setIsLoading","current","map","setView","lat","lon","tileLayer","attribution","addTo","layer","weatherLayers","gibs","maxZoom","opacity","getTileUrl","coords","date","Date","toISOString","split","buildTileUrl","id","z","x","y","marker","bindPopup","toFixed","on","e","lng","latlng","setLatLng","setPopupContent","remove","newLatLng","updateGibsLayer","layerId","removeLayer","className","children","ref","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","Object","entries","key","title","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/errors/src/components/WeatherMap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport GIBSService from '../services/api/gibsService';\n\n// Fix for default markers in React-Leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nconst WeatherMap = ({ coordinates, onLocationSelect }) => {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const gibsService = useRef(new GIBSService());\n  const [selectedLayer, setSelectedLayer] = useState('trueColor');\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // Initialize map\n    const map = L.map(mapRef.current).setView([coordinates.lat, coordinates.lon], 10);\n    mapInstanceRef.current = map;\n\n    // Add tile layer\n    // Add base map layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Â© OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Add initial GIBS layer\n    const layer = gibsService.current.weatherLayers[selectedLayer];\n    if (layer) {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      \n      gibs.getTileUrl = (coords) => {\n        const date = new Date().toISOString().split('T')[0];\n        return gibsService.current.buildTileUrl(layer.id, date, coords.z, coords.x, coords.y);\n      };\n      \n      gibs.addTo(map);\n      overlayRef.current = gibs;\n    }\n\n    // Add marker\n    const marker = L.marker([coordinates.lat, coordinates.lon])\n      .addTo(map)\n      .bindPopup(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    \n    markerRef.current = marker;\n\n    // Add click handler\n    map.on('click', (e) => {\n      const { lat, lng } = e.latlng;\n      \n      // Update marker position\n      if (markerRef.current) {\n        markerRef.current.setLatLng([lat, lng]);\n        markerRef.current.setPopupContent(`\n          <div class=\"text-center\">\n            <strong>Selected Location</strong><br/>\n            Lat: ${lat.toFixed(4)}<br/>\n            Lon: ${lng.toFixed(4)}\n          </div>\n        `);\n      }\n      \n      // Call callback\n      if (onLocationSelect) {\n        onLocationSelect(lat, lng);\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update marker when coordinates change\n  useEffect(() => {\n    if (mapInstanceRef.current && markerRef.current && coordinates.lat && coordinates.lon) {\n      const newLatLng = [coordinates.lat, coordinates.lon];\n      markerRef.current.setLatLng(newLatLng);\n      mapInstanceRef.current.setView(newLatLng, 10);\n      \n      markerRef.current.setPopupContent(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    }\n  }, [coordinates]);\n\n  // Update layer when selected layer changes\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      updateGibsLayer(selectedLayer);\n    }\n  }, [selectedLayer]);\n\n  // Function to update the GIBS layer\n  const updateGibsLayer = (layerId) => {\n    if (!mapInstanceRef.current) return;\n    \n    // Remove existing overlay\n    if (overlayRef.current) {\n      mapInstanceRef.current.removeLayer(overlayRef.current);\n    }\n\n    // Add new overlay\n    const layer = gibsService.current.weatherLayers[layerId];\n    if (layer) {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      \n      gibs.getTileUrl = (coords) => {\n        const date = new Date().toISOString().split('T')[0];\n        return gibsService.current.buildTileUrl(layer.id, date, coords.z, coords.x, coords.y);\n      };\n      \n      gibs.addTo(mapInstanceRef.current);\n      overlayRef.current = gibs;\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <div \n        ref={mapRef} \n        className=\"w-full h-96 rounded-lg border border-gray-200\"\n        style={{ minHeight: '400px' }}\n      />\n      \n      <div className=\"absolute top-4 left-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\">\n        <p className=\"text-sm text-gray-600 mb-1\">\n          <strong>Click on the map</strong> to select a new location\n        </p>\n        <p className=\"text-xs text-gray-500\">\n          Current: {coordinates.lat.toFixed(4)}, {coordinates.lon.toFixed(4)}\n        </p>\n      </div>\n\n      <div className=\"absolute top-4 right-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\">\n        <p className=\"text-sm font-semibold mb-2\">NASA GIBS Layers</p>\n        <select \n          className=\"w-full p-2 border rounded\"\n          value={selectedLayer}\n          onChange={(e) => {\n            setSelectedLayer(e.target.value);\n            updateGibsLayer(e.target.value);\n          }}\n        >\n          {Object.entries(gibsService.current.weatherLayers).map(([key, layer]) => (\n            <option key={key} value={key}>\n              {layer.title}\n            </option>\n          ))}\n        </select>\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}