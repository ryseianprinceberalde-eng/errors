{"ast":null,"code":"import BaseApiService from './baseApiService';\nimport axios from 'axios';\n\n/**\r\n * NASA DONKI (Database Of Notifications, Knowledge, Information) Service\r\n * Comprehensive space weather monitoring and analysis\r\n */\nclass DonkiService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n    this.apiKey = 'TjeBRNWqUZi2KSi6BxOrgLMS3wMdt9l2MheVuipo';\n\n    // Event types mapping\n    this.eventTypes = {\n      CME: 'Coronal Mass Ejection',\n      GST: 'Geomagnetic Storm',\n      IPS: 'Interplanetary Shock',\n      FLR: 'Solar Flare',\n      SEP: 'Solar Energetic Particle',\n      MPC: 'Magnetopause Crossing',\n      RBE: 'Radiation Belt Enhancement',\n      HSS: 'High Speed Stream'\n    };\n  }\n\n  /**\r\n   * Fetch comprehensive space weather data\r\n   * @param {string} startDate - Start date (YYYY-MM-DD)\r\n   * @param {string} endDate - End date (YYYY-MM-DD)\r\n   * @returns {Promise<Object>} Consolidated space weather data\r\n   */\n  async getSpaceWeatherData(startDate, endDate) {\n    try {\n      const [cmeData, gstData, flareData, sepData, hssData] = await Promise.all([this.getCMEData(startDate, endDate), this.getGeomagneticStorms(startDate, endDate), this.getSolarFlares(startDate, endDate), this.getSolarEnergeticParticles(startDate, endDate), this.getHighSpeedStreams(startDate, endDate)]);\n      return this.consolidateData({\n        cme: cmeData,\n        gst: gstData,\n        flare: flareData,\n        sep: sepData,\n        hss: hssData\n      });\n    } catch (error) {\n      console.error('Error fetching space weather data:', error);\n      return null;\n    }\n  }\n\n  /**\r\n   * Get Coronal Mass Ejection (CME) data\r\n   */\n  async getCMEData(startDate, endDate) {\n    const url = `${this.baseUrl}/CME`;\n    return this.fetchData(url, {\n      startDate,\n      endDate\n    });\n  }\n\n  /**\r\n   * Get Geomagnetic Storm (GST) data\r\n   */\n  async getGeomagneticStorms(startDate, endDate) {\n    const url = `${this.baseUrl}/GST`;\n    return this.fetchData(url, {\n      startDate,\n      endDate\n    });\n  }\n\n  /**\r\n   * Get Solar Flare (FLR) data\r\n   */\n  async getSolarFlares(startDate, endDate) {\n    const url = `${this.baseUrl}/FLR`;\n    return this.fetchData(url, {\n      startDate,\n      endDate\n    });\n  }\n\n  /**\r\n   * Get Solar Energetic Particle (SEP) data\r\n   */\n  async getSolarEnergeticParticles(startDate, endDate) {\n    const url = `${this.baseUrl}/SEP`;\n    return this.fetchData(url, {\n      startDate,\n      endDate\n    });\n  }\n\n  /**\r\n   * Get High Speed Stream (HSS) data\r\n   */\n  async getHighSpeedStreams(startDate, endDate) {\n    const url = `${this.baseUrl}/HSS`;\n    return this.fetchData(url, {\n      startDate,\n      endDate\n    });\n  }\n\n  /**\r\n   * Get detailed CME analysis\r\n   */\n  async getCMEAnalysis(startDate, endDate, options = {}) {\n    const url = `${this.baseUrl}/CMEAnalysis`;\n    const params = {\n      startDate,\n      endDate,\n      mostAccurateOnly: options.mostAccurateOnly || true,\n      speed: options.speed || 500,\n      halfAngle: options.halfAngle || 30,\n      catalog: options.catalog || 'ALL'\n    };\n    return this.fetchData(url, params);\n  }\n\n  /**\r\n   * Get space weather notifications\r\n   */\n  async getNotifications(startDate, endDate, type = 'all') {\n    const url = `${this.baseUrl}/notifications`;\n    return this.fetchData(url, {\n      startDate,\n      endDate,\n      type\n    });\n  }\n\n  /**\r\n   * Fetch data from DONKI API\r\n   * @private\r\n   */\n  async fetchData(url, params) {\n    try {\n      const response = await axios.get(url, {\n        params: {\n          ...params,\n          api_key: this.apiKey\n        },\n        timeout: 30000\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching from ${url}:`, error.message);\n      return null;\n    }\n  }\n\n  /**\r\n   * Consolidate data from different sources\r\n   * @private\r\n   */\n  consolidateData(data) {\n    var _data$cme, _data$gst, _data$flare, _data$sep, _data$hss;\n    const eventCounts = {\n      cme: ((_data$cme = data.cme) === null || _data$cme === void 0 ? void 0 : _data$cme.length) || 0,\n      gst: ((_data$gst = data.gst) === null || _data$gst === void 0 ? void 0 : _data$gst.length) || 0,\n      flare: ((_data$flare = data.flare) === null || _data$flare === void 0 ? void 0 : _data$flare.length) || 0,\n      sep: ((_data$sep = data.sep) === null || _data$sep === void 0 ? void 0 : _data$sep.length) || 0,\n      hss: ((_data$hss = data.hss) === null || _data$hss === void 0 ? void 0 : _data$hss.length) || 0\n    };\n    const activityLevel = this.calculateActivityLevel(eventCounts);\n    const impacts = this.analyzeImpacts(data);\n    return {\n      events: {\n        ...data,\n        totalEvents: Object.values(eventCounts).reduce((a, b) => a + b, 0)\n      },\n      summary: {\n        activityLevel,\n        eventCounts,\n        impacts\n      },\n      warnings: this.generateWarnings(data)\n    };\n  }\n\n  /**\r\n   * Calculate overall space weather activity level\r\n   * @private\r\n   */\n  calculateActivityLevel(counts) {\n    const total = Object.values(counts).reduce((a, b) => a + b, 0);\n    if (total === 0) return 'Quiet';\n    if (total <= 2) return 'Low';\n    if (total <= 5) return 'Moderate';\n    if (total <= 10) return 'Active';\n    return 'Severe';\n  }\n\n  /**\r\n   * Analyze potential impacts of space weather events\r\n   * @private\r\n   */\n  analyzeImpacts(data) {\n    const impacts = {\n      radio: false,\n      satellite: false,\n      gps: false,\n      power: false\n    };\n    if (data.gst && data.gst.length > 0) {\n      impacts.power = true;\n      impacts.satellite = true;\n    }\n    if (data.flare && data.flare.length > 0) {\n      impacts.radio = true;\n      impacts.gps = true;\n    }\n    return impacts;\n  }\n\n  /**\r\n   * Generate warnings based on event data\r\n   * @private\r\n   */\n  generateWarnings(data) {\n    const warnings = [];\n    if (data.gst && data.gst.some(storm => storm.kpIndex >= 7)) {\n      warnings.push('Severe geomagnetic storm conditions detected');\n    }\n    if (data.flare && data.flare.some(flare => flare.classType.startsWith('X'))) {\n      warnings.push('X-class solar flare detected');\n    }\n    if (data.cme && data.cme.length > 2) {\n      warnings.push('Multiple CMEs detected - enhanced space weather activity');\n    }\n    return warnings;\n  }\n}\nexport default new DonkiService();","map":{"version":3,"names":["BaseApiService","axios","DonkiService","constructor","baseUrl","apiKey","eventTypes","CME","GST","IPS","FLR","SEP","MPC","RBE","HSS","getSpaceWeatherData","startDate","endDate","cmeData","gstData","flareData","sepData","hssData","Promise","all","getCMEData","getGeomagneticStorms","getSolarFlares","getSolarEnergeticParticles","getHighSpeedStreams","consolidateData","cme","gst","flare","sep","hss","error","console","url","fetchData","getCMEAnalysis","options","params","mostAccurateOnly","speed","halfAngle","catalog","getNotifications","type","response","get","api_key","timeout","data","message","_data$cme","_data$gst","_data$flare","_data$sep","_data$hss","eventCounts","length","activityLevel","calculateActivityLevel","impacts","analyzeImpacts","events","totalEvents","Object","values","reduce","a","b","summary","warnings","generateWarnings","counts","total","radio","satellite","gps","power","some","storm","kpIndex","push","classType","startsWith"],"sources":["C:/xampp/htdocs/errors/src/services/api/donkiService.js"],"sourcesContent":["import BaseApiService from './baseApiService';\r\nimport axios from 'axios';\r\n\r\n/**\r\n * NASA DONKI (Database Of Notifications, Knowledge, Information) Service\r\n * Comprehensive space weather monitoring and analysis\r\n */\r\nclass DonkiService extends BaseApiService {\r\n  constructor() {\r\n    super();\r\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\r\n    this.apiKey = 'TjeBRNWqUZi2KSi6BxOrgLMS3wMdt9l2MheVuipo';\r\n    \r\n    // Event types mapping\r\n    this.eventTypes = {\r\n      CME: 'Coronal Mass Ejection',\r\n      GST: 'Geomagnetic Storm',\r\n      IPS: 'Interplanetary Shock',\r\n      FLR: 'Solar Flare',\r\n      SEP: 'Solar Energetic Particle',\r\n      MPC: 'Magnetopause Crossing',\r\n      RBE: 'Radiation Belt Enhancement',\r\n      HSS: 'High Speed Stream'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fetch comprehensive space weather data\r\n   * @param {string} startDate - Start date (YYYY-MM-DD)\r\n   * @param {string} endDate - End date (YYYY-MM-DD)\r\n   * @returns {Promise<Object>} Consolidated space weather data\r\n   */\r\n  async getSpaceWeatherData(startDate, endDate) {\r\n    try {\r\n      const [\r\n        cmeData,\r\n        gstData,\r\n        flareData,\r\n        sepData,\r\n        hssData\r\n      ] = await Promise.all([\r\n        this.getCMEData(startDate, endDate),\r\n        this.getGeomagneticStorms(startDate, endDate),\r\n        this.getSolarFlares(startDate, endDate),\r\n        this.getSolarEnergeticParticles(startDate, endDate),\r\n        this.getHighSpeedStreams(startDate, endDate)\r\n      ]);\r\n\r\n      return this.consolidateData({\r\n        cme: cmeData,\r\n        gst: gstData,\r\n        flare: flareData,\r\n        sep: sepData,\r\n        hss: hssData\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching space weather data:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Coronal Mass Ejection (CME) data\r\n   */\r\n  async getCMEData(startDate, endDate) {\r\n    const url = `${this.baseUrl}/CME`;\r\n    return this.fetchData(url, { startDate, endDate });\r\n  }\r\n\r\n  /**\r\n   * Get Geomagnetic Storm (GST) data\r\n   */\r\n  async getGeomagneticStorms(startDate, endDate) {\r\n    const url = `${this.baseUrl}/GST`;\r\n    return this.fetchData(url, { startDate, endDate });\r\n  }\r\n\r\n  /**\r\n   * Get Solar Flare (FLR) data\r\n   */\r\n  async getSolarFlares(startDate, endDate) {\r\n    const url = `${this.baseUrl}/FLR`;\r\n    return this.fetchData(url, { startDate, endDate });\r\n  }\r\n\r\n  /**\r\n   * Get Solar Energetic Particle (SEP) data\r\n   */\r\n  async getSolarEnergeticParticles(startDate, endDate) {\r\n    const url = `${this.baseUrl}/SEP`;\r\n    return this.fetchData(url, { startDate, endDate });\r\n  }\r\n\r\n  /**\r\n   * Get High Speed Stream (HSS) data\r\n   */\r\n  async getHighSpeedStreams(startDate, endDate) {\r\n    const url = `${this.baseUrl}/HSS`;\r\n    return this.fetchData(url, { startDate, endDate });\r\n  }\r\n\r\n  /**\r\n   * Get detailed CME analysis\r\n   */\r\n  async getCMEAnalysis(startDate, endDate, options = {}) {\r\n    const url = `${this.baseUrl}/CMEAnalysis`;\r\n    const params = {\r\n      startDate,\r\n      endDate,\r\n      mostAccurateOnly: options.mostAccurateOnly || true,\r\n      speed: options.speed || 500,\r\n      halfAngle: options.halfAngle || 30,\r\n      catalog: options.catalog || 'ALL'\r\n    };\r\n    return this.fetchData(url, params);\r\n  }\r\n\r\n  /**\r\n   * Get space weather notifications\r\n   */\r\n  async getNotifications(startDate, endDate, type = 'all') {\r\n    const url = `${this.baseUrl}/notifications`;\r\n    return this.fetchData(url, { startDate, endDate, type });\r\n  }\r\n\r\n  /**\r\n   * Fetch data from DONKI API\r\n   * @private\r\n   */\r\n  async fetchData(url, params) {\r\n    try {\r\n      const response = await axios.get(url, {\r\n        params: {\r\n          ...params,\r\n          api_key: this.apiKey\r\n        },\r\n        timeout: 30000\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error(`Error fetching from ${url}:`, error.message);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Consolidate data from different sources\r\n   * @private\r\n   */\r\n  consolidateData(data) {\r\n    const eventCounts = {\r\n      cme: data.cme?.length || 0,\r\n      gst: data.gst?.length || 0,\r\n      flare: data.flare?.length || 0,\r\n      sep: data.sep?.length || 0,\r\n      hss: data.hss?.length || 0\r\n    };\r\n\r\n    const activityLevel = this.calculateActivityLevel(eventCounts);\r\n    const impacts = this.analyzeImpacts(data);\r\n\r\n    return {\r\n      events: {\r\n        ...data,\r\n        totalEvents: Object.values(eventCounts).reduce((a, b) => a + b, 0)\r\n      },\r\n      summary: {\r\n        activityLevel,\r\n        eventCounts,\r\n        impacts\r\n      },\r\n      warnings: this.generateWarnings(data)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate overall space weather activity level\r\n   * @private\r\n   */\r\n  calculateActivityLevel(counts) {\r\n    const total = Object.values(counts).reduce((a, b) => a + b, 0);\r\n    if (total === 0) return 'Quiet';\r\n    if (total <= 2) return 'Low';\r\n    if (total <= 5) return 'Moderate';\r\n    if (total <= 10) return 'Active';\r\n    return 'Severe';\r\n  }\r\n\r\n  /**\r\n   * Analyze potential impacts of space weather events\r\n   * @private\r\n   */\r\n  analyzeImpacts(data) {\r\n    const impacts = {\r\n      radio: false,\r\n      satellite: false,\r\n      gps: false,\r\n      power: false\r\n    };\r\n\r\n    if (data.gst && data.gst.length > 0) {\r\n      impacts.power = true;\r\n      impacts.satellite = true;\r\n    }\r\n\r\n    if (data.flare && data.flare.length > 0) {\r\n      impacts.radio = true;\r\n      impacts.gps = true;\r\n    }\r\n\r\n    return impacts;\r\n  }\r\n\r\n  /**\r\n   * Generate warnings based on event data\r\n   * @private\r\n   */\r\n  generateWarnings(data) {\r\n    const warnings = [];\r\n\r\n    if (data.gst && data.gst.some(storm => storm.kpIndex >= 7)) {\r\n      warnings.push('Severe geomagnetic storm conditions detected');\r\n    }\r\n\r\n    if (data.flare && data.flare.some(flare => flare.classType.startsWith('X'))) {\r\n      warnings.push('X-class solar flare detected');\r\n    }\r\n\r\n    if (data.cme && data.cme.length > 2) {\r\n      warnings.push('Multiple CMEs detected - enhanced space weather activity');\r\n    }\r\n\r\n    return warnings;\r\n  }\r\n}\r\n\r\nexport default new DonkiService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}