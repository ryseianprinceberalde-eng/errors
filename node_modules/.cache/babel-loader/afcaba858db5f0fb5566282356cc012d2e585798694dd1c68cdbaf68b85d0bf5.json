{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Base API Service class with common functionality\n */\nclass BaseApiService {\n  constructor() {\n    this.defaultTimeout = 30000; // Increased timeout\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    this.maxRetries = 3;\n    this.retryDelay = 2000; // 2 seconds between retries\n  }\n\n  /**\n   * Make HTTP GET request with error handling\n   * @param {string} url - API endpoint URL\n   * @param {object} options - Request options\n   * @returns {Promise} Response data\n   */\n  async get(url, options = {}) {\n    const retries = options.retries || this.maxRetries;\n    let lastError;\n    for (let attempt = 0; attempt < retries; attempt++) {\n      try {\n        const config = {\n          timeout: options.timeout || this.defaultTimeout,\n          headers: {\n            ...this.defaultHeaders,\n            ...options.headers\n          },\n          ...options\n        };\n\n        // Add cache-busting parameter for NASA APIs\n        const urlWithCache = url.includes('?') ? `${url}&_t=${Date.now()}` : `${url}?_t=${Date.now()}`;\n        if (attempt > 0) {\n          console.log(`Retry attempt ${attempt + 1} for ${url}`);\n        }\n        const response = await axios.get(urlWithCache, config);\n        return response.data;\n      } catch (error) {\n        lastError = error;\n\n        // Don't retry on certain errors\n        if (error.response && [400, 401, 403, 404].includes(error.response.status)) {\n          this.handleError(error, url);\n          throw error;\n        }\n\n        // On last attempt, throw the error\n        if (attempt === retries - 1) {\n          this.handleError(error, url);\n          throw error;\n        }\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, this.retryDelay * (attempt + 1)));\n      }\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   * @param {Error} error - The error object\n   * @param {string} url - The URL that failed\n   */\n  handleError(error, url) {\n    if (error.response) {\n      console.error(`API Error (${error.response.status}):`, error.response.data);\n    } else if (error.request) {\n      console.error('Network Error:', error.message);\n    } else {\n      console.error('Request Error:', error.message);\n    }\n    console.error(`Failed URL: ${url}`);\n  }\n\n  /**\n   * Format date to ISO string\n   * @param {Date|string} date - Date to format\n   * @returns {string} ISO date string\n   */\n  formatDate(date) {\n    return new Date(date).toISOString().split('T')[0];\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Base date\n   * @param {number} days - Number of days to add\n   * @returns {Date} New date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Check if coordinates are valid\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} True if valid\n   */\n  isValidCoordinates(lat, lon) {\n    return typeof lat === 'number' && typeof lon === 'number' && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n}\nexport default BaseApiService;","map":{"version":3,"names":["axios","BaseApiService","constructor","defaultTimeout","defaultHeaders","maxRetries","retryDelay","get","url","options","retries","lastError","attempt","config","timeout","headers","urlWithCache","includes","Date","now","console","log","response","data","error","status","handleError","Promise","resolve","setTimeout","request","message","formatDate","date","toISOString","split","addDays","days","result","setDate","getDate","isValidCoordinates","lat","lon"],"sources":["C:/xampp/htdocs/errors/src/services/api/baseApiService.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Base API Service class with common functionality\n */\nclass BaseApiService {\n  constructor() {\n    this.defaultTimeout = 30000; // Increased timeout\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n    this.maxRetries = 3;\n    this.retryDelay = 2000; // 2 seconds between retries\n  }\n\n  /**\n   * Make HTTP GET request with error handling\n   * @param {string} url - API endpoint URL\n   * @param {object} options - Request options\n   * @returns {Promise} Response data\n   */\n  async get(url, options = {}) {\n    const retries = options.retries || this.maxRetries;\n    let lastError;\n\n    for (let attempt = 0; attempt < retries; attempt++) {\n      try {\n        const config = {\n          timeout: options.timeout || this.defaultTimeout,\n          headers: { ...this.defaultHeaders, ...options.headers },\n          ...options\n        };\n\n        // Add cache-busting parameter for NASA APIs\n        const urlWithCache = url.includes('?') \n          ? `${url}&_t=${Date.now()}` \n          : `${url}?_t=${Date.now()}`;\n\n        if (attempt > 0) {\n          console.log(`Retry attempt ${attempt + 1} for ${url}`);\n        }\n\n        const response = await axios.get(urlWithCache, config);\n        return response.data;\n      } catch (error) {\n        lastError = error;\n        \n        // Don't retry on certain errors\n        if (error.response && [400, 401, 403, 404].includes(error.response.status)) {\n          this.handleError(error, url);\n          throw error;\n        }\n\n        // On last attempt, throw the error\n        if (attempt === retries - 1) {\n          this.handleError(error, url);\n          throw error;\n        }\n\n        // Wait before retrying\n        await new Promise(resolve => setTimeout(resolve, this.retryDelay * (attempt + 1)));\n      }\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   * @param {Error} error - The error object\n   * @param {string} url - The URL that failed\n   */\n  handleError(error, url) {\n    if (error.response) {\n      console.error(`API Error (${error.response.status}):`, error.response.data);\n    } else if (error.request) {\n      console.error('Network Error:', error.message);\n    } else {\n      console.error('Request Error:', error.message);\n    }\n    console.error(`Failed URL: ${url}`);\n  }\n\n  /**\n   * Format date to ISO string\n   * @param {Date|string} date - Date to format\n   * @returns {string} ISO date string\n   */\n  formatDate(date) {\n    return new Date(date).toISOString().split('T')[0];\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Base date\n   * @param {number} days - Number of days to add\n   * @returns {Date} New date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Check if coordinates are valid\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} True if valid\n   */\n  isValidCoordinates(lat, lon) {\n    return (\n      typeof lat === 'number' && \n      typeof lon === 'number' &&\n      lat >= -90 && lat <= 90 &&\n      lon >= -180 && lon <= 180\n    );\n  }\n}\n\nexport default BaseApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}