{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n\n      // Split the request into smaller date ranges\n      const dateChunks = this.splitDateRange(startDate, endDate, 3); // Split into 3-day chunks\n      const allData = [];\n      for (const {\n        start,\n        end\n      } of dateChunks) {\n        const startStr = this.formatDate(start);\n        const endStr = this.formatDate(end);\n        const url = `${this.baseUrl}/CME?startDate=${startStr}&endDate=${endStr}&api_key=${this.apiKey}`;\n        console.log(`Fetching NASA DONKI space weather data for ${startStr} to ${endStr}...`);\n        const data = await this.get(url, {\n          timeout: 30000,\n          retries: 3\n        });\n        if (data && Array.isArray(data)) {\n          allData.push(...data);\n        }\n      }\n      const data = allData;\n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3),\n      // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    const descriptions = ['Coronal Mass Ejection activity may influence upper atmospheric conditions.', 'Space weather events could affect radio communications and satellite operations.', 'Solar activity detected - potential minor effects on weather patterns.', 'Geomagnetic disturbances possible due to solar wind interactions.'];\n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Split a date range into smaller chunks\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   * @param {number} chunkSize - Size of each chunk in days\n   * @returns {Array<Object>} Array of date ranges\n   */\n  splitDateRange(startDate, endDate, chunkSize) {\n    const chunks = [];\n    let currentStart = new Date(startDate);\n    while (currentStart < endDate) {\n      const chunkEnd = new Date(currentStart);\n      chunkEnd.setDate(chunkEnd.getDate() + chunkSize);\n\n      // Make sure we don't exceed the end date\n      const end = chunkEnd > endDate ? endDate : chunkEnd;\n      chunks.push({\n        start: new Date(currentStart),\n        end: new Date(end)\n      });\n      currentStart = this.addDays(end, 1);\n    }\n    return chunks;\n  }\n}\nexport default SpaceWeatherService;","map":{"version":3,"names":["BaseApiService","SpaceWeatherService","constructor","apiKey","baseUrl","fetchSpaceWeatherData","targetDate","dayRange","startDate","addDays","endDate","startDateStr","formatDate","endDateStr","dateChunks","splitDateRange","allData","start","end","startStr","endStr","url","console","log","data","get","timeout","retries","Array","isArray","push","length","processSpaceWeatherData","generateDefaultSpaceWeatherData","error","warn","message","cmeData","events","map","event","activityID","startTime","sourceLocation","note","linkedEvents","cmeAnalyses","hasEvents","eventCount","slice","impactLevel","calculateSpaceWeatherImpact","description","getSpaceWeatherDescription","descriptions","Math","min","date","days","result","Date","setDate","getDate","chunkSize","chunks","currentStart","chunkEnd"],"sources":["C:/xampp/htdocs/errors/src/services/api/spaceWeatherService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      \n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n      \n      // Split the request into smaller date ranges\n      const dateChunks = this.splitDateRange(startDate, endDate, 3); // Split into 3-day chunks\n      const allData = [];\n\n      for (const { start, end } of dateChunks) {\n        const startStr = this.formatDate(start);\n        const endStr = this.formatDate(end);\n        \n        const url = `${this.baseUrl}/CME?startDate=${startStr}&endDate=${endStr}&api_key=${this.apiKey}`;\n        \n        console.log(`Fetching NASA DONKI space weather data for ${startStr} to ${endStr}...`);\n        const data = await this.get(url, { \n          timeout: 30000,\n          retries: 3\n        });\n        \n        if (data && Array.isArray(data)) {\n          allData.push(...data);\n        }\n      }\n\n      const data = allData;\n      \n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3), // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    \n    const descriptions = [\n      'Coronal Mass Ejection activity may influence upper atmospheric conditions.',\n      'Space weather events could affect radio communications and satellite operations.',\n      'Solar activity detected - potential minor effects on weather patterns.',\n      'Geomagnetic disturbances possible due to solar wind interactions.'\n    ];\n    \n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Input date\n   * @param {number} days - Number of days to add\n   * @returns {Date} Resulting date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Split a date range into smaller chunks\n   * @param {Date} startDate - Start date\n   * @param {Date} endDate - End date\n   * @param {number} chunkSize - Size of each chunk in days\n   * @returns {Array<Object>} Array of date ranges\n   */\n  splitDateRange(startDate, endDate, chunkSize) {\n    const chunks = [];\n    let currentStart = new Date(startDate);\n\n    while (currentStart < endDate) {\n      const chunkEnd = new Date(currentStart);\n      chunkEnd.setDate(chunkEnd.getDate() + chunkSize);\n\n      // Make sure we don't exceed the end date\n      const end = chunkEnd > endDate ? endDate : chunkEnd;\n\n      chunks.push({\n        start: new Date(currentStart),\n        end: new Date(end)\n      });\n\n      currentStart = this.addDays(end, 1);\n    }\n\n    return chunks;\n  }\n}\n\nexport default SpaceWeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}