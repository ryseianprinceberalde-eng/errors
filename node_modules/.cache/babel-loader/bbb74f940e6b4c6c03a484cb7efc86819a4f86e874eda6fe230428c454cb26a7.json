{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\errors\\\\src\\\\components\\\\WeatherMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport GIBSService from '../services/api/gibsService.js';\n\n// Fix for default markers in React-Leaflet\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png'\n});\nconst WeatherMap = ({\n  coordinates,\n  onLocationSelect,\n  selectedLayer: propSelectedLayer,\n  activeTab\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const gibsService = useRef(new GIBSService());\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Use the prop selectedLayer if in monitoring mode, otherwise use default\n  const selectedLayer = activeTab === 'monitoring' ? propSelectedLayer : 'trueColor';\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // Initialize map\n    const map = L.map(mapRef.current).setView([coordinates.lat, coordinates.lon], 10);\n    mapInstanceRef.current = map;\n\n    // Add tile layer\n    // Add base map layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Â© OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Add initial GIBS layer\n    const layer = gibsService.current.weatherLayers[selectedLayer];\n    if (layer) {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const gibs = L.tileLayer('', {\n          attribution: 'NASA GIBS',\n          maxZoom: 8,\n          opacity: 0.7\n        });\n        gibs.getTileUrl = coords => {\n          try {\n            const date = new Date().toISOString().split('T')[0];\n            return gibsService.current.getTileUrl({\n              layer: layer.id,\n              tileMatrix: coords.z,\n              tileRow: coords.y,\n              tileCol: coords.x,\n              format: layer.format || 'image/png'\n            });\n          } catch (err) {\n            console.error('Error generating tile URL:', err);\n            setError('Failed to load weather layer. Please try again.');\n            return '';\n          }\n        };\n        gibs.addTo(map);\n        overlayRef.current = gibs;\n      } catch (err) {\n        console.error('Error setting up GIBS layer:', err);\n        setError('Failed to initialize weather layer. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    // Add marker\n    const marker = L.marker([coordinates.lat, coordinates.lon]).addTo(map).bindPopup(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    markerRef.current = marker;\n\n    // Add click handler\n    map.on('click', e => {\n      const {\n        lat,\n        lng\n      } = e.latlng;\n\n      // Update marker position\n      if (markerRef.current) {\n        markerRef.current.setLatLng([lat, lng]);\n        markerRef.current.setPopupContent(`\n          <div class=\"text-center\">\n            <strong>Selected Location</strong><br/>\n            Lat: ${lat.toFixed(4)}<br/>\n            Lon: ${lng.toFixed(4)}\n          </div>\n        `);\n      }\n\n      // Call callback\n      if (onLocationSelect) {\n        onLocationSelect(lat, lng);\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update marker when coordinates change\n  useEffect(() => {\n    if (mapInstanceRef.current && markerRef.current && coordinates.lat && coordinates.lon) {\n      const newLatLng = [coordinates.lat, coordinates.lon];\n      markerRef.current.setLatLng(newLatLng);\n      mapInstanceRef.current.setView(newLatLng, 10);\n      markerRef.current.setPopupContent(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    }\n  }, [coordinates]);\n\n  // Update layer when selected layer changes\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      updateGibsLayer(selectedLayer);\n    }\n  }, [selectedLayer]);\n\n  // Function to update the GIBS layer\n  const updateGibsLayer = layerId => {\n    if (!mapInstanceRef.current) return;\n\n    // Remove existing overlay\n    if (overlayRef.current) {\n      mapInstanceRef.current.removeLayer(overlayRef.current);\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      gibs.getTileUrl = coords => {\n        try {\n          const date = new Date().toISOString().split('T')[0];\n          return gibsService.current.getTileUrl({\n            layer: layerId,\n            // Use the layerId directly as it's already the full GIBS layer ID\n            tileMatrix: coords.z,\n            tileRow: coords.y,\n            tileCol: coords.x,\n            time: date,\n            format: 'image/png'\n          });\n        } catch (err) {\n          console.error('Error generating tile URL:', err);\n          setError('Failed to load environmental layer. Please try again.');\n          return '';\n        }\n      };\n      gibs.addTo(mapInstanceRef.current);\n      overlayRef.current = gibs;\n    } catch (err) {\n      console.error('Error setting up GIBS layer:', err);\n      setError('Failed to initialize environmental layer. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      className: \"w-full h-96 rounded-lg border border-gray-200\",\n      style: {\n        minHeight: '400px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: \"Loading layer data...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute bottom-4 left-4 right-4 bg-red-50 border border-red-200 rounded-lg p-3\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-red-700\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600 mb-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Click on the map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), \" to select a new location\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-xs text-gray-500\",\n        children: [\"Current: \", coordinates.lat.toFixed(4), \", \", coordinates.lon.toFixed(4)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 right-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm font-semibold mb-2\",\n        children: \"NASA GIBS Layers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        className: \"w-full p-2 border rounded\",\n        value: selectedLayer,\n        onChange: e => {\n          setSelectedLayer(e.target.value);\n          updateGibsLayer(e.target.value);\n        },\n        disabled: isLoading,\n        children: Object.entries(gibsService.current.weatherLayers).map(([key, layer]) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: key,\n          children: layer.title\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-500 mt-2\",\n        children: \"Loading weather layer...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-red-500 mt-2\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherMap, \"3pkAhjsAWJrQk80FIoW2xbvG1es=\");\n_c = WeatherMap;\nexport default WeatherMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","L","GIBSService","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","WeatherMap","coordinates","onLocationSelect","selectedLayer","propSelectedLayer","activeTab","_s","mapRef","mapInstanceRef","markerRef","overlayRef","gibsService","error","setError","isLoading","setIsLoading","current","map","setView","lat","lon","tileLayer","attribution","addTo","layer","weatherLayers","gibs","maxZoom","opacity","getTileUrl","coords","date","Date","toISOString","split","id","tileMatrix","z","tileRow","y","tileCol","x","format","err","console","marker","bindPopup","toFixed","on","e","lng","latlng","setLatLng","setPopupContent","remove","newLatLng","updateGibsLayer","layerId","removeLayer","time","className","children","ref","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","setSelectedLayer","target","disabled","Object","entries","key","title","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/errors/src/components/WeatherMap.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport GIBSService from '../services/api/gibsService.js';\n\n// Fix for default markers in React-Leaflet\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',\n  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',\n});\n\nconst WeatherMap = ({ coordinates, onLocationSelect, selectedLayer: propSelectedLayer, activeTab }) => {\n  const mapRef = useRef(null);\n  const mapInstanceRef = useRef(null);\n  const markerRef = useRef(null);\n  const overlayRef = useRef(null);\n  const gibsService = useRef(new GIBSService());\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Use the prop selectedLayer if in monitoring mode, otherwise use default\n  const selectedLayer = activeTab === 'monitoring' ? propSelectedLayer : 'trueColor';\n\n  useEffect(() => {\n    if (!mapRef.current) return;\n\n    // Initialize map\n    const map = L.map(mapRef.current).setView([coordinates.lat, coordinates.lon], 10);\n    mapInstanceRef.current = map;\n\n    // Add tile layer\n    // Add base map layer\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: 'Â© OpenStreetMap contributors'\n    }).addTo(map);\n\n    // Add initial GIBS layer\n    const layer = gibsService.current.weatherLayers[selectedLayer];\n    if (layer) {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const gibs = L.tileLayer('', {\n          attribution: 'NASA GIBS',\n          maxZoom: 8,\n          opacity: 0.7\n        });\n        \n        gibs.getTileUrl = (coords) => {\n          try {\n            const date = new Date().toISOString().split('T')[0];\n            return gibsService.current.getTileUrl({\n              layer: layer.id,\n              tileMatrix: coords.z,\n              tileRow: coords.y,\n              tileCol: coords.x,\n              format: layer.format || 'image/png'\n            });\n          } catch (err) {\n            console.error('Error generating tile URL:', err);\n            setError('Failed to load weather layer. Please try again.');\n            return '';\n          }\n        };\n        \n        gibs.addTo(map);\n        overlayRef.current = gibs;\n      } catch (err) {\n        console.error('Error setting up GIBS layer:', err);\n        setError('Failed to initialize weather layer. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    // Add marker\n    const marker = L.marker([coordinates.lat, coordinates.lon])\n      .addTo(map)\n      .bindPopup(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    \n    markerRef.current = marker;\n\n    // Add click handler\n    map.on('click', (e) => {\n      const { lat, lng } = e.latlng;\n      \n      // Update marker position\n      if (markerRef.current) {\n        markerRef.current.setLatLng([lat, lng]);\n        markerRef.current.setPopupContent(`\n          <div class=\"text-center\">\n            <strong>Selected Location</strong><br/>\n            Lat: ${lat.toFixed(4)}<br/>\n            Lon: ${lng.toFixed(4)}\n          </div>\n        `);\n      }\n      \n      // Call callback\n      if (onLocationSelect) {\n        onLocationSelect(lat, lng);\n      }\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapInstanceRef.current) {\n        mapInstanceRef.current.remove();\n        mapInstanceRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update marker when coordinates change\n  useEffect(() => {\n    if (mapInstanceRef.current && markerRef.current && coordinates.lat && coordinates.lon) {\n      const newLatLng = [coordinates.lat, coordinates.lon];\n      markerRef.current.setLatLng(newLatLng);\n      mapInstanceRef.current.setView(newLatLng, 10);\n      \n      markerRef.current.setPopupContent(`\n        <div class=\"text-center\">\n          <strong>Selected Location</strong><br/>\n          Lat: ${coordinates.lat.toFixed(4)}<br/>\n          Lon: ${coordinates.lon.toFixed(4)}\n        </div>\n      `);\n    }\n  }, [coordinates]);\n\n  // Update layer when selected layer changes\n  useEffect(() => {\n    if (mapInstanceRef.current) {\n      updateGibsLayer(selectedLayer);\n    }\n  }, [selectedLayer]);\n\n  // Function to update the GIBS layer\n  const updateGibsLayer = (layerId) => {\n    if (!mapInstanceRef.current) return;\n    \n    // Remove existing overlay\n    if (overlayRef.current) {\n      mapInstanceRef.current.removeLayer(overlayRef.current);\n    }\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const gibs = L.tileLayer('', {\n        attribution: 'NASA GIBS',\n        maxZoom: 8,\n        opacity: 0.7\n      });\n      \n      gibs.getTileUrl = (coords) => {\n        try {\n          const date = new Date().toISOString().split('T')[0];\n          return gibsService.current.getTileUrl({\n            layer: layerId, // Use the layerId directly as it's already the full GIBS layer ID\n            tileMatrix: coords.z,\n            tileRow: coords.y,\n            tileCol: coords.x,\n            time: date,\n            format: 'image/png'\n          });\n        } catch (err) {\n          console.error('Error generating tile URL:', err);\n          setError('Failed to load environmental layer. Please try again.');\n          return '';\n        }\n      };\n      \n      gibs.addTo(mapInstanceRef.current);\n      overlayRef.current = gibs;\n    } catch (err) {\n      console.error('Error setting up GIBS layer:', err);\n      setError('Failed to initialize environmental layer. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <div \n        ref={mapRef} \n        className=\"w-full h-96 rounded-lg border border-gray-200\"\n        style={{ minHeight: '400px' }}\n      />\n      \n      {/* Loading Overlay */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600 mx-auto mb-4\"></div>\n            <p className=\"text-sm text-gray-600\">Loading layer data...</p>\n          </div>\n        </div>\n      )}\n\n      {/* Error Message */}\n      {error && (\n        <div className=\"absolute bottom-4 left-4 right-4 bg-red-50 border border-red-200 rounded-lg p-3\">\n          <p className=\"text-sm text-red-700\">{error}</p>\n        </div>\n      )}\n      \n      <div className=\"absolute top-4 left-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\">\n        <p className=\"text-sm text-gray-600 mb-1\">\n          <strong>Click on the map</strong> to select a new location\n        </p>\n        <p className=\"text-xs text-gray-500\">\n          Current: {coordinates.lat.toFixed(4)}, {coordinates.lon.toFixed(4)}\n        </p>\n      </div>\n\n      <div className=\"absolute top-4 right-4 bg-white p-3 rounded-lg shadow-lg border z-[1000]\">\n        <p className=\"text-sm font-semibold mb-2\">NASA GIBS Layers</p>\n        <select \n          className=\"w-full p-2 border rounded\"\n          value={selectedLayer}\n          onChange={(e) => {\n            setSelectedLayer(e.target.value);\n            updateGibsLayer(e.target.value);\n          }}\n          disabled={isLoading}\n        >\n          {Object.entries(gibsService.current.weatherLayers).map(([key, layer]) => (\n            <option key={key} value={key}>\n              {layer.title}\n            </option>\n          ))}\n        </select>\n        {isLoading && (\n          <p className=\"text-sm text-gray-500 mt-2\">Loading weather layer...</p>\n        )}\n        {error && (\n          <p className=\"text-sm text-red-500 mt-2\">{error}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WeatherMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}