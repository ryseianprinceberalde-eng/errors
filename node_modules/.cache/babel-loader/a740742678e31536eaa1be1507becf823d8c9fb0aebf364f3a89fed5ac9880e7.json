{"ast":null,"code":"class WeatherCalculations {\n  calculateProbabilities(historicalData, targetDate) {\n    const {\n      daily\n    } = historicalData;\n    if (!daily || daily.length === 0) {\n      return this.getDefaultProbabilities();\n    }\n\n    // Parse target date for seasonal analysis\n    const targetMonth = new Date(targetDate).getMonth();\n    const targetSeason = Math.floor(targetMonth / 3); // 0: winter, 1: spring, 2: summer, 3: fall\n    const daysInSeason = daily.filter(day => {\n      const dayMonth = new Date(day.date).getMonth();\n      return Math.floor(dayMonth / 3) === targetSeason;\n    });\n\n    // Sort by date to weight recent data more heavily\n    const sortedDaily = [...daily].sort((a, b) => new Date(b.date) - new Date(a.date));\n    const recentDays = sortedDaily.slice(0, Math.min(sortedDaily.length, 30)); // Last 30 days\n    const totalDays = daily.length;\n    const seasonalDays = daysInSeason.length;\n    let hotDays = 0;\n    let coldDays = 0;\n    let wetDays = 0;\n    let windyDays = 0;\n    let uncomfortableDays = 0;\n\n    // Track recent occurrences separately\n    let recentHot = 0,\n      recentCold = 0,\n      recentWet = 0,\n      recentWindy = 0,\n      recentUncomfortable = 0;\n\n    // Process all historical data with seasonal weighting\n    daily.forEach(dayData => {\n      const {\n        temperature,\n        precipitation,\n        windSpeed,\n        humidity\n      } = dayData;\n      const dayMonth = new Date(dayData.date).getMonth();\n      const isSameSeason = Math.floor(dayMonth / 3) === targetSeason;\n      const seasonalWeight = isSameSeason ? 1.5 : 1.0; // Weight same-season data more heavily\n\n      // Hot weather: temperature > 35°C\n      if (temperature > 35) {\n        hotDays += seasonalWeight;\n      }\n\n      // Cold weather: temperature < 5°C\n      if (temperature < 5) {\n        coldDays += seasonalWeight;\n      }\n\n      // Wet weather: precipitation > 10mm/day\n      if (precipitation > 10) {\n        wetDays += seasonalWeight;\n      }\n\n      // Windy weather: wind speed > 10m/s\n      if (windSpeed > 10) {\n        windyDays += seasonalWeight;\n      }\n\n      // Uncomfortable conditions: heat index > 32°C\n      const heatIndex = this.calculateHeatIndex(temperature, humidity);\n      if (heatIndex > 32) {\n        uncomfortableDays += seasonalWeight;\n      }\n    });\n\n    // Process recent data (last 30 days) for trend analysis\n    recentDays.forEach(dayData => {\n      const {\n        temperature,\n        precipitation,\n        windSpeed,\n        humidity\n      } = dayData;\n      if (temperature > 35) recentHot++;\n      if (temperature < 5) recentCold++;\n      if (precipitation > 10) recentWet++;\n      if (windSpeed > 10) recentWindy++;\n      if (this.calculateHeatIndex(temperature, humidity) > 32) recentUncomfortable++;\n    });\n\n    // Calculate base probabilities from all data\n    const baseProbabilities = {\n      hot: hotDays / totalDays * 100,\n      cold: coldDays / totalDays * 100,\n      wet: wetDays / totalDays * 100,\n      windy: windyDays / totalDays * 100,\n      uncomfortable: uncomfortableDays / totalDays * 100\n    };\n\n    // Calculate recent trends (last 30 days)\n    const recentProbabilities = {\n      hot: recentHot / recentDays.length * 100,\n      cold: recentCold / recentDays.length * 100,\n      wet: recentWet / recentDays.length * 100,\n      windy: recentWindy / recentDays.length * 100,\n      uncomfortable: recentUncomfortable / recentDays.length * 100\n    };\n\n    // Blend historical and recent data with seasonal confidence\n    const seasonalConfidence = seasonalDays / totalDays;\n    const recentWeight = 0.4; // 40% weight to recent data\n    const seasonalWeight = 0.3; // 30% weight to seasonal confidence\n    const historicalWeight = 0.3; // 30% weight to overall historical data\n\n    // Final weighted probabilities\n    const calculateFinal = key => {\n      return Math.round(recentProbabilities[key] * recentWeight + baseProbabilities[key] * historicalWeight + baseProbabilities[key] * seasonalConfidence * seasonalWeight);\n    };\n    const finalProbabilities = {\n      hot: calculateFinal('hot'),\n      cold: calculateFinal('cold'),\n      wet: calculateFinal('wet'),\n      windy: calculateFinal('windy'),\n      uncomfortable: calculateFinal('uncomfortable'),\n      confidence: Math.round(seasonalConfidence * 100)\n    };\n    return finalProbabilities;\n  }\n  calculateHeatIndex(temperature, humidity) {\n    // Heat index calculation (simplified version)\n    // Based on the formula used by the US National Weather Service\n\n    if (temperature < 27) {\n      return temperature; // Heat index not applicable for cool temperatures\n    }\n    const T = temperature;\n    const RH = humidity;\n\n    // Simplified heat index formula\n    const HI = -8.78469475556 + 1.61139411 * T + 2.33854883889 * RH + -0.14611605 * T * RH + -0.012308094 * T * T + -0.0164248277778 * RH * RH + 0.002211732 * T * T * RH + 0.00072546 * T * RH * RH + -0.000003582 * T * T * RH * RH;\n    return Math.round(HI * 10) / 10;\n  }\n  getDefaultProbabilities() {\n    // Default probabilities when no data is available\n    return {\n      hot: 15,\n      cold: 10,\n      wet: 25,\n      windy: 20,\n      uncomfortable: 18\n    };\n  }\n  analyzeSeasonalPatterns(historicalData) {\n    const {\n      monthly\n    } = historicalData;\n    if (!monthly || monthly.length === 0) {\n      return null;\n    }\n    const patterns = {\n      hottestMonth: null,\n      coldestMonth: null,\n      wettestMonth: null,\n      driestMonth: null,\n      windiestMonth: null,\n      calmestMonth: null\n    };\n    let maxTemp = -Infinity,\n      minTemp = Infinity;\n    let maxRain = -Infinity,\n      minRain = Infinity;\n    let maxWind = -Infinity,\n      minWind = Infinity;\n    monthly.forEach(monthData => {\n      const {\n        month,\n        temperature,\n        rainfall,\n        windSpeed\n      } = monthData;\n      if (temperature > maxTemp) {\n        maxTemp = temperature;\n        patterns.hottestMonth = month;\n      }\n      if (temperature < minTemp) {\n        minTemp = temperature;\n        patterns.coldestMonth = month;\n      }\n      if (rainfall > maxRain) {\n        maxRain = rainfall;\n        patterns.wettestMonth = month;\n      }\n      if (rainfall < minRain) {\n        minRain = rainfall;\n        patterns.driestMonth = month;\n      }\n      if (windSpeed > maxWind) {\n        maxWind = windSpeed;\n        patterns.windiestMonth = month;\n      }\n      if (windSpeed < minWind) {\n        minWind = windSpeed;\n        patterns.calmestMonth = month;\n      }\n    });\n    return patterns;\n  }\n  calculateExtremeEvents(historicalData) {\n    const {\n      daily\n    } = historicalData;\n    if (!daily || daily.length === 0) {\n      return null;\n    }\n    const extremes = {\n      recordHigh: -Infinity,\n      recordLow: Infinity,\n      maxRainfall: -Infinity,\n      maxWindSpeed: -Infinity,\n      heatWaves: 0,\n      coldSnaps: 0,\n      droughts: 0,\n      wetSpells: 0\n    };\n    let consecutiveHotDays = 0;\n    let consecutiveColdDays = 0;\n    let consecutiveDryDays = 0;\n    let consecutiveWetDays = 0;\n    daily.forEach((dayData, index) => {\n      const {\n        temperature,\n        precipitation,\n        windSpeed\n      } = dayData;\n\n      // Record extremes\n      if (temperature > extremes.recordHigh) {\n        extremes.recordHigh = temperature;\n      }\n      if (temperature < extremes.recordLow) {\n        extremes.recordLow = temperature;\n      }\n      if (precipitation > extremes.maxRainfall) {\n        extremes.maxRainfall = precipitation;\n      }\n      if (windSpeed > extremes.maxWindSpeed) {\n        extremes.maxWindSpeed = windSpeed;\n      }\n\n      // Count consecutive events\n      if (temperature > 30) {\n        consecutiveHotDays++;\n        consecutiveColdDays = 0;\n      } else if (temperature < 10) {\n        consecutiveColdDays++;\n        consecutiveHotDays = 0;\n      } else {\n        if (consecutiveHotDays >= 3) extremes.heatWaves++;\n        if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n        consecutiveHotDays = 0;\n        consecutiveColdDays = 0;\n      }\n      if (precipitation < 1) {\n        consecutiveDryDays++;\n        consecutiveWetDays = 0;\n      } else if (precipitation > 5) {\n        consecutiveWetDays++;\n        consecutiveDryDays = 0;\n      } else {\n        if (consecutiveDryDays >= 7) extremes.droughts++;\n        if (consecutiveWetDays >= 3) extremes.wetSpells++;\n        consecutiveDryDays = 0;\n        consecutiveWetDays = 0;\n      }\n    });\n\n    // Handle end of data\n    if (consecutiveHotDays >= 3) extremes.heatWaves++;\n    if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n    if (consecutiveDryDays >= 7) extremes.droughts++;\n    if (consecutiveWetDays >= 3) extremes.wetSpells++;\n    return extremes;\n  }\n  generateWeatherInsights(probabilities, historicalData) {\n    const insights = [];\n\n    // Temperature insights\n    if (probabilities.hot > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'High Heat Probability',\n        message: `There's a ${probabilities.hot}% chance of hot weather (>35°C). Consider heat protection measures.`\n      });\n    } else if (probabilities.cold > 60) {\n      insights.push({\n        type: 'info',\n        title: 'Cold Weather Expected',\n        message: `There's a ${probabilities.cold}% chance of cold weather (<5°C). Dress warmly.`\n      });\n    }\n\n    // Precipitation insights\n    if (probabilities.wet > 70) {\n      insights.push({\n        type: 'info',\n        title: 'High Rain Probability',\n        message: `There's a ${probabilities.wet}% chance of significant rainfall (>10mm). Bring an umbrella.`\n      });\n    } else if (probabilities.wet < 20) {\n      insights.push({\n        type: 'success',\n        title: 'Dry Conditions Expected',\n        message: `Only a ${probabilities.wet}% chance of rain. Great weather for outdoor activities.`\n      });\n    }\n\n    // Wind insights\n    if (probabilities.windy > 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Windy Conditions',\n        message: `${probabilities.windy}% chance of strong winds (>10m/s). Secure loose objects.`\n      });\n    }\n\n    // Comfort insights\n    if (probabilities.uncomfortable > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'Uncomfortable Heat Index',\n        message: `${probabilities.uncomfortable}% chance of uncomfortable conditions. Stay hydrated and seek shade.`\n      });\n    }\n\n    // General insights\n    const totalHighProbabilities = [probabilities.hot, probabilities.cold, probabilities.wet, probabilities.windy].filter(prob => prob > 50).length;\n    if (totalHighProbabilities === 0) {\n      insights.push({\n        type: 'success',\n        title: 'Moderate Weather Expected',\n        message: 'Weather conditions are expected to be generally moderate with no extreme conditions likely.'\n      });\n    } else if (totalHighProbabilities >= 3) {\n      insights.push({\n        type: 'warning',\n        title: 'Variable Conditions',\n        message: 'Multiple weather conditions are possible. Check forecasts closer to your date.'\n      });\n    }\n    return insights;\n  }\n}\nexport const weatherCalculations = new WeatherCalculations();","map":{"version":3,"names":["WeatherCalculations","calculateProbabilities","historicalData","targetDate","daily","length","getDefaultProbabilities","targetMonth","Date","getMonth","targetSeason","Math","floor","daysInSeason","filter","day","dayMonth","date","sortedDaily","sort","a","b","recentDays","slice","min","totalDays","seasonalDays","hotDays","coldDays","wetDays","windyDays","uncomfortableDays","recentHot","recentCold","recentWet","recentWindy","recentUncomfortable","forEach","dayData","temperature","precipitation","windSpeed","humidity","isSameSeason","seasonalWeight","heatIndex","calculateHeatIndex","baseProbabilities","hot","cold","wet","windy","uncomfortable","recentProbabilities","seasonalConfidence","recentWeight","historicalWeight","calculateFinal","key","round","finalProbabilities","confidence","T","RH","HI","analyzeSeasonalPatterns","monthly","patterns","hottestMonth","coldestMonth","wettestMonth","driestMonth","windiestMonth","calmestMonth","maxTemp","Infinity","minTemp","maxRain","minRain","maxWind","minWind","monthData","month","rainfall","calculateExtremeEvents","extremes","recordHigh","recordLow","maxRainfall","maxWindSpeed","heatWaves","coldSnaps","droughts","wetSpells","consecutiveHotDays","consecutiveColdDays","consecutiveDryDays","consecutiveWetDays","index","generateWeatherInsights","probabilities","insights","push","type","title","message","totalHighProbabilities","prob","weatherCalculations"],"sources":["C:/xampp/htdocs/errors/src/utils/weatherCalculations.js"],"sourcesContent":["class WeatherCalculations {\n  calculateProbabilities(historicalData, targetDate) {\n    const { daily } = historicalData;\n    \n    if (!daily || daily.length === 0) {\n      return this.getDefaultProbabilities();\n    }\n\n    // Parse target date for seasonal analysis\n    const targetMonth = new Date(targetDate).getMonth();\n    const targetSeason = Math.floor(targetMonth / 3); // 0: winter, 1: spring, 2: summer, 3: fall\n    const daysInSeason = daily.filter(day => {\n      const dayMonth = new Date(day.date).getMonth();\n      return Math.floor(dayMonth / 3) === targetSeason;\n    });\n\n    // Sort by date to weight recent data more heavily\n    const sortedDaily = [...daily].sort((a, b) => new Date(b.date) - new Date(a.date));\n    const recentDays = sortedDaily.slice(0, Math.min(sortedDaily.length, 30)); // Last 30 days\n    const totalDays = daily.length;\n    const seasonalDays = daysInSeason.length;\n\n    let hotDays = 0;\n    let coldDays = 0;\n    let wetDays = 0;\n    let windyDays = 0;\n    let uncomfortableDays = 0;\n    \n    // Track recent occurrences separately\n    let recentHot = 0, recentCold = 0, recentWet = 0, recentWindy = 0, recentUncomfortable = 0;\n\n    // Process all historical data with seasonal weighting\n    daily.forEach((dayData) => {\n      const { temperature, precipitation, windSpeed, humidity } = dayData;\n      const dayMonth = new Date(dayData.date).getMonth();\n      const isSameSeason = Math.floor(dayMonth / 3) === targetSeason;\n      const seasonalWeight = isSameSeason ? 1.5 : 1.0; // Weight same-season data more heavily\n      \n      // Hot weather: temperature > 35°C\n      if (temperature > 35) {\n        hotDays += seasonalWeight;\n      }\n      \n      // Cold weather: temperature < 5°C\n      if (temperature < 5) {\n        coldDays += seasonalWeight;\n      }\n      \n      // Wet weather: precipitation > 10mm/day\n      if (precipitation > 10) {\n        wetDays += seasonalWeight;\n      }\n      \n      // Windy weather: wind speed > 10m/s\n      if (windSpeed > 10) {\n        windyDays += seasonalWeight;\n      }\n      \n      // Uncomfortable conditions: heat index > 32°C\n      const heatIndex = this.calculateHeatIndex(temperature, humidity);\n      if (heatIndex > 32) {\n        uncomfortableDays += seasonalWeight;\n      }\n    });\n\n    // Process recent data (last 30 days) for trend analysis\n    recentDays.forEach(dayData => {\n      const { temperature, precipitation, windSpeed, humidity } = dayData;\n      if (temperature > 35) recentHot++;\n      if (temperature < 5) recentCold++;\n      if (precipitation > 10) recentWet++;\n      if (windSpeed > 10) recentWindy++;\n      if (this.calculateHeatIndex(temperature, humidity) > 32) recentUncomfortable++;\n    });\n\n    // Calculate base probabilities from all data\n    const baseProbabilities = {\n      hot: (hotDays / totalDays) * 100,\n      cold: (coldDays / totalDays) * 100,\n      wet: (wetDays / totalDays) * 100,\n      windy: (windyDays / totalDays) * 100,\n      uncomfortable: (uncomfortableDays / totalDays) * 100\n    };\n\n    // Calculate recent trends (last 30 days)\n    const recentProbabilities = {\n      hot: (recentHot / recentDays.length) * 100,\n      cold: (recentCold / recentDays.length) * 100,\n      wet: (recentWet / recentDays.length) * 100,\n      windy: (recentWindy / recentDays.length) * 100,\n      uncomfortable: (recentUncomfortable / recentDays.length) * 100\n    };\n\n    // Blend historical and recent data with seasonal confidence\n    const seasonalConfidence = seasonalDays / totalDays;\n    const recentWeight = 0.4; // 40% weight to recent data\n    const seasonalWeight = 0.3; // 30% weight to seasonal confidence\n    const historicalWeight = 0.3; // 30% weight to overall historical data\n\n    // Final weighted probabilities\n    const calculateFinal = (key) => {\n      return Math.round(\n        (recentProbabilities[key] * recentWeight) +\n        (baseProbabilities[key] * historicalWeight) +\n        (baseProbabilities[key] * seasonalConfidence * seasonalWeight)\n      );\n    };\n\n    const finalProbabilities = {\n      hot: calculateFinal('hot'),\n      cold: calculateFinal('cold'),\n      wet: calculateFinal('wet'),\n      windy: calculateFinal('windy'),\n      uncomfortable: calculateFinal('uncomfortable'),\n      confidence: Math.round(seasonalConfidence * 100)\n    };\n    \n    return finalProbabilities;\n  }\n\n  calculateHeatIndex(temperature, humidity) {\n    // Heat index calculation (simplified version)\n    // Based on the formula used by the US National Weather Service\n    \n    if (temperature < 27) {\n      return temperature; // Heat index not applicable for cool temperatures\n    }\n\n    const T = temperature;\n    const RH = humidity;\n\n    // Simplified heat index formula\n    const HI = -8.78469475556 +\n               1.61139411 * T +\n               2.33854883889 * RH +\n               -0.14611605 * T * RH +\n               -0.012308094 * T * T +\n               -0.0164248277778 * RH * RH +\n               0.002211732 * T * T * RH +\n               0.00072546 * T * RH * RH +\n               -0.000003582 * T * T * RH * RH;\n\n    return Math.round(HI * 10) / 10;\n  }\n\n  getDefaultProbabilities() {\n    // Default probabilities when no data is available\n    return {\n      hot: 15,\n      cold: 10,\n      wet: 25,\n      windy: 20,\n      uncomfortable: 18\n    };\n  }\n\n  analyzeSeasonalPatterns(historicalData) {\n    const { monthly } = historicalData;\n    \n    if (!monthly || monthly.length === 0) {\n      return null;\n    }\n\n    const patterns = {\n      hottestMonth: null,\n      coldestMonth: null,\n      wettestMonth: null,\n      driestMonth: null,\n      windiestMonth: null,\n      calmestMonth: null\n    };\n\n    let maxTemp = -Infinity, minTemp = Infinity;\n    let maxRain = -Infinity, minRain = Infinity;\n    let maxWind = -Infinity, minWind = Infinity;\n\n    monthly.forEach(monthData => {\n      const { month, temperature, rainfall, windSpeed } = monthData;\n      \n      if (temperature > maxTemp) {\n        maxTemp = temperature;\n        patterns.hottestMonth = month;\n      }\n      \n      if (temperature < minTemp) {\n        minTemp = temperature;\n        patterns.coldestMonth = month;\n      }\n      \n      if (rainfall > maxRain) {\n        maxRain = rainfall;\n        patterns.wettestMonth = month;\n      }\n      \n      if (rainfall < minRain) {\n        minRain = rainfall;\n        patterns.driestMonth = month;\n      }\n      \n      if (windSpeed > maxWind) {\n        maxWind = windSpeed;\n        patterns.windiestMonth = month;\n      }\n      \n      if (windSpeed < minWind) {\n        minWind = windSpeed;\n        patterns.calmestMonth = month;\n      }\n    });\n\n    return patterns;\n  }\n\n  calculateExtremeEvents(historicalData) {\n    const { daily } = historicalData;\n    \n    if (!daily || daily.length === 0) {\n      return null;\n    }\n\n    const extremes = {\n      recordHigh: -Infinity,\n      recordLow: Infinity,\n      maxRainfall: -Infinity,\n      maxWindSpeed: -Infinity,\n      heatWaves: 0,\n      coldSnaps: 0,\n      droughts: 0,\n      wetSpells: 0\n    };\n\n    let consecutiveHotDays = 0;\n    let consecutiveColdDays = 0;\n    let consecutiveDryDays = 0;\n    let consecutiveWetDays = 0;\n\n    daily.forEach((dayData, index) => {\n      const { temperature, precipitation, windSpeed } = dayData;\n      \n      // Record extremes\n      if (temperature > extremes.recordHigh) {\n        extremes.recordHigh = temperature;\n      }\n      \n      if (temperature < extremes.recordLow) {\n        extremes.recordLow = temperature;\n      }\n      \n      if (precipitation > extremes.maxRainfall) {\n        extremes.maxRainfall = precipitation;\n      }\n      \n      if (windSpeed > extremes.maxWindSpeed) {\n        extremes.maxWindSpeed = windSpeed;\n      }\n\n      // Count consecutive events\n      if (temperature > 30) {\n        consecutiveHotDays++;\n        consecutiveColdDays = 0;\n      } else if (temperature < 10) {\n        consecutiveColdDays++;\n        consecutiveHotDays = 0;\n      } else {\n        if (consecutiveHotDays >= 3) extremes.heatWaves++;\n        if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n        consecutiveHotDays = 0;\n        consecutiveColdDays = 0;\n      }\n\n      if (precipitation < 1) {\n        consecutiveDryDays++;\n        consecutiveWetDays = 0;\n      } else if (precipitation > 5) {\n        consecutiveWetDays++;\n        consecutiveDryDays = 0;\n      } else {\n        if (consecutiveDryDays >= 7) extremes.droughts++;\n        if (consecutiveWetDays >= 3) extremes.wetSpells++;\n        consecutiveDryDays = 0;\n        consecutiveWetDays = 0;\n      }\n    });\n\n    // Handle end of data\n    if (consecutiveHotDays >= 3) extremes.heatWaves++;\n    if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n    if (consecutiveDryDays >= 7) extremes.droughts++;\n    if (consecutiveWetDays >= 3) extremes.wetSpells++;\n\n    return extremes;\n  }\n\n  generateWeatherInsights(probabilities, historicalData) {\n    const insights = [];\n    \n    // Temperature insights\n    if (probabilities.hot > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'High Heat Probability',\n        message: `There's a ${probabilities.hot}% chance of hot weather (>35°C). Consider heat protection measures.`\n      });\n    } else if (probabilities.cold > 60) {\n      insights.push({\n        type: 'info',\n        title: 'Cold Weather Expected',\n        message: `There's a ${probabilities.cold}% chance of cold weather (<5°C). Dress warmly.`\n      });\n    }\n\n    // Precipitation insights\n    if (probabilities.wet > 70) {\n      insights.push({\n        type: 'info',\n        title: 'High Rain Probability',\n        message: `There's a ${probabilities.wet}% chance of significant rainfall (>10mm). Bring an umbrella.`\n      });\n    } else if (probabilities.wet < 20) {\n      insights.push({\n        type: 'success',\n        title: 'Dry Conditions Expected',\n        message: `Only a ${probabilities.wet}% chance of rain. Great weather for outdoor activities.`\n      });\n    }\n\n    // Wind insights\n    if (probabilities.windy > 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Windy Conditions',\n        message: `${probabilities.windy}% chance of strong winds (>10m/s). Secure loose objects.`\n      });\n    }\n\n    // Comfort insights\n    if (probabilities.uncomfortable > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'Uncomfortable Heat Index',\n        message: `${probabilities.uncomfortable}% chance of uncomfortable conditions. Stay hydrated and seek shade.`\n      });\n    }\n\n    // General insights\n    const totalHighProbabilities = [probabilities.hot, probabilities.cold, probabilities.wet, probabilities.windy]\n      .filter(prob => prob > 50).length;\n\n    if (totalHighProbabilities === 0) {\n      insights.push({\n        type: 'success',\n        title: 'Moderate Weather Expected',\n        message: 'Weather conditions are expected to be generally moderate with no extreme conditions likely.'\n      });\n    } else if (totalHighProbabilities >= 3) {\n      insights.push({\n        type: 'warning',\n        title: 'Variable Conditions',\n        message: 'Multiple weather conditions are possible. Check forecasts closer to your date.'\n      });\n    }\n\n    return insights;\n  }\n}\n\nexport const weatherCalculations = new WeatherCalculations();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}