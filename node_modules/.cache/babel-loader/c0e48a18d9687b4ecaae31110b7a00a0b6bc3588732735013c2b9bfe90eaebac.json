{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch CMEAnalysis data from NASA DONKI CMEAnalysis endpoint\n   * Parameters are optional and will be appended when provided.\n   * @param {Object} opts - Options: { startDate, endDate, mostAccurateOnly, speed, halfAngle, catalog }\n   * @returns {Promise<Object|Array>} Raw or processed CMEAnalysis results\n   */\n  async fetchCMEAnalysis(opts = {}) {\n    try {\n      const params = [];\n      if (opts.startDate) params.push(`startDate=${encodeURIComponent(opts.startDate)}`);\n      if (opts.endDate) params.push(`endDate=${encodeURIComponent(opts.endDate)}`);\n      if (opts.mostAccurateOnly !== undefined) params.push(`mostAccurateOnly=${opts.mostAccurateOnly}`);\n      if (opts.speed !== undefined) params.push(`speed=${encodeURIComponent(opts.speed)}`);\n      if (opts.halfAngle !== undefined) params.push(`halfAngle=${encodeURIComponent(opts.halfAngle)}`);\n      if (opts.catalog) params.push(`catalog=${encodeURIComponent(opts.catalog)}`);\n\n      // Always include API key\n      params.push(`api_key=${this.apiKey}`);\n      const url = `${this.baseUrl}/CMEAnalysis?${params.join('&')}`;\n      console.log('Fetching NASA DONKI CMEAnalysis:', url);\n      const data = await this.get(url, {\n        timeout: 20000\n      });\n      if (!data) return [];\n\n      // Return processed summary to keep callers consistent with other methods\n      return this.processCMEAnalysis(data);\n    } catch (error) {\n      console.warn('fetchCMEAnalysis error:', error && error.message ? error.message : error);\n      // Return an empty array as graceful fallback\n      return [];\n    }\n  }\n\n  /**\n   * Process raw CMEAnalysis payload into a lighter summary structure\n   * @param {Array} raw - Raw array returned by NASA DONKI CMEAnalysis\n   * @returns {Object} Processed summary\n   */\n  processCMEAnalysis(raw = []) {\n    try {\n      const items = raw.map(item => ({\n        time21cm: item.time21cm || item.analysisTime || null,\n        activityID: item.activityID || null,\n        catalog: item.catalog || null,\n        mostAccurateOnly: item.mostAccurateOnly || false,\n        speed: item.speed || null,\n        halfAngle: item.halfAngle || null,\n        latitude: item.latitude || null,\n        longitude: item.longitude || null,\n        comment: item.comment || item.note || null,\n        linkedEvents: item.linkedEvents || []\n      }));\n      return {\n        count: items.length,\n        items: items,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (err) {\n      console.warn('processCMEAnalysis failed', err);\n      return {\n        count: 0,\n        items: [],\n        lastUpdated: new Date().toISOString()\n      };\n    }\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n      const url = `${this.baseUrl}/CME?startDate=${startDateStr}&endDate=${endDateStr}&api_key=${this.apiKey}`;\n      console.log('Fetching NASA DONKI space weather data...');\n      const data = await this.get(url, {\n        timeout: 15000\n      });\n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3),\n      // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    const descriptions = ['Coronal Mass Ejection activity may influence upper atmospheric conditions.', 'Space weather events could affect radio communications and satellite operations.', 'Solar activity detected - potential minor effects on weather patterns.', 'Geomagnetic disturbances possible due to solar wind interactions.'];\n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n}\nexport default SpaceWeatherService;","map":{"version":3,"names":["BaseApiService","SpaceWeatherService","constructor","apiKey","baseUrl","fetchCMEAnalysis","opts","params","startDate","push","encodeURIComponent","endDate","mostAccurateOnly","undefined","speed","halfAngle","catalog","url","join","console","log","data","get","timeout","processCMEAnalysis","error","warn","message","raw","items","map","item","time21cm","analysisTime","activityID","latitude","longitude","comment","note","linkedEvents","count","length","lastUpdated","Date","toISOString","err","fetchSpaceWeatherData","targetDate","dayRange","addDays","startDateStr","formatDate","endDateStr","processSpaceWeatherData","generateDefaultSpaceWeatherData","cmeData","events","event","startTime","sourceLocation","cmeAnalyses","hasEvents","eventCount","slice","impactLevel","calculateSpaceWeatherImpact","description","getSpaceWeatherDescription","descriptions","Math","min"],"sources":["C:/xampp/htdocs/errors/src/services/api/spaceWeatherService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch CMEAnalysis data from NASA DONKI CMEAnalysis endpoint\n   * Parameters are optional and will be appended when provided.\n   * @param {Object} opts - Options: { startDate, endDate, mostAccurateOnly, speed, halfAngle, catalog }\n   * @returns {Promise<Object|Array>} Raw or processed CMEAnalysis results\n   */\n  async fetchCMEAnalysis(opts = {}) {\n    try {\n      const params = [];\n      if (opts.startDate) params.push(`startDate=${encodeURIComponent(opts.startDate)}`);\n      if (opts.endDate) params.push(`endDate=${encodeURIComponent(opts.endDate)}`);\n      if (opts.mostAccurateOnly !== undefined) params.push(`mostAccurateOnly=${opts.mostAccurateOnly}`);\n      if (opts.speed !== undefined) params.push(`speed=${encodeURIComponent(opts.speed)}`);\n      if (opts.halfAngle !== undefined) params.push(`halfAngle=${encodeURIComponent(opts.halfAngle)}`);\n      if (opts.catalog) params.push(`catalog=${encodeURIComponent(opts.catalog)}`);\n\n      // Always include API key\n      params.push(`api_key=${this.apiKey}`);\n\n      const url = `${this.baseUrl}/CMEAnalysis?${params.join('&')}`;\n\n      console.log('Fetching NASA DONKI CMEAnalysis:', url);\n      const data = await this.get(url, { timeout: 20000 });\n\n      if (!data) return [];\n\n      // Return processed summary to keep callers consistent with other methods\n      return this.processCMEAnalysis(data);\n    } catch (error) {\n      console.warn('fetchCMEAnalysis error:', error && error.message ? error.message : error);\n      // Return an empty array as graceful fallback\n      return [];\n    }\n  }\n\n  /**\n   * Process raw CMEAnalysis payload into a lighter summary structure\n   * @param {Array} raw - Raw array returned by NASA DONKI CMEAnalysis\n   * @returns {Object} Processed summary\n   */\n  processCMEAnalysis(raw = []) {\n    try {\n      const items = raw.map(item => ({\n        time21cm: item.time21cm || item.analysisTime || null,\n        activityID: item.activityID || null,\n        catalog: item.catalog || null,\n        mostAccurateOnly: item.mostAccurateOnly || false,\n        speed: item.speed || null,\n        halfAngle: item.halfAngle || null,\n        latitude: item.latitude || null,\n        longitude: item.longitude || null,\n        comment: item.comment || item.note || null,\n        linkedEvents: item.linkedEvents || []\n      }));\n\n      return {\n        count: items.length,\n        items: items,\n        lastUpdated: new Date().toISOString()\n      };\n    } catch (err) {\n      console.warn('processCMEAnalysis failed', err);\n      return { count: 0, items: [], lastUpdated: new Date().toISOString() };\n    }\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      \n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n      \n      const url = `${this.baseUrl}/CME?startDate=${startDateStr}&endDate=${endDateStr}&api_key=${this.apiKey}`;\n      \n      console.log('Fetching NASA DONKI space weather data...');\n      const data = await this.get(url, { timeout: 15000 });\n      \n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3), // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    \n    const descriptions = [\n      'Coronal Mass Ejection activity may influence upper atmospheric conditions.',\n      'Space weather events could affect radio communications and satellite operations.',\n      'Solar activity detected - potential minor effects on weather patterns.',\n      'Geomagnetic disturbances possible due to solar wind interactions.'\n    ];\n    \n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n}\n\nexport default SpaceWeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}