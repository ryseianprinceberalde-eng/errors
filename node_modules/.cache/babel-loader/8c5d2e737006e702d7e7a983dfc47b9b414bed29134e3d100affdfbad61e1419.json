{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * Meteomatics Weather API Service\n * Handles professional weather data integration\n */\nclass MeteomaticsService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://api.meteomatics.com';\n    this.username = 'narvasa_darryljohn';\n    this.password = '20XN1825ylysfXl8jSXx';\n    this.auth = btoa(`${this.username}:${this.password}`);\n  }\n\n  /**\n   * Fetch historical weather data from Meteomatics API\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise} Weather data or fallback simulation\n   */\n  async fetchWeatherData(lat, lon, targetDate) {\n    try {\n      // Note: Direct browser calls to Meteomatics API are blocked by CORS\n      // This would work in a backend environment\n      console.warn('CORS prevents direct Meteomatics API calls from browser. Using enhanced simulation.');\n\n      // In production, this would make actual API calls through a backend proxy\n      // return await this.fetchActualMeteomaticsData(lat, lon, targetDate);\n\n      return this.simulateWeatherData(lat, lon, targetDate);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch current weather conditions\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {Promise} Current weather data\n   */\n  async fetchCurrentWeather(lat, lon) {\n    try {\n      // In production, this would make actual API calls\n      // For now, simulate current weather based on location and date\n      const now = new Date();\n      const hour = now.getHours();\n\n      // Simulate more realistic current conditions based on time of day\n      const timeOfDay = hour >= 6 && hour <= 18 ? 'day' : 'night';\n      const seasonIndex = Math.floor(now.getMonth() / 3); // 0: winter, 1: spring, 2: summer, 3: fall\n\n      // Base temperature on season and time of day\n      const baseTemp = this.getSeasonalBaseTemperature(seasonIndex);\n      const tempVariation = timeOfDay === 'day' ? 5 : -2;\n      return {\n        temperature: baseTemp + tempVariation + (Math.random() * 4 - 2),\n        // Add some randomness\n        humidity: 50 + Math.random() * 30,\n        windSpeed: 5 + Math.random() * 10,\n        precipitation: Math.random() > 0.7 ? Math.random() * 5 : 0,\n        timestamp: now.toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get base temperature for seasonal simulation\n   * @param {number} seasonIndex - 0: winter, 1: spring, 2: summer, 3: fall\n   * @returns {number} Base temperature\n   */\n  getSeasonalBaseTemperature(seasonIndex) {\n    const seasonTemps = {\n      0: 5,\n      // winter\n      1: 15,\n      // spring\n      2: 25,\n      // summer\n      3: 15 // fall\n    };\n    return seasonTemps[seasonIndex] || 15;\n  }\n\n  /**\n   * Generate enhanced weather simulation based on location and climate patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date\n   * @returns {Object} Enhanced weather data simulation\n   */\n  generateEnhancedWeatherData(lat, lon, targetDate) {\n    if (!this.isValidCoordinates(lat, lon)) {\n      throw new Error('Invalid coordinates provided');\n    }\n\n    // Enhanced simulation with location-based climate patterns\n    const isPhilippines = lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127;\n    const isTropical = Math.abs(lat) < 23.5;\n    const isNorthernHemisphere = lat > 0;\n    const targetMonth = new Date(targetDate).getMonth() + 1;\n    const targetDay = new Date(targetDate).getDate();\n\n    // Generate realistic daily records based on location\n    const dailyRecords = this.generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere);\n\n    // Generate monthly data with location intelligence\n    const monthlyData = this.generateMonthlyData(lat, lon, isPhilippines);\n    return {\n      daily: dailyRecords,\n      monthly: monthlyData,\n      metadata: {\n        location: {\n          lat,\n          lon\n        },\n        isPhilippines,\n        isTropical,\n        targetDate,\n        generatedAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Generate daily weather records\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} targetMonth - Target month\n   * @param {number} targetDay - Target day\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @param {boolean} isNorthernHemisphere - Is in northern hemisphere\n   * @returns {Array} Daily weather records\n   */\n  generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere) {\n    const dailyRecords = [];\n    const currentYear = new Date().getFullYear();\n    for (let year = currentYear - 15; year < currentYear; year++) {\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, targetMonth);\n      const seasonalVariation = Math.sin((targetMonth - 1) * Math.PI / 6) * (isNorthernHemisphere ? 1 : -1);\n      const record = {\n        year,\n        date: `${year}-${targetMonth.toString().padStart(2, '0')}-${targetDay.toString().padStart(2, '0')}`,\n        temperature: Math.round((baseTemp + seasonalVariation + (Math.random() - 0.5) * 8) * 10) / 10,\n        temperatureMax: Math.round((baseTemp + seasonalVariation + 5 + Math.random() * 5) * 10) / 10,\n        temperatureMin: Math.round((baseTemp + seasonalVariation - 5 - Math.random() * 3) * 10) / 10,\n        precipitation: this.getLocationBasedPrecipitation(lat, lon, targetMonth),\n        windSpeed: Math.round((5 + Math.random() * 15) * 10) / 10,\n        humidity: Math.round((60 + Math.random() * 30) * 10) / 10\n      };\n      dailyRecords.push(record);\n    }\n    return dailyRecords;\n  }\n\n  /**\n   * Generate monthly weather data\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @returns {Array} Monthly weather data\n   */\n  generateMonthlyData(lat, lon, isPhilippines) {\n    const monthlyData = [];\n    for (let month = 1; month <= 12; month++) {\n      const monthName = new Date(2000, month - 1, 1).toLocaleString('default', {\n        month: 'short'\n      });\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, month);\n      const basePrecip = this.getLocationBasedPrecipitation(lat, lon, month);\n      monthlyData.push({\n        month: monthName,\n        temperature: Math.round(baseTemp * 10) / 10,\n        rainfall: Math.round(basePrecip * 10) / 10,\n        windSpeed: Math.round((8 + Math.random() * 6) * 10) / 10\n      });\n    }\n    return monthlyData;\n  }\n\n  /**\n   * Get location-based temperature patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Base temperature for location and month\n   */\n  getLocationBasedTemperature(lat, lon, month) {\n    // Philippines-specific temperature patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      const baseTemp = 27; // Philippines average\n      const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 2; // Mild seasonal variation\n      return baseTemp + seasonalVariation;\n    }\n\n    // General latitude-based temperature\n    const latitudeFactor = Math.cos(lat * Math.PI / 180);\n    const baseTemp = 15 + latitudeFactor * 20;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * (lat > 0 ? 1 : -1) * 15;\n    return baseTemp + seasonalVariation;\n  }\n\n  /**\n   * Get location-based precipitation patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Precipitation amount for location and month\n   */\n  getLocationBasedPrecipitation(lat, lon, month) {\n    // Philippines monsoon patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      // Wet season (June-November), Dry season (December-May)\n      const isWetSeason = month >= 6 && month <= 11;\n      return isWetSeason ? 15 + Math.random() * 25 : 2 + Math.random() * 8;\n    }\n\n    // General precipitation patterns\n    const tropicalFactor = Math.max(0, 1 - Math.abs(lat) / 30);\n    const basePrecip = 5 + tropicalFactor * 15;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 10;\n    return Math.max(0, basePrecip + seasonalVariation + Math.random() * 10);\n  }\n\n  /**\n   * Validate Meteomatics API credentials\n   * @returns {boolean} True if credentials are valid\n   */\n  validateCredentials() {\n    return !!(this.username && this.password && this.auth);\n  }\n\n  /**\n   * Get API status information\n   * @returns {Object} API status and configuration\n   */\n  getApiStatus() {\n    return {\n      service: 'Meteomatics Weather API',\n      hasCredentials: this.validateCredentials(),\n      username: this.username,\n      baseUrl: this.baseUrl,\n      corsBlocked: true,\n      // Direct browser access blocked\n      recommendation: 'Use backend proxy for production'\n    };\n  }\n}\nexport default MeteomaticsService;","map":{"version":3,"names":["BaseApiService","MeteomaticsService","constructor","baseUrl","username","password","auth","btoa","fetchWeatherData","lat","lon","targetDate","console","warn","simulateWeatherData","error","fetchCurrentWeather","now","Date","hour","getHours","timeOfDay","seasonIndex","Math","floor","getMonth","baseTemp","getSeasonalBaseTemperature","tempVariation","temperature","random","humidity","windSpeed","precipitation","timestamp","toISOString","seasonTemps","generateEnhancedWeatherData","isValidCoordinates","Error","isPhilippines","isTropical","abs","isNorthernHemisphere","targetMonth","targetDay","getDate","dailyRecords","generateDailyRecords","monthlyData","generateMonthlyData","daily","monthly","metadata","location","generatedAt","currentYear","getFullYear","year","getLocationBasedTemperature","seasonalVariation","sin","PI","record","date","toString","padStart","round","temperatureMax","temperatureMin","getLocationBasedPrecipitation","push","month","monthName","toLocaleString","basePrecip","rainfall","latitudeFactor","cos","isWetSeason","tropicalFactor","max","validateCredentials","getApiStatus","service","hasCredentials","corsBlocked","recommendation"],"sources":["C:/xampp/htdocs/errors/src/services/api/meteomaticsService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * Meteomatics Weather API Service\n * Handles professional weather data integration\n */\nclass MeteomaticsService extends BaseApiService {\n  constructor() {\n    super();\n    this.baseUrl = 'https://api.meteomatics.com';\n    this.username = 'narvasa_darryljohn';\n    this.password = '20XN1825ylysfXl8jSXx';\n    this.auth = btoa(`${this.username}:${this.password}`);\n  }\n\n  /**\n   * Fetch historical weather data from Meteomatics API\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date for analysis\n   * @returns {Promise} Weather data or fallback simulation\n   */\n  async fetchWeatherData(lat, lon, targetDate) {\n    try {\n      // Note: Direct browser calls to Meteomatics API are blocked by CORS\n      // This would work in a backend environment\n      console.warn('CORS prevents direct Meteomatics API calls from browser. Using enhanced simulation.');\n      \n      // In production, this would make actual API calls through a backend proxy\n      // return await this.fetchActualMeteomaticsData(lat, lon, targetDate);\n\n      return this.simulateWeatherData(lat, lon, targetDate);\n    } catch (error) {\n      console.error('Error fetching weather data:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Fetch current weather conditions\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {Promise} Current weather data\n   */\n  async fetchCurrentWeather(lat, lon) {\n    try {\n      // In production, this would make actual API calls\n      // For now, simulate current weather based on location and date\n      const now = new Date();\n      const hour = now.getHours();\n      \n      // Simulate more realistic current conditions based on time of day\n      const timeOfDay = hour >= 6 && hour <= 18 ? 'day' : 'night';\n      const seasonIndex = Math.floor(now.getMonth() / 3); // 0: winter, 1: spring, 2: summer, 3: fall\n      \n      // Base temperature on season and time of day\n      const baseTemp = this.getSeasonalBaseTemperature(seasonIndex);\n      const tempVariation = timeOfDay === 'day' ? 5 : -2;\n      \n      return {\n        temperature: baseTemp + tempVariation + (Math.random() * 4 - 2), // Add some randomness\n        humidity: 50 + (Math.random() * 30),\n        windSpeed: 5 + (Math.random() * 10),\n        precipitation: Math.random() > 0.7 ? Math.random() * 5 : 0,\n        timestamp: now.toISOString()\n      };\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get base temperature for seasonal simulation\n   * @param {number} seasonIndex - 0: winter, 1: spring, 2: summer, 3: fall\n   * @returns {number} Base temperature\n   */\n  getSeasonalBaseTemperature(seasonIndex) {\n    const seasonTemps = {\n      0: 5,  // winter\n      1: 15, // spring\n      2: 25, // summer\n      3: 15  // fall\n    };\n    return seasonTemps[seasonIndex] || 15;\n  }\n\n  /**\n   * Generate enhanced weather simulation based on location and climate patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {string} targetDate - Target date\n   * @returns {Object} Enhanced weather data simulation\n   */\n  generateEnhancedWeatherData(lat, lon, targetDate) {\n    if (!this.isValidCoordinates(lat, lon)) {\n      throw new Error('Invalid coordinates provided');\n    }\n\n    // Enhanced simulation with location-based climate patterns\n    const isPhilippines = (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127);\n    const isTropical = Math.abs(lat) < 23.5;\n    const isNorthernHemisphere = lat > 0;\n    \n    const targetMonth = new Date(targetDate).getMonth() + 1;\n    const targetDay = new Date(targetDate).getDate();\n    \n    // Generate realistic daily records based on location\n    const dailyRecords = this.generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere);\n    \n    // Generate monthly data with location intelligence\n    const monthlyData = this.generateMonthlyData(lat, lon, isPhilippines);\n\n    return {\n      daily: dailyRecords,\n      monthly: monthlyData,\n      metadata: {\n        location: { lat, lon },\n        isPhilippines,\n        isTropical,\n        targetDate,\n        generatedAt: new Date().toISOString()\n      }\n    };\n  }\n\n  /**\n   * Generate daily weather records\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} targetMonth - Target month\n   * @param {number} targetDay - Target day\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @param {boolean} isNorthernHemisphere - Is in northern hemisphere\n   * @returns {Array} Daily weather records\n   */\n  generateDailyRecords(lat, lon, targetMonth, targetDay, isPhilippines, isNorthernHemisphere) {\n    const dailyRecords = [];\n    const currentYear = new Date().getFullYear();\n    \n    for (let year = currentYear - 15; year < currentYear; year++) {\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, targetMonth);\n      const seasonalVariation = Math.sin((targetMonth - 1) * Math.PI / 6) * (isNorthernHemisphere ? 1 : -1);\n      \n      const record = {\n        year,\n        date: `${year}-${targetMonth.toString().padStart(2, '0')}-${targetDay.toString().padStart(2, '0')}`,\n        temperature: Math.round((baseTemp + seasonalVariation + (Math.random() - 0.5) * 8) * 10) / 10,\n        temperatureMax: Math.round((baseTemp + seasonalVariation + 5 + Math.random() * 5) * 10) / 10,\n        temperatureMin: Math.round((baseTemp + seasonalVariation - 5 - Math.random() * 3) * 10) / 10,\n        precipitation: this.getLocationBasedPrecipitation(lat, lon, targetMonth),\n        windSpeed: Math.round((5 + Math.random() * 15) * 10) / 10,\n        humidity: Math.round((60 + Math.random() * 30) * 10) / 10\n      };\n      \n      dailyRecords.push(record);\n    }\n    \n    return dailyRecords;\n  }\n\n  /**\n   * Generate monthly weather data\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {boolean} isPhilippines - Is location in Philippines\n   * @returns {Array} Monthly weather data\n   */\n  generateMonthlyData(lat, lon, isPhilippines) {\n    const monthlyData = [];\n    \n    for (let month = 1; month <= 12; month++) {\n      const monthName = new Date(2000, month - 1, 1).toLocaleString('default', { month: 'short' });\n      const baseTemp = this.getLocationBasedTemperature(lat, lon, month);\n      const basePrecip = this.getLocationBasedPrecipitation(lat, lon, month);\n      \n      monthlyData.push({\n        month: monthName,\n        temperature: Math.round(baseTemp * 10) / 10,\n        rainfall: Math.round(basePrecip * 10) / 10,\n        windSpeed: Math.round((8 + Math.random() * 6) * 10) / 10\n      });\n    }\n    \n    return monthlyData;\n  }\n\n  /**\n   * Get location-based temperature patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Base temperature for location and month\n   */\n  getLocationBasedTemperature(lat, lon, month) {\n    // Philippines-specific temperature patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      const baseTemp = 27; // Philippines average\n      const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 2; // Mild seasonal variation\n      return baseTemp + seasonalVariation;\n    }\n    \n    // General latitude-based temperature\n    const latitudeFactor = Math.cos(lat * Math.PI / 180);\n    const baseTemp = 15 + latitudeFactor * 20;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * (lat > 0 ? 1 : -1) * 15;\n    \n    return baseTemp + seasonalVariation;\n  }\n\n  /**\n   * Get location-based precipitation patterns\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @param {number} month - Month (1-12)\n   * @returns {number} Precipitation amount for location and month\n   */\n  getLocationBasedPrecipitation(lat, lon, month) {\n    // Philippines monsoon patterns\n    if (lat >= 4.5 && lat <= 21.5 && lon >= 116 && lon <= 127) {\n      // Wet season (June-November), Dry season (December-May)\n      const isWetSeason = month >= 6 && month <= 11;\n      return isWetSeason ? 15 + Math.random() * 25 : 2 + Math.random() * 8;\n    }\n    \n    // General precipitation patterns\n    const tropicalFactor = Math.max(0, 1 - Math.abs(lat) / 30);\n    const basePrecip = 5 + tropicalFactor * 15;\n    const seasonalVariation = Math.sin((month - 1) * Math.PI / 6) * 10;\n    \n    return Math.max(0, basePrecip + seasonalVariation + Math.random() * 10);\n  }\n\n  /**\n   * Validate Meteomatics API credentials\n   * @returns {boolean} True if credentials are valid\n   */\n  validateCredentials() {\n    return !!(this.username && this.password && this.auth);\n  }\n\n  /**\n   * Get API status information\n   * @returns {Object} API status and configuration\n   */\n  getApiStatus() {\n    return {\n      service: 'Meteomatics Weather API',\n      hasCredentials: this.validateCredentials(),\n      username: this.username,\n      baseUrl: this.baseUrl,\n      corsBlocked: true, // Direct browser access blocked\n      recommendation: 'Use backend proxy for production'\n    };\n  }\n}\n\nexport default MeteomaticsService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}