{"ast":null,"code":"import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n      const url = `${this.baseUrl}/CME?startDate=${startDateStr}&endDate=${endDateStr}&api_key=${this.apiKey}`;\n      console.log('Fetching NASA DONKI space weather data...');\n      const data = await this.get(url, {\n        timeout: 15000\n      });\n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3),\n      // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    const descriptions = ['Coronal Mass Ejection activity may influence upper atmospheric conditions.', 'Space weather events could affect radio communications and satellite operations.', 'Solar activity detected - potential minor effects on weather patterns.', 'Geomagnetic disturbances possible due to solar wind interactions.'];\n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n}\nexport default SpaceWeatherService;","map":{"version":3,"names":["BaseApiService","SpaceWeatherService","constructor","apiKey","baseUrl","fetchSpaceWeatherData","targetDate","dayRange","startDate","addDays","endDate","startDateStr","formatDate","endDateStr","url","console","log","data","get","timeout","length","processSpaceWeatherData","generateDefaultSpaceWeatherData","error","warn","message","cmeData","events","map","event","activityID","startTime","sourceLocation","note","linkedEvents","cmeAnalyses","hasEvents","eventCount","slice","impactLevel","calculateSpaceWeatherImpact","description","getSpaceWeatherDescription","descriptions","Math","min"],"sources":["C:/xampp/htdocs/errors/src/services/api/spaceWeatherService.js"],"sourcesContent":["import BaseApiService from './baseApiService.js';\n\n/**\n * NASA DONKI Space Weather Service\n * Handles Coronal Mass Ejection (CME) and space weather data\n */\nclass SpaceWeatherService extends BaseApiService {\n  constructor() {\n    super();\n    this.apiKey = '64TpVAZmiLUgxbVXQQXmGVV1cEfej2oWoPfLBxEW';\n    this.baseUrl = 'https://api.nasa.gov/DONKI';\n  }\n\n  /**\n   * Fetch space weather data for a specific date range\n   * @param {string} targetDate - Target date for analysis\n   * @param {number} dayRange - Number of days to look ahead/behind\n   * @returns {Promise} Processed space weather data\n   */\n  async fetchSpaceWeatherData(targetDate, dayRange = 7) {\n    try {\n      const startDate = this.addDays(targetDate, -dayRange);\n      const endDate = this.addDays(targetDate, dayRange);\n      \n      const startDateStr = this.formatDate(startDate);\n      const endDateStr = this.formatDate(endDate);\n      \n      const url = `${this.baseUrl}/CME?startDate=${startDateStr}&endDate=${endDateStr}&api_key=${this.apiKey}`;\n      \n      console.log('Fetching NASA DONKI space weather data...');\n      const data = await this.get(url, { timeout: 15000 });\n      \n      if (data && data.length > 0) {\n        console.log(`Found ${data.length} space weather events`);\n        return this.processSpaceWeatherData(data);\n      } else {\n        console.log('No space weather events found for this period');\n        return this.generateDefaultSpaceWeatherData();\n      }\n    } catch (error) {\n      console.warn('NASA DONKI API error:', error.message);\n      return this.generateDefaultSpaceWeatherData();\n    }\n  }\n\n  /**\n   * Process raw CME data from NASA DONKI\n   * @param {Array} cmeData - Raw CME event data\n   * @returns {Object} Processed space weather impact data\n   */\n  processSpaceWeatherData(cmeData) {\n    const events = cmeData.map(event => ({\n      activityID: event.activityID,\n      startTime: event.startTime,\n      sourceLocation: event.sourceLocation,\n      note: event.note,\n      linkedEvents: event.linkedEvents || [],\n      cmeAnalyses: event.cmeAnalyses || []\n    }));\n\n    return {\n      hasEvents: events.length > 0,\n      eventCount: events.length,\n      events: events.slice(0, 3), // Limit to 3 most recent\n      impactLevel: this.calculateSpaceWeatherImpact(events),\n      description: this.getSpaceWeatherDescription(events)\n    };\n  }\n\n  /**\n   * Calculate space weather impact level\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Impact level (minimal, low, moderate, high)\n   */\n  calculateSpaceWeatherImpact(events) {\n    if (events.length === 0) return 'minimal';\n    if (events.length >= 3) return 'high';\n    if (events.length >= 2) return 'moderate';\n    return 'low';\n  }\n\n  /**\n   * Generate description based on space weather events\n   * @param {Array} events - Array of space weather events\n   * @returns {string} Human-readable description\n   */\n  getSpaceWeatherDescription(events) {\n    if (events.length === 0) {\n      return 'No significant space weather events detected. Normal atmospheric conditions expected.';\n    }\n    \n    const descriptions = [\n      'Coronal Mass Ejection activity may influence upper atmospheric conditions.',\n      'Space weather events could affect radio communications and satellite operations.',\n      'Solar activity detected - potential minor effects on weather patterns.',\n      'Geomagnetic disturbances possible due to solar wind interactions.'\n    ];\n    \n    return descriptions[Math.min(events.length - 1, descriptions.length - 1)];\n  }\n\n  /**\n   * Generate default space weather data when no events are found\n   * @returns {Object} Default space weather data structure\n   */\n  generateDefaultSpaceWeatherData() {\n    return {\n      hasEvents: false,\n      eventCount: 0,\n      events: [],\n      impactLevel: 'minimal',\n      description: 'No significant space weather events detected. Normal atmospheric conditions expected.'\n    };\n  }\n}\n\nexport default SpaceWeatherService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}