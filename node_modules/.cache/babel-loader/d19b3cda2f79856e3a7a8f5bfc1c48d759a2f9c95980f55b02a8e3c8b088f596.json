{"ast":null,"code":"import axios from 'axios';\n\n/**\n * Base API Service class with common functionality\n */\nclass BaseApiService {\n  constructor() {\n    this.defaultTimeout = 10000;\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n  }\n\n  /**\n   * Make HTTP GET request with error handling\n   * @param {string} url - API endpoint URL\n   * @param {object} options - Request options\n   * @returns {Promise} Response data\n   */\n  async get(endpoint, options = {}) {\n    const requestUrl = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}/${endpoint}`;\n    try {\n      const config = {\n        timeout: options.timeout || this.defaultTimeout,\n        headers: {\n          ...this.defaultHeaders,\n          ...options.headers\n        },\n        withCredentials: true,\n        // Include credentials for CORS\n        validateStatus: status => status < 500,\n        // Handle 4xx errors in catch\n        ...options\n      };\n      const response = await axios.get(requestUrl, config);\n\n      // Check for error status codes\n      if (response.status >= 400) {\n        var _response$data;\n        throw {\n          response,\n          message: ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.message) || `HTTP error ${response.status}`\n        };\n      }\n      return response.data;\n    } catch (error) {\n      this.handleError(error, requestUrl);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   * @param {Error} error - The error object\n   * @param {string} url - The URL that failed\n   */\n  handleError(error, requestUrl) {\n    if (error.response) {\n      console.error(`API Error (${error.response.status}):`, error.response.data);\n    } else if (error.request) {\n      console.error('Network Error:', error.message);\n    } else {\n      console.error('Request Error:', error.message);\n    }\n    console.error(`Failed URL: ${requestUrl}`);\n  }\n\n  /**\n   * Format date to ISO string\n   * @param {Date|string} date - Date to format\n   * @returns {string} ISO date string\n   */\n  formatDate(date) {\n    return new Date(date).toISOString().split('T')[0];\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Base date\n   * @param {number} days - Number of days to add\n   * @returns {Date} New date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Check if coordinates are valid\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} True if valid\n   */\n  isValidCoordinates(lat, lon) {\n    return typeof lat === 'number' && typeof lon === 'number' && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n  }\n}\nexport default BaseApiService;","map":{"version":3,"names":["axios","BaseApiService","constructor","defaultTimeout","defaultHeaders","get","endpoint","options","requestUrl","startsWith","baseUrl","config","timeout","headers","withCredentials","validateStatus","status","response","_response$data","message","data","error","handleError","console","request","formatDate","date","Date","toISOString","split","addDays","days","result","setDate","getDate","isValidCoordinates","lat","lon"],"sources":["C:/xampp/htdocs/errors/src/services/api/baseApiService.js"],"sourcesContent":["import axios from 'axios';\n\n/**\n * Base API Service class with common functionality\n */\nclass BaseApiService {\n  constructor() {\n    this.defaultTimeout = 10000;\n    this.defaultHeaders = {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    };\n  }\n\n  /**\n   * Make HTTP GET request with error handling\n   * @param {string} url - API endpoint URL\n   * @param {object} options - Request options\n   * @returns {Promise} Response data\n   */\n  async get(endpoint, options = {}) {\n    const requestUrl = endpoint.startsWith('http') ? endpoint : `${this.baseUrl}/${endpoint}`;\n    try {\n      const config = {\n        timeout: options.timeout || this.defaultTimeout,\n        headers: { ...this.defaultHeaders, ...options.headers },\n        withCredentials: true, // Include credentials for CORS\n        validateStatus: status => status < 500, // Handle 4xx errors in catch\n        ...options\n      };\n\n      const response = await axios.get(requestUrl, config);\n      \n      // Check for error status codes\n      if (response.status >= 400) {\n        throw {\n          response,\n          message: response.data?.message || `HTTP error ${response.status}`\n        };\n      }\n\n      return response.data;\n    } catch (error) {\n      this.handleError(error, requestUrl);\n      throw error;\n    }\n  }\n\n  /**\n   * Handle API errors consistently\n   * @param {Error} error - The error object\n   * @param {string} url - The URL that failed\n   */\n  handleError(error, requestUrl) {\n    if (error.response) {\n      console.error(`API Error (${error.response.status}):`, error.response.data);\n    } else if (error.request) {\n      console.error('Network Error:', error.message);\n    } else {\n      console.error('Request Error:', error.message);\n    }\n    console.error(`Failed URL: ${requestUrl}`);\n  }\n\n  /**\n   * Format date to ISO string\n   * @param {Date|string} date - Date to format\n   * @returns {string} ISO date string\n   */\n  formatDate(date) {\n    return new Date(date).toISOString().split('T')[0];\n  }\n\n  /**\n   * Add days to a date\n   * @param {Date|string} date - Base date\n   * @param {number} days - Number of days to add\n   * @returns {Date} New date\n   */\n  addDays(date, days) {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  }\n\n  /**\n   * Check if coordinates are valid\n   * @param {number} lat - Latitude\n   * @param {number} lon - Longitude\n   * @returns {boolean} True if valid\n   */\n  isValidCoordinates(lat, lon) {\n    return (\n      typeof lat === 'number' && \n      typeof lon === 'number' &&\n      lat >= -90 && lat <= 90 &&\n      lon >= -180 && lon <= 180\n    );\n  }\n}\n\nexport default BaseApiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}