{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\errors\\\\src\\\\components\\\\MonitoringPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { GIBSService } from '../services/api/gibsService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MonitoringPanel = ({\n  coordinates\n}) => {\n  _s();\n  const [selectedLayer, setSelectedLayer] = useState('clouds');\n  const [cloudCoverage, setCloudCoverage] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const gibsService = new GIBSService();\n\n  // Function to determine if it's daytime at the given coordinates\n  const isDaytime = useCallback(() => {\n    if (!coordinates) return true;\n    const date = new Date();\n    const hours = date.getUTCHours() + coordinates.lon / 15; // Approximate local time\n    return hours >= 6 && hours < 18; // Consider 6 AM to 6 PM as daytime\n  }, [coordinates]);\n\n  // Update layer based on time of day\n  useEffect(() => {\n    const newLayer = isDaytime() ? 'clouds' : 'cloudNight';\n    setSelectedLayer(newLayer);\n  }, [isDaytime]);\n\n  // Fetch cloud coverage data\n  useEffect(() => {\n    const fetchCloudData = async () => {\n      if (!coordinates) return;\n      setLoading(true);\n      setError(null);\n      try {\n        const layerInfo = gibsService.getLayerInfo(selectedLayer);\n        if (!layerInfo) {\n          throw new Error('Cloud layer information not available');\n        }\n        const isAvailable = await gibsService.isLayerAvailable(selectedLayer);\n        if (!isAvailable) {\n          throw new Error('Cloud data not available for the selected time');\n        }\n\n        // Set the cloud coverage data\n        setCloudCoverage({\n          layer: selectedLayer,\n          title: layerInfo.title,\n          description: layerInfo.description,\n          time: new Date().toISOString()\n        });\n      } catch (err) {\n        console.error('Error fetching cloud data:', err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchCloudData();\n  }, [coordinates, selectedLayer]);\n  if (!coordinates) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white rounded-lg shadow-lg p-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500\",\n        children: \"Select a location to view weather monitoring data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-lg shadow-lg p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-lg font-semibold mb-4\",\n      children: \"Weather Monitoring\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-md font-medium mb-2\",\n        children: \"Selected Location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-600\",\n        children: [\"Latitude: \", coordinates.lat.toFixed(4), \"\\xB0\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 50\n        }, this), \"Longitude: \", coordinates.lon.toFixed(4), \"\\xB0\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-500 mt-2\",\n        children: \"Loading weather data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-red-50 border border-red-200 rounded p-3 mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-red-600\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), cloudCoverage && !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-md font-medium mb-2\",\n          children: cloudCoverage.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-600\",\n          children: cloudCoverage.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm text-gray-500\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last updated: \", new Date(cloudCoverage.time).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 pt-4 border-t\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50\",\n        onClick: () => setSelectedLayer(isDaytime() ? 'clouds' : 'cloudNight'),\n        disabled: loading,\n        children: \"Refresh Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(MonitoringPanel, \"Pjg3WeiRtRSAcTlDq+oNCeSBM3A=\");\n_c = MonitoringPanel;\nexport default MonitoringPanel;\nvar _c;\n$RefreshReg$(_c, \"MonitoringPanel\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","GIBSService","jsxDEV","_jsxDEV","MonitoringPanel","coordinates","_s","selectedLayer","setSelectedLayer","cloudCoverage","setCloudCoverage","loading","setLoading","error","setError","gibsService","isDaytime","date","Date","hours","getUTCHours","lon","newLayer","fetchCloudData","layerInfo","getLayerInfo","Error","isAvailable","isLayerAvailable","layer","title","description","time","toISOString","err","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","lat","toFixed","toLocaleString","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/errors/src/components/MonitoringPanel.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { GIBSService } from '../services/api/gibsService';\r\n\r\nconst MonitoringPanel = ({ coordinates }) => {\r\n  const [selectedLayer, setSelectedLayer] = useState('clouds');\r\n  const [cloudCoverage, setCloudCoverage] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const gibsService = new GIBSService();\r\n\r\n  // Function to determine if it's daytime at the given coordinates\r\n  const isDaytime = useCallback(() => {\r\n    if (!coordinates) return true;\r\n    \r\n    const date = new Date();\r\n    const hours = date.getUTCHours() + (coordinates.lon / 15); // Approximate local time\r\n    return hours >= 6 && hours < 18; // Consider 6 AM to 6 PM as daytime\r\n  }, [coordinates]);\r\n\r\n  // Update layer based on time of day\r\n  useEffect(() => {\r\n    const newLayer = isDaytime() ? 'clouds' : 'cloudNight';\r\n    setSelectedLayer(newLayer);\r\n  }, [isDaytime]);\r\n\r\n  // Fetch cloud coverage data\r\n  useEffect(() => {\r\n    const fetchCloudData = async () => {\r\n      if (!coordinates) return;\r\n\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const layerInfo = gibsService.getLayerInfo(selectedLayer);\r\n        if (!layerInfo) {\r\n          throw new Error('Cloud layer information not available');\r\n        }\r\n\r\n        const isAvailable = await gibsService.isLayerAvailable(selectedLayer);\r\n        if (!isAvailable) {\r\n          throw new Error('Cloud data not available for the selected time');\r\n        }\r\n\r\n        // Set the cloud coverage data\r\n        setCloudCoverage({\r\n          layer: selectedLayer,\r\n          title: layerInfo.title,\r\n          description: layerInfo.description,\r\n          time: new Date().toISOString()\r\n        });\r\n      } catch (err) {\r\n        console.error('Error fetching cloud data:', err);\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchCloudData();\r\n  }, [coordinates, selectedLayer]);\r\n\r\n  if (!coordinates) {\r\n    return (\r\n      <div className=\"bg-white rounded-lg shadow-lg p-4\">\r\n        <p className=\"text-gray-500\">Select a location to view weather monitoring data</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-lg p-4\">\r\n      <h2 className=\"text-lg font-semibold mb-4\">Weather Monitoring</h2>\r\n      \r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-md font-medium mb-2\">Selected Location</h3>\r\n        <p className=\"text-sm text-gray-600\">\r\n          Latitude: {coordinates.lat.toFixed(4)}°<br />\r\n          Longitude: {coordinates.lon.toFixed(4)}°\r\n        </p>\r\n      </div>\r\n\r\n      {loading && (\r\n        <div className=\"text-center py-4\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p className=\"text-sm text-gray-500 mt-2\">Loading weather data...</p>\r\n        </div>\r\n      )}\r\n\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded p-3 mb-4\">\r\n          <p className=\"text-sm text-red-600\">{error}</p>\r\n        </div>\r\n      )}\r\n\r\n      {cloudCoverage && !loading && !error && (\r\n        <div>\r\n          <div className=\"mb-4\">\r\n            <h3 className=\"text-md font-medium mb-2\">{cloudCoverage.title}</h3>\r\n            <p className=\"text-sm text-gray-600\">{cloudCoverage.description}</p>\r\n          </div>\r\n\r\n          <div className=\"text-sm text-gray-500\">\r\n            <p>Last updated: {new Date(cloudCoverage.time).toLocaleString()}</p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"mt-4 pt-4 border-t\">\r\n        <button\r\n          className=\"w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 disabled:opacity-50\"\r\n          onClick={() => setSelectedLayer(isDaytime() ? 'clouds' : 'cloudNight')}\r\n          disabled={loading}\r\n        >\r\n          Refresh Data\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonitoringPanel;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,QAAQ,CAAC;EAC5D,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMiB,WAAW,GAAG,IAAId,WAAW,CAAC,CAAC;;EAErC;EACA,MAAMe,SAAS,GAAGhB,WAAW,CAAC,MAAM;IAClC,IAAI,CAACK,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMY,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;IACvB,MAAMC,KAAK,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC,GAAIf,WAAW,CAACgB,GAAG,GAAG,EAAG,CAAC,CAAC;IAC3D,OAAOF,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE,CAAC,CAAC;EACnC,CAAC,EAAE,CAACd,WAAW,CAAC,CAAC;;EAEjB;EACAN,SAAS,CAAC,MAAM;IACd,MAAMuB,QAAQ,GAAGN,SAAS,CAAC,CAAC,GAAG,QAAQ,GAAG,YAAY;IACtDR,gBAAgB,CAACc,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACN,SAAS,CAAC,CAAC;;EAEf;EACAjB,SAAS,CAAC,MAAM;IACd,MAAMwB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI,CAAClB,WAAW,EAAE;MAElBO,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMU,SAAS,GAAGT,WAAW,CAACU,YAAY,CAAClB,aAAa,CAAC;QACzD,IAAI,CAACiB,SAAS,EAAE;UACd,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;QAC1D;QAEA,MAAMC,WAAW,GAAG,MAAMZ,WAAW,CAACa,gBAAgB,CAACrB,aAAa,CAAC;QACrE,IAAI,CAACoB,WAAW,EAAE;UAChB,MAAM,IAAID,KAAK,CAAC,gDAAgD,CAAC;QACnE;;QAEA;QACAhB,gBAAgB,CAAC;UACfmB,KAAK,EAAEtB,aAAa;UACpBuB,KAAK,EAAEN,SAAS,CAACM,KAAK;UACtBC,WAAW,EAAEP,SAAS,CAACO,WAAW;UAClCC,IAAI,EAAE,IAAId,IAAI,CAAC,CAAC,CAACe,WAAW,CAAC;QAC/B,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACtB,KAAK,CAAC,4BAA4B,EAAEqB,GAAG,CAAC;QAChDpB,QAAQ,CAACoB,GAAG,CAACE,OAAO,CAAC;MACvB,CAAC,SAAS;QACRxB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDW,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,CAAClB,WAAW,EAAEE,aAAa,CAAC,CAAC;EAEhC,IAAI,CAACF,WAAW,EAAE;IAChB,oBACEF,OAAA;MAAKkC,SAAS,EAAC,mCAAmC;MAAAC,QAAA,eAChDnC,OAAA;QAAGkC,SAAS,EAAC,eAAe;QAAAC,QAAA,EAAC;MAAiD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/E,CAAC;EAEV;EAEA,oBACEvC,OAAA;IAAKkC,SAAS,EAAC,mCAAmC;IAAAC,QAAA,gBAChDnC,OAAA;MAAIkC,SAAS,EAAC,4BAA4B;MAAAC,QAAA,EAAC;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAElEvC,OAAA;MAAKkC,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnBnC,OAAA;QAAIkC,SAAS,EAAC,0BAA0B;QAAAC,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/DvC,OAAA;QAAGkC,SAAS,EAAC,uBAAuB;QAAAC,QAAA,GAAC,YACzB,EAACjC,WAAW,CAACsC,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,EAAC,MAAC,eAAAzC,OAAA;UAAAoC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClC,EAACrC,WAAW,CAACgB,GAAG,CAACuB,OAAO,CAAC,CAAC,CAAC,EAAC,MACzC;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAEL/B,OAAO,iBACNR,OAAA;MAAKkC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BnC,OAAA;QAAKkC,SAAS,EAAC;MAAsE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC5FvC,OAAA;QAAGkC,SAAS,EAAC,4BAA4B;QAAAC,QAAA,EAAC;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClE,CACN,EAEA7B,KAAK,iBACJV,OAAA;MAAKkC,SAAS,EAAC,kDAAkD;MAAAC,QAAA,eAC/DnC,OAAA;QAAGkC,SAAS,EAAC,sBAAsB;QAAAC,QAAA,EAAEzB;MAAK;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CACN,EAEAjC,aAAa,IAAI,CAACE,OAAO,IAAI,CAACE,KAAK,iBAClCV,OAAA;MAAAmC,QAAA,gBACEnC,OAAA;QAAKkC,SAAS,EAAC,MAAM;QAAAC,QAAA,gBACnBnC,OAAA;UAAIkC,SAAS,EAAC,0BAA0B;UAAAC,QAAA,EAAE7B,aAAa,CAACqB;QAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACnEvC,OAAA;UAAGkC,SAAS,EAAC,uBAAuB;UAAAC,QAAA,EAAE7B,aAAa,CAACsB;QAAW;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC,eAENvC,OAAA;QAAKkC,SAAS,EAAC,uBAAuB;QAAAC,QAAA,eACpCnC,OAAA;UAAAmC,QAAA,GAAG,gBAAc,EAAC,IAAIpB,IAAI,CAACT,aAAa,CAACuB,IAAI,CAAC,CAACa,cAAc,CAAC,CAAC;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDvC,OAAA;MAAKkC,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eACjCnC,OAAA;QACEkC,SAAS,EAAC,iKAAiK;QAC3KS,OAAO,EAAEA,CAAA,KAAMtC,gBAAgB,CAACQ,SAAS,CAAC,CAAC,GAAG,QAAQ,GAAG,YAAY,CAAE;QACvE+B,QAAQ,EAAEpC,OAAQ;QAAA2B,QAAA,EACnB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACpC,EAAA,CArHIF,eAAe;AAAA4C,EAAA,GAAf5C,eAAe;AAuHrB,eAAeA,eAAe;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}