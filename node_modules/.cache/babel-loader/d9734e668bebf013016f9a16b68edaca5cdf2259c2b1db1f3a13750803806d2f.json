{"ast":null,"code":"import DisasterTrackingService from './api/disasterTrackingService.js';\nimport EonetService from './api/eonetService.js';\nimport PowerService from './api/powerService.js';\nimport DonkiService from './api/donkiService.js';\nimport GiovanniService from './api/giovanniService.js';\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\n\n/**\r\n * Main Weather Service - Orchestrates all weather-related data sources\r\n * This is the primary service that components should interact with\r\n */\nclass WeatherService {\n  constructor() {\n    this.getWeatherAnalysis = async (lat, lon, targetDate) => {\n      try {\n        var _giovanniData$tempera, _giovanniData$precipi, _giovanniData$humidit;\n        console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\n\n        // Validate inputs\n        if (!this.isValidCoordinates(lat, lon)) {\n          throw new Error('Invalid coordinates provided');\n        }\n\n        // Ensure targetDate is a Date object and in ISO format\n        const targetDateObj = new Date(targetDate);\n        if (isNaN(targetDateObj.getTime())) {\n          throw new Error('Invalid date format provided');\n        }\n\n        // Calculate date range for weather data\n        const startDateObj = new Date(targetDateObj);\n        const endDateObj = new Date(targetDateObj);\n        startDateObj.setDate(startDateObj.getDate() - this.config.defaultDayRange);\n        endDateObj.setDate(endDateObj.getDate() + this.config.defaultDayRange);\n\n        // Format dates and prepare parameters\n        const formattedStartDate = this.formatDateWithDashes(startDateObj);\n        const formattedEndDate = this.formatDateWithDashes(endDateObj);\n        const coordinates = {\n          lat,\n          lon\n        };\n\n        // Fetch data from all sources in parallel\n        const [powerWeatherData, giovanniData, eonetData, donkiData] = await Promise.all([\n        // Weather data from POWER API (primary source)\n        this.powerService.fetchWeatherData(coordinates, formattedStartDate, formattedEndDate).catch(error => {\n          console.error('POWER API data fetch failed:', error);\n          return {\n            temperature: null,\n            precipitation: null,\n            humidity: null\n          };\n        }),\n        // Additional weather data from GES DISC Giovanni API (backup/supplemental source)\n        this.giovanniService.getWeatherData(lat, lon, formattedStartDate, formattedEndDate).catch(error => {\n          console.error('Giovanni API data fetch failed:', error);\n          return {\n            temperature: null,\n            precipitation: null,\n            humidity: null\n          };\n        }),\n        // Storm events from EONET\n        this.eonetService.getWeatherEvents({\n          days: this.config.defaultDayRange,\n          status: 'all'\n        }).catch(error => {\n          console.error('EONET data fetch failed:', error);\n          return {\n            events: [],\n            alerts: []\n          };\n        }),\n        // Space weather from DONKI\n        this.donkiService.fetchSpaceWeatherData(formattedStartDate, formattedEndDate).catch(error => {\n          console.error('DONKI API data fetch failed:', error);\n          return {\n            solarFlares: [],\n            geomagneticStorms: []\n          };\n        })]);\n\n        // Process and merge the collected data\n        // Merge POWER and Giovanni data, preferring POWER when available\n        const mergedWeatherData = {\n          temperature: (powerWeatherData === null || powerWeatherData === void 0 ? void 0 : powerWeatherData.temperature) || (giovanniData === null || giovanniData === void 0 ? void 0 : (_giovanniData$tempera = giovanniData.temperature) === null || _giovanniData$tempera === void 0 ? void 0 : _giovanniData$tempera.value),\n          precipitation: (powerWeatherData === null || powerWeatherData === void 0 ? void 0 : powerWeatherData.precipitation) || (giovanniData === null || giovanniData === void 0 ? void 0 : (_giovanniData$precipi = giovanniData.precipitation) === null || _giovanniData$precipi === void 0 ? void 0 : _giovanniData$precipi.value),\n          humidity: (powerWeatherData === null || powerWeatherData === void 0 ? void 0 : powerWeatherData.humidity) || (giovanniData === null || giovanniData === void 0 ? void 0 : (_giovanniData$humidit = giovanniData.humidity) === null || _giovanniData$humidit === void 0 ? void 0 : _giovanniData$humidit.value),\n          // Additional fields from Giovanni if available\n          satellite: giovanniData ? {\n            temperature: giovanniData.temperature,\n            precipitation: giovanniData.precipitation,\n            humidity: giovanniData.humidity\n          } : null\n        };\n        const processedData = await mergeDataSources({\n          location: {\n            latitude: lat,\n            longitude: lon,\n            timestamp: targetDateObj.toISOString()\n          },\n          weather: {\n            ...mergedWeatherData,\n            events: (eonetData === null || eonetData === void 0 ? void 0 : eonetData.events) || [],\n            alerts: (eonetData === null || eonetData === void 0 ? void 0 : eonetData.alerts) || []\n          },\n          spaceWeather: {\n            solarFlares: (donkiData === null || donkiData === void 0 ? void 0 : donkiData.solarFlares) || [],\n            geomagneticStorms: (donkiData === null || donkiData === void 0 ? void 0 : donkiData.geomagneticStorms) || []\n          },\n          metadata: {\n            requestTime: new Date().toISOString(),\n            dataProviders: {\n              power: !!(powerWeatherData !== null && powerWeatherData !== void 0 && powerWeatherData.temperature),\n              giovanni: !!(giovanniData !== null && giovanniData !== void 0 && giovanniData.temperature),\n              eonet: Array.isArray(eonetData === null || eonetData === void 0 ? void 0 : eonetData.events) && eonetData.events.length > 0,\n              donki: Array.isArray(donkiData === null || donkiData === void 0 ? void 0 : donkiData.solarFlares) || Array.isArray(donkiData === null || donkiData === void 0 ? void 0 : donkiData.geomagneticStorms)\n            }\n          }\n        });\n\n        // Validate the merged data\n        const validation = validateDataIntegrity(processedData);\n        const warnings = validation.isValid ? undefined : validation.errors;\n\n        // Return processed data with metadata\n        return {\n          ...processedData,\n          validation: {\n            ...validation,\n            timestamp: new Date().toISOString()\n          },\n          warnings\n        };\n      } catch (error) {\n        console.error('Error in weather analysis:', error);\n        throw new Error(`Weather analysis failed: ${error.message}`);\n      }\n    };\n    this.addDays = (date, days) => {\n      const result = new Date(date);\n      result.setDate(result.getDate() + days);\n      return result;\n    };\n    this.formatDate = date => {\n      return date.toISOString().split('T')[0].replace(/-/g, '');\n    };\n    this.formatDateWithDashes = date => {\n      return date.toISOString().split('T')[0];\n    };\n    this.getDisasterEvents = async (days = 30, status = 'open') => {\n      try {\n        if (!this.config.enableDisasterTracking) {\n          console.log('Disaster tracking is disabled');\n          return [];\n        }\n        return await this.disasterTrackingService.fetchDisasterEvents(days, status);\n      } catch (error) {\n        console.error('Error fetching disaster events:', error);\n        return [];\n      }\n    };\n    this.getSpaceWeatherData = async (targetDate, dayRange = 7) => {\n      try {\n        if (!this.config.enableSpaceWeather) {\n          console.log('Space weather tracking is disabled');\n          return {\n            solarFlares: [],\n            geomagneticStorms: [],\n            summary: {\n              activityLevel: 'Unknown'\n            }\n          };\n        }\n        return await this.donkiService.fetchSpaceWeatherData(targetDate, dayRange);\n      } catch (error) {\n        console.error('Error fetching space weather data:', error);\n        return {\n          solarFlares: [],\n          geomagneticStorms: [],\n          summary: {\n            activityLevel: 'Unknown'\n          }\n        };\n      }\n    };\n    this.isValidCoordinates = (lat, lon) => {\n      return !isNaN(lat) && !isNaN(lon) && lat >= -90 && lat <= 90 && lon >= -180 && lon <= 180;\n    };\n    this.filterDisasterEvents = (events, filters = {}) => {\n      let filteredEvents = [...events];\n      if (filters.category && filters.category !== 'all') {\n        filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\n      }\n      if (filters.severity && filters.severity !== 'all') {\n        filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\n      }\n      return filteredEvents;\n    };\n    this.getDisasterStatistics = events => {\n      return this.disasterTrackingService.getEventStatistics(events);\n    };\n    this.getDisasterEventIcon = categoryId => {\n      return this.disasterTrackingService.getEventIcon(categoryId);\n    };\n    this.exportData = (data, format = 'json') => {\n      const {\n        formatForExport\n      } = require('./utils/dataProcessor.js');\n      return formatForExport(data, format);\n    };\n    this.getServiceStatus = () => {\n      return {\n        services: {\n          power: this.powerService.getApiStatus(),\n          spaceWeather: {\n            service: 'NASA DONKI Space Weather',\n            enabled: this.config.enableSpaceWeather,\n            baseUrl: this.donkiService.baseUrl\n          },\n          disasterTracking: {\n            service: 'NASA EONET Disaster Tracking',\n            enabled: this.config.enableDisasterTracking,\n            baseUrl: this.disasterTrackingService.baseUrl\n          }\n        },\n        configuration: this.config,\n        lastUpdated: new Date().toISOString()\n      };\n    };\n    this.updateConfiguration = newConfig => {\n      this.config = {\n        ...this.config,\n        ...newConfig\n      };\n      console.log('Service configuration updated:', this.config);\n    };\n    this.healthCheck = async () => {\n      const health = {\n        overall: 'healthy',\n        services: {},\n        timestamp: new Date().toISOString()\n      };\n      try {\n        // Check Power service\n        try {\n          await this.powerService.testConnection();\n          health.services.power = {\n            status: 'healthy',\n            message: 'Service operational'\n          };\n        } catch (error) {\n          health.services.power = {\n            status: 'unhealthy',\n            message: error.message\n          };\n          health.overall = 'degraded';\n        }\n\n        // Check space weather service\n        try {\n          await this.donkiService.fetchSpaceWeatherData(new Date().toISOString());\n          health.services.spaceWeather = {\n            status: 'healthy',\n            message: 'Service operational'\n          };\n        } catch (error) {\n          health.services.spaceWeather = {\n            status: 'unhealthy',\n            message: error.message\n          };\n          health.overall = 'degraded';\n        }\n\n        // Check Giovanni service\n        try {\n          const today = new Date();\n          const yesterday = new Date(today);\n          yesterday.setDate(yesterday.getDate() - 1);\n          await this.giovanniService.getWeatherData(0, 0, this.formatDateWithDashes(yesterday), this.formatDateWithDashes(today));\n          health.services.giovanni = {\n            status: 'healthy',\n            message: 'Service operational'\n          };\n        } catch (error) {\n          health.services.giovanni = {\n            status: 'unhealthy',\n            message: error.message\n          };\n          health.overall = 'degraded';\n        }\n\n        // Check disaster tracking service\n        try {\n          const testEvents = await this.disasterTrackingService.fetchDisasterEvents(1, 'all');\n          health.services.disasterTracking = {\n            status: 'healthy',\n            message: 'Service operational'\n          };\n        } catch (error) {\n          health.services.disasterTracking = {\n            status: 'unhealthy',\n            message: error.message\n          };\n          health.overall = 'degraded';\n        }\n      } catch (error) {\n        health.overall = 'unhealthy';\n        health.error = error.message;\n      }\n      return health;\n    };\n    // Initialize individual service modules\n    this.disasterTrackingService = new DisasterTrackingService();\n    this.eonetService = EonetService;\n    this.powerService = PowerService;\n    this.donkiService = DonkiService;\n    this.giovanniService = GiovanniService;\n\n    // Service configuration\n    this.config = {\n      enableDisasterTracking: true,\n      enableSpaceWeather: true,\n      defaultDayRange: 7,\n      maxRetries: 3\n    };\n  }\n}\n\n// Export singleton instance\nconst weatherService = new WeatherService();\nexport default weatherService;","map":{"version":3,"names":["DisasterTrackingService","EonetService","PowerService","DonkiService","GiovanniService","processHistoricalData","mergeDataSources","validateDataIntegrity","WeatherService","constructor","getWeatherAnalysis","lat","lon","targetDate","_giovanniData$tempera","_giovanniData$precipi","_giovanniData$humidit","console","log","isValidCoordinates","Error","targetDateObj","Date","isNaN","getTime","startDateObj","endDateObj","setDate","getDate","config","defaultDayRange","formattedStartDate","formatDateWithDashes","formattedEndDate","coordinates","powerWeatherData","giovanniData","eonetData","donkiData","Promise","all","powerService","fetchWeatherData","catch","error","temperature","precipitation","humidity","giovanniService","getWeatherData","eonetService","getWeatherEvents","days","status","events","alerts","donkiService","fetchSpaceWeatherData","solarFlares","geomagneticStorms","mergedWeatherData","value","satellite","processedData","location","latitude","longitude","timestamp","toISOString","weather","spaceWeather","metadata","requestTime","dataProviders","power","giovanni","eonet","Array","isArray","length","donki","validation","warnings","isValid","undefined","errors","message","addDays","date","result","formatDate","split","replace","getDisasterEvents","enableDisasterTracking","disasterTrackingService","fetchDisasterEvents","getSpaceWeatherData","dayRange","enableSpaceWeather","summary","activityLevel","filterDisasterEvents","filters","filteredEvents","category","filterByCategory","severity","filterBySeverity","getDisasterStatistics","getEventStatistics","getDisasterEventIcon","categoryId","getEventIcon","exportData","data","format","formatForExport","require","getServiceStatus","services","getApiStatus","service","enabled","baseUrl","disasterTracking","configuration","lastUpdated","updateConfiguration","newConfig","healthCheck","health","overall","testConnection","today","yesterday","testEvents","maxRetries","weatherService"],"sources":["C:/xampp/htdocs/errors/src/services/weatherService.js"],"sourcesContent":["import DisasterTrackingService from './api/disasterTrackingService.js';\r\nimport EonetService from './api/eonetService.js';\r\nimport PowerService from './api/powerService.js';\r\nimport DonkiService from './api/donkiService.js';\r\nimport GiovanniService from './api/giovanniService.js';\r\nimport { processHistoricalData, mergeDataSources, validateDataIntegrity } from './utils/dataProcessor.js';\r\n\r\n/**\r\n * Main Weather Service - Orchestrates all weather-related data sources\r\n * This is the primary service that components should interact with\r\n */\r\nclass WeatherService {\r\n  constructor() {\r\n    // Initialize individual service modules\r\n    this.disasterTrackingService = new DisasterTrackingService();\r\n    this.eonetService = EonetService;\r\n    this.powerService = PowerService;\r\n    this.donkiService = DonkiService;\r\n    this.giovanniService = GiovanniService;\r\n    \r\n    // Service configuration\r\n    this.config = {\r\n      enableDisasterTracking: true,\r\n      enableSpaceWeather: true,\r\n      defaultDayRange: 7,\r\n      maxRetries: 3\r\n    };\r\n  }\r\n\r\n  getWeatherAnalysis = async (lat, lon, targetDate) => {\r\n    try {\r\n      console.log(`Fetching comprehensive weather analysis for ${lat}, ${lon} on ${targetDate}`);\r\n      \r\n      // Validate inputs\r\n      if (!this.isValidCoordinates(lat, lon)) {\r\n        throw new Error('Invalid coordinates provided');\r\n      }\r\n\r\n      // Ensure targetDate is a Date object and in ISO format\r\n      const targetDateObj = new Date(targetDate);\r\n      if (isNaN(targetDateObj.getTime())) {\r\n        throw new Error('Invalid date format provided');\r\n      }\r\n\r\n      // Calculate date range for weather data\r\n      const startDateObj = new Date(targetDateObj);\r\n      const endDateObj = new Date(targetDateObj);\r\n      startDateObj.setDate(startDateObj.getDate() - this.config.defaultDayRange);\r\n      endDateObj.setDate(endDateObj.getDate() + this.config.defaultDayRange);\r\n\r\n      // Format dates and prepare parameters\r\n      const formattedStartDate = this.formatDateWithDashes(startDateObj);\r\n      const formattedEndDate = this.formatDateWithDashes(endDateObj);\r\n      const coordinates = { lat, lon };\r\n\r\n      // Fetch data from all sources in parallel\r\n      const [powerWeatherData, giovanniData, eonetData, donkiData] = await Promise.all([\r\n        // Weather data from POWER API (primary source)\r\n        this.powerService.fetchWeatherData(coordinates, formattedStartDate, formattedEndDate)\r\n          .catch(error => {\r\n            console.error('POWER API data fetch failed:', error);\r\n            return { temperature: null, precipitation: null, humidity: null };\r\n          }),\r\n\r\n        // Additional weather data from GES DISC Giovanni API (backup/supplemental source)\r\n        this.giovanniService.getWeatherData(lat, lon, formattedStartDate, formattedEndDate)\r\n          .catch(error => {\r\n            console.error('Giovanni API data fetch failed:', error);\r\n            return { temperature: null, precipitation: null, humidity: null };\r\n          }),\r\n\r\n        // Storm events from EONET\r\n        this.eonetService.getWeatherEvents({ \r\n          days: this.config.defaultDayRange,\r\n          status: 'all' \r\n        }).catch(error => {\r\n          console.error('EONET data fetch failed:', error);\r\n          return { events: [], alerts: [] };\r\n        }),\r\n\r\n        // Space weather from DONKI\r\n        this.donkiService.fetchSpaceWeatherData(formattedStartDate, formattedEndDate)\r\n          .catch(error => {\r\n            console.error('DONKI API data fetch failed:', error);\r\n            return { solarFlares: [], geomagneticStorms: [] };\r\n          })\r\n      ]);\r\n\r\n      // Process and merge the collected data\r\n      // Merge POWER and Giovanni data, preferring POWER when available\r\n      const mergedWeatherData = {\r\n        temperature: powerWeatherData?.temperature || giovanniData?.temperature?.value,\r\n        precipitation: powerWeatherData?.precipitation || giovanniData?.precipitation?.value,\r\n        humidity: powerWeatherData?.humidity || giovanniData?.humidity?.value,\r\n        // Additional fields from Giovanni if available\r\n        satellite: giovanniData ? {\r\n          temperature: giovanniData.temperature,\r\n          precipitation: giovanniData.precipitation,\r\n          humidity: giovanniData.humidity\r\n        } : null\r\n      };\r\n\r\n      const processedData = await mergeDataSources({\r\n        location: {\r\n          latitude: lat,\r\n          longitude: lon,\r\n          timestamp: targetDateObj.toISOString()\r\n        },\r\n        weather: {\r\n          ...mergedWeatherData,\r\n          events: eonetData?.events || [],\r\n          alerts: eonetData?.alerts || []\r\n        },\r\n        spaceWeather: {\r\n          solarFlares: donkiData?.solarFlares || [],\r\n          geomagneticStorms: donkiData?.geomagneticStorms || []\r\n        },\r\n        metadata: {\r\n          requestTime: new Date().toISOString(),\r\n          dataProviders: {\r\n            power: !!powerWeatherData?.temperature,\r\n            giovanni: !!giovanniData?.temperature,\r\n            eonet: Array.isArray(eonetData?.events) && eonetData.events.length > 0,\r\n            donki: (Array.isArray(donkiData?.solarFlares) || Array.isArray(donkiData?.geomagneticStorms))\r\n          }\r\n        }\r\n      });\r\n\r\n      // Validate the merged data\r\n      const validation = validateDataIntegrity(processedData);\r\n      const warnings = validation.isValid ? undefined : validation.errors;\r\n\r\n      // Return processed data with metadata\r\n      return {\r\n        ...processedData,\r\n        validation: {\r\n          ...validation,\r\n          timestamp: new Date().toISOString()\r\n        },\r\n        warnings\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Error in weather analysis:', error);\r\n      throw new Error(`Weather analysis failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  addDays = (date, days) => {\r\n    const result = new Date(date);\r\n    result.setDate(result.getDate() + days);\r\n    return result;\r\n  };\r\n\r\n  formatDate = (date) => {\r\n    return date.toISOString().split('T')[0].replace(/-/g, '');\r\n  };\r\n\r\n  formatDateWithDashes = (date) => {\r\n    return date.toISOString().split('T')[0];\r\n  };\r\n\r\n  getDisasterEvents = async (days = 30, status = 'open') => {\r\n    try {\r\n      if (!this.config.enableDisasterTracking) {\r\n        console.log('Disaster tracking is disabled');\r\n        return [];\r\n      }\r\n      return await this.disasterTrackingService.fetchDisasterEvents(days, status);\r\n    } catch (error) {\r\n      console.error('Error fetching disaster events:', error);\r\n      return [];\r\n    }\r\n  };\r\n\r\n  getSpaceWeatherData = async (targetDate, dayRange = 7) => {\r\n    try {\r\n      if (!this.config.enableSpaceWeather) {\r\n        console.log('Space weather tracking is disabled');\r\n        return { solarFlares: [], geomagneticStorms: [], summary: { activityLevel: 'Unknown' } };\r\n      }\r\n      return await this.donkiService.fetchSpaceWeatherData(targetDate, dayRange);\r\n    } catch (error) {\r\n      console.error('Error fetching space weather data:', error);\r\n      return { solarFlares: [], geomagneticStorms: [], summary: { activityLevel: 'Unknown' } };\r\n    }\r\n  };\r\n\r\n  isValidCoordinates = (lat, lon) => {\r\n    return !isNaN(lat) && !isNaN(lon) && \r\n           lat >= -90 && lat <= 90 && \r\n           lon >= -180 && lon <= 180;\r\n  };\r\n\r\n  filterDisasterEvents = (events, filters = {}) => {\r\n    let filteredEvents = [...events];\r\n    if (filters.category && filters.category !== 'all') {\r\n      filteredEvents = this.disasterTrackingService.filterByCategory(filteredEvents, filters.category);\r\n    }\r\n    if (filters.severity && filters.severity !== 'all') {\r\n      filteredEvents = this.disasterTrackingService.filterBySeverity(filteredEvents, filters.severity);\r\n    }\r\n    return filteredEvents;\r\n  };\r\n\r\n  getDisasterStatistics = (events) => {\r\n    return this.disasterTrackingService.getEventStatistics(events);\r\n  };\r\n\r\n  getDisasterEventIcon = (categoryId) => {\r\n    return this.disasterTrackingService.getEventIcon(categoryId);\r\n  };\r\n\r\n  exportData = (data, format = 'json') => {\r\n    const { formatForExport } = require('./utils/dataProcessor.js');\r\n    return formatForExport(data, format);\r\n  };\r\n\r\n  getServiceStatus = () => {\r\n    return {\r\n      services: {\r\n        power: this.powerService.getApiStatus(),\r\n        spaceWeather: {\r\n          service: 'NASA DONKI Space Weather',\r\n          enabled: this.config.enableSpaceWeather,\r\n          baseUrl: this.donkiService.baseUrl\r\n        },\r\n        disasterTracking: {\r\n          service: 'NASA EONET Disaster Tracking',\r\n          enabled: this.config.enableDisasterTracking,\r\n          baseUrl: this.disasterTrackingService.baseUrl\r\n        }\r\n      },\r\n      configuration: this.config,\r\n      lastUpdated: new Date().toISOString()\r\n    };\r\n  };\r\n\r\n  updateConfiguration = (newConfig) => {\r\n    this.config = { ...this.config, ...newConfig };\r\n    console.log('Service configuration updated:', this.config);\r\n  };\r\n\r\n  healthCheck = async () => {\r\n    const health = {\r\n      overall: 'healthy',\r\n      services: {},\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    try {\r\n      // Check Power service\r\n      try {\r\n        await this.powerService.testConnection();\r\n        health.services.power = { status: 'healthy', message: 'Service operational' };\r\n      } catch (error) {\r\n        health.services.power = { status: 'unhealthy', message: error.message };\r\n        health.overall = 'degraded';\r\n      }\r\n\r\n      // Check space weather service\r\n      try {\r\n        await this.donkiService.fetchSpaceWeatherData(new Date().toISOString());\r\n        health.services.spaceWeather = { status: 'healthy', message: 'Service operational' };\r\n      } catch (error) {\r\n        health.services.spaceWeather = { status: 'unhealthy', message: error.message };\r\n        health.overall = 'degraded';\r\n      }\r\n\r\n      // Check Giovanni service\r\n      try {\r\n        const today = new Date();\r\n        const yesterday = new Date(today);\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        await this.giovanniService.getWeatherData(0, 0, \r\n          this.formatDateWithDashes(yesterday),\r\n          this.formatDateWithDashes(today)\r\n        );\r\n        health.services.giovanni = { status: 'healthy', message: 'Service operational' };\r\n      } catch (error) {\r\n        health.services.giovanni = { status: 'unhealthy', message: error.message };\r\n        health.overall = 'degraded';\r\n      }\r\n\r\n      // Check disaster tracking service\r\n      try {\r\n        const testEvents = await this.disasterTrackingService.fetchDisasterEvents(1, 'all');\r\n        health.services.disasterTracking = { status: 'healthy', message: 'Service operational' };\r\n      } catch (error) {\r\n        health.services.disasterTracking = { status: 'unhealthy', message: error.message };\r\n        health.overall = 'degraded';\r\n      }\r\n\r\n    } catch (error) {\r\n      health.overall = 'unhealthy';\r\n      health.error = error.message;\r\n    }\r\n\r\n    return health;\r\n  };\r\n}\r\n\r\n// Export singleton instance\r\nconst weatherService = new WeatherService();\r\nexport default weatherService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}