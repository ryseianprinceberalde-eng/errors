{"ast":null,"code":"class WeatherCalculations {\n  calculateProbabilities(historicalData, targetDate) {\n    const {\n      daily\n    } = historicalData;\n    if (!daily || daily.length === 0) {\n      return this.getDefaultProbabilities();\n    }\n    const totalDays = daily.length;\n    let hotDays = 0;\n    let coldDays = 0;\n    let wetDays = 0;\n    let windyDays = 0;\n    let uncomfortableDays = 0;\n    daily.forEach(dayData => {\n      const {\n        temperature,\n        precipitation,\n        windSpeed,\n        humidity\n      } = dayData;\n\n      // Hot weather: temperature > 35°C\n      if (temperature > 35) {\n        hotDays++;\n      }\n\n      // Cold weather: temperature < 5°C\n      if (temperature < 5) {\n        coldDays++;\n      }\n\n      // Wet weather: precipitation > 10mm/day\n      if (precipitation > 10) {\n        wetDays++;\n      }\n\n      // Windy weather: wind speed > 10m/s\n      if (windSpeed > 10) {\n        windyDays++;\n      }\n\n      // Uncomfortable conditions: heat index > 32°C\n      const heatIndex = this.calculateHeatIndex(temperature, humidity);\n      if (heatIndex > 32) {\n        uncomfortableDays++;\n      }\n    });\n    return {\n      hot: Math.round(hotDays / totalDays * 100),\n      cold: Math.round(coldDays / totalDays * 100),\n      wet: Math.round(wetDays / totalDays * 100),\n      windy: Math.round(windyDays / totalDays * 100),\n      uncomfortable: Math.round(uncomfortableDays / totalDays * 100)\n    };\n  }\n  calculateHeatIndex(temperature, humidity) {\n    // Heat index calculation (simplified version)\n    // Based on the formula used by the US National Weather Service\n\n    if (temperature < 27) {\n      return temperature; // Heat index not applicable for cool temperatures\n    }\n    const T = temperature;\n    const RH = humidity;\n\n    // Simplified heat index formula\n    const HI = -8.78469475556 + 1.61139411 * T + 2.33854883889 * RH + -0.14611605 * T * RH + -0.012308094 * T * T + -0.0164248277778 * RH * RH + 0.002211732 * T * T * RH + 0.00072546 * T * RH * RH + -0.000003582 * T * T * RH * RH;\n    return Math.round(HI * 10) / 10;\n  }\n  getDefaultProbabilities() {\n    // Default probabilities when no data is available\n    return {\n      hot: 15,\n      cold: 10,\n      wet: 25,\n      windy: 20,\n      uncomfortable: 18\n    };\n  }\n  analyzeSeasonalPatterns(historicalData) {\n    const {\n      monthly\n    } = historicalData;\n    if (!monthly || monthly.length === 0) {\n      return null;\n    }\n    const patterns = {\n      hottestMonth: null,\n      coldestMonth: null,\n      wettestMonth: null,\n      driestMonth: null,\n      windiestMonth: null,\n      calmestMonth: null\n    };\n    let maxTemp = -Infinity,\n      minTemp = Infinity;\n    let maxRain = -Infinity,\n      minRain = Infinity;\n    let maxWind = -Infinity,\n      minWind = Infinity;\n    monthly.forEach(monthData => {\n      const {\n        month,\n        temperature,\n        rainfall,\n        windSpeed\n      } = monthData;\n      if (temperature > maxTemp) {\n        maxTemp = temperature;\n        patterns.hottestMonth = month;\n      }\n      if (temperature < minTemp) {\n        minTemp = temperature;\n        patterns.coldestMonth = month;\n      }\n      if (rainfall > maxRain) {\n        maxRain = rainfall;\n        patterns.wettestMonth = month;\n      }\n      if (rainfall < minRain) {\n        minRain = rainfall;\n        patterns.driestMonth = month;\n      }\n      if (windSpeed > maxWind) {\n        maxWind = windSpeed;\n        patterns.windiestMonth = month;\n      }\n      if (windSpeed < minWind) {\n        minWind = windSpeed;\n        patterns.calmestMonth = month;\n      }\n    });\n    return patterns;\n  }\n  calculateExtremeEvents(historicalData) {\n    const {\n      daily\n    } = historicalData;\n    if (!daily || daily.length === 0) {\n      return null;\n    }\n    const extremes = {\n      recordHigh: -Infinity,\n      recordLow: Infinity,\n      maxRainfall: -Infinity,\n      maxWindSpeed: -Infinity,\n      heatWaves: 0,\n      coldSnaps: 0,\n      droughts: 0,\n      wetSpells: 0\n    };\n    let consecutiveHotDays = 0;\n    let consecutiveColdDays = 0;\n    let consecutiveDryDays = 0;\n    let consecutiveWetDays = 0;\n    daily.forEach((dayData, index) => {\n      const {\n        temperature,\n        precipitation,\n        windSpeed\n      } = dayData;\n\n      // Record extremes\n      if (temperature > extremes.recordHigh) {\n        extremes.recordHigh = temperature;\n      }\n      if (temperature < extremes.recordLow) {\n        extremes.recordLow = temperature;\n      }\n      if (precipitation > extremes.maxRainfall) {\n        extremes.maxRainfall = precipitation;\n      }\n      if (windSpeed > extremes.maxWindSpeed) {\n        extremes.maxWindSpeed = windSpeed;\n      }\n\n      // Count consecutive events\n      if (temperature > 30) {\n        consecutiveHotDays++;\n        consecutiveColdDays = 0;\n      } else if (temperature < 10) {\n        consecutiveColdDays++;\n        consecutiveHotDays = 0;\n      } else {\n        if (consecutiveHotDays >= 3) extremes.heatWaves++;\n        if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n        consecutiveHotDays = 0;\n        consecutiveColdDays = 0;\n      }\n      if (precipitation < 1) {\n        consecutiveDryDays++;\n        consecutiveWetDays = 0;\n      } else if (precipitation > 5) {\n        consecutiveWetDays++;\n        consecutiveDryDays = 0;\n      } else {\n        if (consecutiveDryDays >= 7) extremes.droughts++;\n        if (consecutiveWetDays >= 3) extremes.wetSpells++;\n        consecutiveDryDays = 0;\n        consecutiveWetDays = 0;\n      }\n    });\n\n    // Handle end of data\n    if (consecutiveHotDays >= 3) extremes.heatWaves++;\n    if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n    if (consecutiveDryDays >= 7) extremes.droughts++;\n    if (consecutiveWetDays >= 3) extremes.wetSpells++;\n    return extremes;\n  }\n  generateWeatherInsights(probabilities, historicalData) {\n    const insights = [];\n\n    // Temperature insights\n    if (probabilities.hot > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'High Heat Probability',\n        message: `There's a ${probabilities.hot}% chance of hot weather (>35°C). Consider heat protection measures.`\n      });\n    } else if (probabilities.cold > 60) {\n      insights.push({\n        type: 'info',\n        title: 'Cold Weather Expected',\n        message: `There's a ${probabilities.cold}% chance of cold weather (<5°C). Dress warmly.`\n      });\n    }\n\n    // Precipitation insights\n    if (probabilities.wet > 70) {\n      insights.push({\n        type: 'info',\n        title: 'High Rain Probability',\n        message: `There's a ${probabilities.wet}% chance of significant rainfall (>10mm). Bring an umbrella.`\n      });\n    } else if (probabilities.wet < 20) {\n      insights.push({\n        type: 'success',\n        title: 'Dry Conditions Expected',\n        message: `Only a ${probabilities.wet}% chance of rain. Great weather for outdoor activities.`\n      });\n    }\n\n    // Wind insights\n    if (probabilities.windy > 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Windy Conditions',\n        message: `${probabilities.windy}% chance of strong winds (>10m/s). Secure loose objects.`\n      });\n    }\n\n    // Comfort insights\n    if (probabilities.uncomfortable > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'Uncomfortable Heat Index',\n        message: `${probabilities.uncomfortable}% chance of uncomfortable conditions. Stay hydrated and seek shade.`\n      });\n    }\n\n    // General insights\n    const totalHighProbabilities = [probabilities.hot, probabilities.cold, probabilities.wet, probabilities.windy].filter(prob => prob > 50).length;\n    if (totalHighProbabilities === 0) {\n      insights.push({\n        type: 'success',\n        title: 'Moderate Weather Expected',\n        message: 'Weather conditions are expected to be generally moderate with no extreme conditions likely.'\n      });\n    } else if (totalHighProbabilities >= 3) {\n      insights.push({\n        type: 'warning',\n        title: 'Variable Conditions',\n        message: 'Multiple weather conditions are possible. Check forecasts closer to your date.'\n      });\n    }\n    return insights;\n  }\n}\nexport const weatherCalculations = new WeatherCalculations();","map":{"version":3,"names":["WeatherCalculations","calculateProbabilities","historicalData","targetDate","daily","length","getDefaultProbabilities","totalDays","hotDays","coldDays","wetDays","windyDays","uncomfortableDays","forEach","dayData","temperature","precipitation","windSpeed","humidity","heatIndex","calculateHeatIndex","hot","Math","round","cold","wet","windy","uncomfortable","T","RH","HI","analyzeSeasonalPatterns","monthly","patterns","hottestMonth","coldestMonth","wettestMonth","driestMonth","windiestMonth","calmestMonth","maxTemp","Infinity","minTemp","maxRain","minRain","maxWind","minWind","monthData","month","rainfall","calculateExtremeEvents","extremes","recordHigh","recordLow","maxRainfall","maxWindSpeed","heatWaves","coldSnaps","droughts","wetSpells","consecutiveHotDays","consecutiveColdDays","consecutiveDryDays","consecutiveWetDays","index","generateWeatherInsights","probabilities","insights","push","type","title","message","totalHighProbabilities","filter","prob","weatherCalculations"],"sources":["C:/xampp/htdocs/errors/src/utils/weatherCalculations.js"],"sourcesContent":["class WeatherCalculations {\n  calculateProbabilities(historicalData, targetDate) {\n    const { daily } = historicalData;\n    \n    if (!daily || daily.length === 0) {\n      return this.getDefaultProbabilities();\n    }\n\n    const totalDays = daily.length;\n    let hotDays = 0;\n    let coldDays = 0;\n    let wetDays = 0;\n    let windyDays = 0;\n    let uncomfortableDays = 0;\n\n    daily.forEach(dayData => {\n      const { temperature, precipitation, windSpeed, humidity } = dayData;\n      \n      // Hot weather: temperature > 35°C\n      if (temperature > 35) {\n        hotDays++;\n      }\n      \n      // Cold weather: temperature < 5°C\n      if (temperature < 5) {\n        coldDays++;\n      }\n      \n      // Wet weather: precipitation > 10mm/day\n      if (precipitation > 10) {\n        wetDays++;\n      }\n      \n      // Windy weather: wind speed > 10m/s\n      if (windSpeed > 10) {\n        windyDays++;\n      }\n      \n      // Uncomfortable conditions: heat index > 32°C\n      const heatIndex = this.calculateHeatIndex(temperature, humidity);\n      if (heatIndex > 32) {\n        uncomfortableDays++;\n      }\n    });\n\n    return {\n      hot: Math.round((hotDays / totalDays) * 100),\n      cold: Math.round((coldDays / totalDays) * 100),\n      wet: Math.round((wetDays / totalDays) * 100),\n      windy: Math.round((windyDays / totalDays) * 100),\n      uncomfortable: Math.round((uncomfortableDays / totalDays) * 100)\n    };\n  }\n\n  calculateHeatIndex(temperature, humidity) {\n    // Heat index calculation (simplified version)\n    // Based on the formula used by the US National Weather Service\n    \n    if (temperature < 27) {\n      return temperature; // Heat index not applicable for cool temperatures\n    }\n\n    const T = temperature;\n    const RH = humidity;\n\n    // Simplified heat index formula\n    const HI = -8.78469475556 +\n               1.61139411 * T +\n               2.33854883889 * RH +\n               -0.14611605 * T * RH +\n               -0.012308094 * T * T +\n               -0.0164248277778 * RH * RH +\n               0.002211732 * T * T * RH +\n               0.00072546 * T * RH * RH +\n               -0.000003582 * T * T * RH * RH;\n\n    return Math.round(HI * 10) / 10;\n  }\n\n  getDefaultProbabilities() {\n    // Default probabilities when no data is available\n    return {\n      hot: 15,\n      cold: 10,\n      wet: 25,\n      windy: 20,\n      uncomfortable: 18\n    };\n  }\n\n  analyzeSeasonalPatterns(historicalData) {\n    const { monthly } = historicalData;\n    \n    if (!monthly || monthly.length === 0) {\n      return null;\n    }\n\n    const patterns = {\n      hottestMonth: null,\n      coldestMonth: null,\n      wettestMonth: null,\n      driestMonth: null,\n      windiestMonth: null,\n      calmestMonth: null\n    };\n\n    let maxTemp = -Infinity, minTemp = Infinity;\n    let maxRain = -Infinity, minRain = Infinity;\n    let maxWind = -Infinity, minWind = Infinity;\n\n    monthly.forEach(monthData => {\n      const { month, temperature, rainfall, windSpeed } = monthData;\n      \n      if (temperature > maxTemp) {\n        maxTemp = temperature;\n        patterns.hottestMonth = month;\n      }\n      \n      if (temperature < minTemp) {\n        minTemp = temperature;\n        patterns.coldestMonth = month;\n      }\n      \n      if (rainfall > maxRain) {\n        maxRain = rainfall;\n        patterns.wettestMonth = month;\n      }\n      \n      if (rainfall < minRain) {\n        minRain = rainfall;\n        patterns.driestMonth = month;\n      }\n      \n      if (windSpeed > maxWind) {\n        maxWind = windSpeed;\n        patterns.windiestMonth = month;\n      }\n      \n      if (windSpeed < minWind) {\n        minWind = windSpeed;\n        patterns.calmestMonth = month;\n      }\n    });\n\n    return patterns;\n  }\n\n  calculateExtremeEvents(historicalData) {\n    const { daily } = historicalData;\n    \n    if (!daily || daily.length === 0) {\n      return null;\n    }\n\n    const extremes = {\n      recordHigh: -Infinity,\n      recordLow: Infinity,\n      maxRainfall: -Infinity,\n      maxWindSpeed: -Infinity,\n      heatWaves: 0,\n      coldSnaps: 0,\n      droughts: 0,\n      wetSpells: 0\n    };\n\n    let consecutiveHotDays = 0;\n    let consecutiveColdDays = 0;\n    let consecutiveDryDays = 0;\n    let consecutiveWetDays = 0;\n\n    daily.forEach((dayData, index) => {\n      const { temperature, precipitation, windSpeed } = dayData;\n      \n      // Record extremes\n      if (temperature > extremes.recordHigh) {\n        extremes.recordHigh = temperature;\n      }\n      \n      if (temperature < extremes.recordLow) {\n        extremes.recordLow = temperature;\n      }\n      \n      if (precipitation > extremes.maxRainfall) {\n        extremes.maxRainfall = precipitation;\n      }\n      \n      if (windSpeed > extremes.maxWindSpeed) {\n        extremes.maxWindSpeed = windSpeed;\n      }\n\n      // Count consecutive events\n      if (temperature > 30) {\n        consecutiveHotDays++;\n        consecutiveColdDays = 0;\n      } else if (temperature < 10) {\n        consecutiveColdDays++;\n        consecutiveHotDays = 0;\n      } else {\n        if (consecutiveHotDays >= 3) extremes.heatWaves++;\n        if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n        consecutiveHotDays = 0;\n        consecutiveColdDays = 0;\n      }\n\n      if (precipitation < 1) {\n        consecutiveDryDays++;\n        consecutiveWetDays = 0;\n      } else if (precipitation > 5) {\n        consecutiveWetDays++;\n        consecutiveDryDays = 0;\n      } else {\n        if (consecutiveDryDays >= 7) extremes.droughts++;\n        if (consecutiveWetDays >= 3) extremes.wetSpells++;\n        consecutiveDryDays = 0;\n        consecutiveWetDays = 0;\n      }\n    });\n\n    // Handle end of data\n    if (consecutiveHotDays >= 3) extremes.heatWaves++;\n    if (consecutiveColdDays >= 3) extremes.coldSnaps++;\n    if (consecutiveDryDays >= 7) extremes.droughts++;\n    if (consecutiveWetDays >= 3) extremes.wetSpells++;\n\n    return extremes;\n  }\n\n  generateWeatherInsights(probabilities, historicalData) {\n    const insights = [];\n    \n    // Temperature insights\n    if (probabilities.hot > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'High Heat Probability',\n        message: `There's a ${probabilities.hot}% chance of hot weather (>35°C). Consider heat protection measures.`\n      });\n    } else if (probabilities.cold > 60) {\n      insights.push({\n        type: 'info',\n        title: 'Cold Weather Expected',\n        message: `There's a ${probabilities.cold}% chance of cold weather (<5°C). Dress warmly.`\n      });\n    }\n\n    // Precipitation insights\n    if (probabilities.wet > 70) {\n      insights.push({\n        type: 'info',\n        title: 'High Rain Probability',\n        message: `There's a ${probabilities.wet}% chance of significant rainfall (>10mm). Bring an umbrella.`\n      });\n    } else if (probabilities.wet < 20) {\n      insights.push({\n        type: 'success',\n        title: 'Dry Conditions Expected',\n        message: `Only a ${probabilities.wet}% chance of rain. Great weather for outdoor activities.`\n      });\n    }\n\n    // Wind insights\n    if (probabilities.windy > 50) {\n      insights.push({\n        type: 'warning',\n        title: 'Windy Conditions',\n        message: `${probabilities.windy}% chance of strong winds (>10m/s). Secure loose objects.`\n      });\n    }\n\n    // Comfort insights\n    if (probabilities.uncomfortable > 60) {\n      insights.push({\n        type: 'warning',\n        title: 'Uncomfortable Heat Index',\n        message: `${probabilities.uncomfortable}% chance of uncomfortable conditions. Stay hydrated and seek shade.`\n      });\n    }\n\n    // General insights\n    const totalHighProbabilities = [probabilities.hot, probabilities.cold, probabilities.wet, probabilities.windy]\n      .filter(prob => prob > 50).length;\n\n    if (totalHighProbabilities === 0) {\n      insights.push({\n        type: 'success',\n        title: 'Moderate Weather Expected',\n        message: 'Weather conditions are expected to be generally moderate with no extreme conditions likely.'\n      });\n    } else if (totalHighProbabilities >= 3) {\n      insights.push({\n        type: 'warning',\n        title: 'Variable Conditions',\n        message: 'Multiple weather conditions are possible. Check forecasts closer to your date.'\n      });\n    }\n\n    return insights;\n  }\n}\n\nexport const weatherCalculations = new WeatherCalculations();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}